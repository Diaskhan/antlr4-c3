//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class WhiteboxLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LOREM=1, IPSUM=2, DOLOR=3, SIT=4, AMET=5, CONSECTETUR=6, ADIPISCING=7, 
		WS=8;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LOREM", "IPSUM", "DOLOR", "SIT", "AMET", "CONSECTETUR", "ADIPISCING", 
		"WS"
	};


	public WhiteboxLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public WhiteboxLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'LOREM'", "'IPSUM'", "'DOLOR'", "'SIT'", "'AMET'", "'CONSECTETUR'", 
		"'ADIPISCING'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LOREM", "IPSUM", "DOLOR", "SIT", "AMET", "CONSECTETUR", "ADIPISCING", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Whitebox.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static WhiteboxLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,8,71,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,
		2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		7,1,7,1,7,1,7,0,0,8,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,1,0,1,3,0,9,10,
		13,13,32,32,70,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
		0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,1,17,1,0,0,0,3,23,1,0,0,0,5,
		29,1,0,0,0,7,35,1,0,0,0,9,39,1,0,0,0,11,44,1,0,0,0,13,56,1,0,0,0,15,67,
		1,0,0,0,17,18,5,76,0,0,18,19,5,79,0,0,19,20,5,82,0,0,20,21,5,69,0,0,21,
		22,5,77,0,0,22,2,1,0,0,0,23,24,5,73,0,0,24,25,5,80,0,0,25,26,5,83,0,0,
		26,27,5,85,0,0,27,28,5,77,0,0,28,4,1,0,0,0,29,30,5,68,0,0,30,31,5,79,0,
		0,31,32,5,76,0,0,32,33,5,79,0,0,33,34,5,82,0,0,34,6,1,0,0,0,35,36,5,83,
		0,0,36,37,5,73,0,0,37,38,5,84,0,0,38,8,1,0,0,0,39,40,5,65,0,0,40,41,5,
		77,0,0,41,42,5,69,0,0,42,43,5,84,0,0,43,10,1,0,0,0,44,45,5,67,0,0,45,46,
		5,79,0,0,46,47,5,78,0,0,47,48,5,83,0,0,48,49,5,69,0,0,49,50,5,67,0,0,50,
		51,5,84,0,0,51,52,5,69,0,0,52,53,5,84,0,0,53,54,5,85,0,0,54,55,5,82,0,
		0,55,12,1,0,0,0,56,57,5,65,0,0,57,58,5,68,0,0,58,59,5,73,0,0,59,60,5,80,
		0,0,60,61,5,73,0,0,61,62,5,83,0,0,62,63,5,67,0,0,63,64,5,73,0,0,64,65,
		5,78,0,0,65,66,5,71,0,0,66,14,1,0,0,0,67,68,7,0,0,0,68,69,1,0,0,0,69,70,
		6,7,0,0,70,16,1,0,0,0,1,0,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
