//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class CPP14Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MultiLineMacro=1, Directive=2, Alignas=3, Alignof=4, Asm=5, Auto=6, Bool=7, 
		Break=8, Case=9, Catch=10, Char=11, Char16=12, Char32=13, Class=14, Const=15, 
		Constexpr=16, Const_cast=17, Continue=18, Decltype=19, Default=20, Delete=21, 
		Do=22, Double=23, Dynamic_cast=24, Else=25, Enum=26, Explicit=27, Export=28, 
		Extern=29, False=30, Final=31, Float=32, For=33, Friend=34, Goto=35, If=36, 
		Inline=37, Int=38, Long=39, Mutable=40, Namespace=41, New=42, Noexcept=43, 
		Nullptr=44, Operator=45, Override=46, Private=47, Protected=48, Public=49, 
		Register=50, Reinterpret_cast=51, Return=52, Short=53, Signed=54, Sizeof=55, 
		Static=56, Static_assert=57, Static_cast=58, Struct=59, Switch=60, Template=61, 
		This=62, Thread_local=63, Throw=64, True=65, Try=66, Typedef=67, Typeid=68, 
		Typename=69, Union=70, Unsigned=71, Using=72, Virtual=73, Void=74, Volatile=75, 
		Wchar=76, While=77, LeftParen=78, RightParen=79, LeftBracket=80, RightBracket=81, 
		LeftBrace=82, RightBrace=83, Plus=84, Minus=85, Star=86, Div=87, Mod=88, 
		Caret=89, And=90, Or=91, Tilde=92, Not=93, Assign=94, Less=95, Greater=96, 
		PlusAssign=97, MinusAssign=98, StarAssign=99, DivAssign=100, ModAssign=101, 
		XorAssign=102, AndAssign=103, OrAssign=104, LeftShift=105, LeftShiftAssign=106, 
		Equal=107, NotEqual=108, LessEqual=109, GreaterEqual=110, AndAnd=111, 
		OrOr=112, PlusPlus=113, MinusMinus=114, Comma=115, ArrowStar=116, Arrow=117, 
		Question=118, Colon=119, Doublecolon=120, Semi=121, Dot=122, DotStar=123, 
		Ellipsis=124, Identifier=125, Integerliteral=126, ZeroLiteral=127, Decimalliteral=128, 
		Octalliteral=129, Hexadecimalliteral=130, Binaryliteral=131, Integersuffix=132, 
		Characterliteral=133, Floatingliteral=134, Stringliteral=135, Userdefinedintegerliteral=136, 
		Userdefinedfloatingliteral=137, Userdefinedstringliteral=138, Userdefinedcharacterliteral=139, 
		Whitespace=140, Newline=141, BlockComment=142, LineComment=143;
	public const int
		RULE_translationunit = 0, RULE_primaryexpression = 1, RULE_idexpression = 2, 
		RULE_unqualifiedid = 3, RULE_qualifiedid = 4, RULE_nestednamespecifier = 5, 
		RULE_lambdaexpression = 6, RULE_lambdaintroducer = 7, RULE_lambdacapture = 8, 
		RULE_capturedefault = 9, RULE_capturelist = 10, RULE_capture = 11, RULE_simplecapture = 12, 
		RULE_initcapture = 13, RULE_lambdadeclarator = 14, RULE_postfixexpression = 15, 
		RULE_expressionlist = 16, RULE_pseudodestructorname = 17, RULE_unaryexpression = 18, 
		RULE_unaryoperator = 19, RULE_newexpression = 20, RULE_newplacement = 21, 
		RULE_newtypeid = 22, RULE_newdeclarator = 23, RULE_noptrnewdeclarator = 24, 
		RULE_newinitializer = 25, RULE_deleteexpression = 26, RULE_noexceptexpression = 27, 
		RULE_castexpression = 28, RULE_pmexpression = 29, RULE_multiplicativeexpression = 30, 
		RULE_additiveexpression = 31, RULE_shiftexpression = 32, RULE_relationalexpression = 33, 
		RULE_equalityexpression = 34, RULE_andexpression = 35, RULE_exclusiveorexpression = 36, 
		RULE_inclusiveorexpression = 37, RULE_logicalandexpression = 38, RULE_logicalorexpression = 39, 
		RULE_conditionalexpression = 40, RULE_assignmentexpression = 41, RULE_assignmentoperator = 42, 
		RULE_expression = 43, RULE_constantexpression = 44, RULE_statement = 45, 
		RULE_labeledstatement = 46, RULE_expressionstatement = 47, RULE_compoundstatement = 48, 
		RULE_statementseq = 49, RULE_selectionstatement = 50, RULE_condition = 51, 
		RULE_iterationstatement = 52, RULE_forinitstatement = 53, RULE_forrangedeclaration = 54, 
		RULE_forrangeinitializer = 55, RULE_jumpstatement = 56, RULE_declarationstatement = 57, 
		RULE_declarationseq = 58, RULE_declaration = 59, RULE_blockdeclaration = 60, 
		RULE_aliasdeclaration = 61, RULE_simpledeclaration = 62, RULE_static_assertdeclaration = 63, 
		RULE_emptydeclaration = 64, RULE_attributedeclaration = 65, RULE_declspecifier = 66, 
		RULE_declspecifierseq = 67, RULE_storageclassspecifier = 68, RULE_functionspecifier = 69, 
		RULE_typedefname = 70, RULE_typespecifier = 71, RULE_trailingtypespecifier = 72, 
		RULE_typespecifierseq = 73, RULE_trailingtypespecifierseq = 74, RULE_simpletypespecifier = 75, 
		RULE_typename = 76, RULE_decltypespecifier = 77, RULE_elaboratedtypespecifier = 78, 
		RULE_enumname = 79, RULE_enumspecifier = 80, RULE_enumhead = 81, RULE_opaqueenumdeclaration = 82, 
		RULE_enumkey = 83, RULE_enumbase = 84, RULE_enumeratorlist = 85, RULE_enumeratordefinition = 86, 
		RULE_enumerator = 87, RULE_namespacename = 88, RULE_originalnamespacename = 89, 
		RULE_namespacedefinition = 90, RULE_namednamespacedefinition = 91, RULE_originalnamespacedefinition = 92, 
		RULE_extensionnamespacedefinition = 93, RULE_unnamednamespacedefinition = 94, 
		RULE_namespacebody = 95, RULE_namespacealias = 96, RULE_namespacealiasdefinition = 97, 
		RULE_qualifiednamespacespecifier = 98, RULE_usingdeclaration = 99, RULE_usingdirective = 100, 
		RULE_asmdefinition = 101, RULE_linkagespecification = 102, RULE_attributespecifierseq = 103, 
		RULE_attributespecifier = 104, RULE_alignmentspecifier = 105, RULE_attributelist = 106, 
		RULE_attribute = 107, RULE_attributetoken = 108, RULE_attributescopedtoken = 109, 
		RULE_attributenamespace = 110, RULE_attributeargumentclause = 111, RULE_balancedtokenseq = 112, 
		RULE_balancedtoken = 113, RULE_initdeclaratorlist = 114, RULE_initdeclarator = 115, 
		RULE_declarator = 116, RULE_ptrdeclarator = 117, RULE_noptrdeclarator = 118, 
		RULE_parametersandqualifiers = 119, RULE_trailingreturntype = 120, RULE_ptroperator = 121, 
		RULE_cvqualifierseq = 122, RULE_cvqualifier = 123, RULE_refqualifier = 124, 
		RULE_declaratorid = 125, RULE_typeid = 126, RULE_abstractdeclarator = 127, 
		RULE_ptrabstractdeclarator = 128, RULE_noptrabstractdeclarator = 129, 
		RULE_abstractpackdeclarator = 130, RULE_noptrabstractpackdeclarator = 131, 
		RULE_parameterdeclarationclause = 132, RULE_parameterdeclarationlist = 133, 
		RULE_parameterdeclaration = 134, RULE_functiondefinition = 135, RULE_functionbody = 136, 
		RULE_initializer = 137, RULE_braceorequalinitializer = 138, RULE_initializerclause = 139, 
		RULE_initializerlist = 140, RULE_bracedinitlist = 141, RULE_classname = 142, 
		RULE_classspecifier = 143, RULE_classhead = 144, RULE_classheadname = 145, 
		RULE_classvirtspecifier = 146, RULE_classkey = 147, RULE_memberspecification = 148, 
		RULE_memberdeclaration = 149, RULE_memberdeclaratorlist = 150, RULE_memberdeclarator = 151, 
		RULE_virtspecifierseq = 152, RULE_virtspecifier = 153, RULE_purespecifier = 154, 
		RULE_baseclause = 155, RULE_basespecifierlist = 156, RULE_basespecifier = 157, 
		RULE_classordecltype = 158, RULE_basetypespecifier = 159, RULE_accessspecifier = 160, 
		RULE_conversionfunctionid = 161, RULE_conversiontypeid = 162, RULE_conversiondeclarator = 163, 
		RULE_ctorinitializer = 164, RULE_meminitializerlist = 165, RULE_meminitializer = 166, 
		RULE_meminitializerid = 167, RULE_operatorfunctionid = 168, RULE_literaloperatorid = 169, 
		RULE_templatedeclaration = 170, RULE_templateparameterlist = 171, RULE_templateparameter = 172, 
		RULE_typeparameter = 173, RULE_simpletemplateid = 174, RULE_templateid = 175, 
		RULE_templatename = 176, RULE_templateargumentlist = 177, RULE_templateargument = 178, 
		RULE_typenamespecifier = 179, RULE_explicitinstantiation = 180, RULE_explicitspecialization = 181, 
		RULE_tryblock = 182, RULE_functiontryblock = 183, RULE_handlerseq = 184, 
		RULE_handler = 185, RULE_exceptiondeclaration = 186, RULE_throwexpression = 187, 
		RULE_exceptionspecification = 188, RULE_dynamicexceptionspecification = 189, 
		RULE_typeidlist = 190, RULE_noexceptspecification = 191, RULE_rightShift = 192, 
		RULE_rightShiftAssign = 193, RULE_operator = 194, RULE_literal = 195, 
		RULE_booleanliteral = 196, RULE_pointerliteral = 197, RULE_userdefinedliteral = 198;
	public static readonly string[] ruleNames = {
		"translationunit", "primaryexpression", "idexpression", "unqualifiedid", 
		"qualifiedid", "nestednamespecifier", "lambdaexpression", "lambdaintroducer", 
		"lambdacapture", "capturedefault", "capturelist", "capture", "simplecapture", 
		"initcapture", "lambdadeclarator", "postfixexpression", "expressionlist", 
		"pseudodestructorname", "unaryexpression", "unaryoperator", "newexpression", 
		"newplacement", "newtypeid", "newdeclarator", "noptrnewdeclarator", "newinitializer", 
		"deleteexpression", "noexceptexpression", "castexpression", "pmexpression", 
		"multiplicativeexpression", "additiveexpression", "shiftexpression", "relationalexpression", 
		"equalityexpression", "andexpression", "exclusiveorexpression", "inclusiveorexpression", 
		"logicalandexpression", "logicalorexpression", "conditionalexpression", 
		"assignmentexpression", "assignmentoperator", "expression", "constantexpression", 
		"statement", "labeledstatement", "expressionstatement", "compoundstatement", 
		"statementseq", "selectionstatement", "condition", "iterationstatement", 
		"forinitstatement", "forrangedeclaration", "forrangeinitializer", "jumpstatement", 
		"declarationstatement", "declarationseq", "declaration", "blockdeclaration", 
		"aliasdeclaration", "simpledeclaration", "static_assertdeclaration", "emptydeclaration", 
		"attributedeclaration", "declspecifier", "declspecifierseq", "storageclassspecifier", 
		"functionspecifier", "typedefname", "typespecifier", "trailingtypespecifier", 
		"typespecifierseq", "trailingtypespecifierseq", "simpletypespecifier", 
		"typename", "decltypespecifier", "elaboratedtypespecifier", "enumname", 
		"enumspecifier", "enumhead", "opaqueenumdeclaration", "enumkey", "enumbase", 
		"enumeratorlist", "enumeratordefinition", "enumerator", "namespacename", 
		"originalnamespacename", "namespacedefinition", "namednamespacedefinition", 
		"originalnamespacedefinition", "extensionnamespacedefinition", "unnamednamespacedefinition", 
		"namespacebody", "namespacealias", "namespacealiasdefinition", "qualifiednamespacespecifier", 
		"usingdeclaration", "usingdirective", "asmdefinition", "linkagespecification", 
		"attributespecifierseq", "attributespecifier", "alignmentspecifier", "attributelist", 
		"attribute", "attributetoken", "attributescopedtoken", "attributenamespace", 
		"attributeargumentclause", "balancedtokenseq", "balancedtoken", "initdeclaratorlist", 
		"initdeclarator", "declarator", "ptrdeclarator", "noptrdeclarator", "parametersandqualifiers", 
		"trailingreturntype", "ptroperator", "cvqualifierseq", "cvqualifier", 
		"refqualifier", "declaratorid", "typeid", "abstractdeclarator", "ptrabstractdeclarator", 
		"noptrabstractdeclarator", "abstractpackdeclarator", "noptrabstractpackdeclarator", 
		"parameterdeclarationclause", "parameterdeclarationlist", "parameterdeclaration", 
		"functiondefinition", "functionbody", "initializer", "braceorequalinitializer", 
		"initializerclause", "initializerlist", "bracedinitlist", "classname", 
		"classspecifier", "classhead", "classheadname", "classvirtspecifier", 
		"classkey", "memberspecification", "memberdeclaration", "memberdeclaratorlist", 
		"memberdeclarator", "virtspecifierseq", "virtspecifier", "purespecifier", 
		"baseclause", "basespecifierlist", "basespecifier", "classordecltype", 
		"basetypespecifier", "accessspecifier", "conversionfunctionid", "conversiontypeid", 
		"conversiondeclarator", "ctorinitializer", "meminitializerlist", "meminitializer", 
		"meminitializerid", "operatorfunctionid", "literaloperatorid", "templatedeclaration", 
		"templateparameterlist", "templateparameter", "typeparameter", "simpletemplateid", 
		"templateid", "templatename", "templateargumentlist", "templateargument", 
		"typenamespecifier", "explicitinstantiation", "explicitspecialization", 
		"tryblock", "functiontryblock", "handlerseq", "handler", "exceptiondeclaration", 
		"throwexpression", "exceptionspecification", "dynamicexceptionspecification", 
		"typeidlist", "noexceptspecification", "rightShift", "rightShiftAssign", 
		"operator", "literal", "booleanliteral", "pointerliteral", "userdefinedliteral"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'alignas'", "'alignof'", "'asm'", "'auto'", "'bool'", 
		"'break'", "'case'", "'catch'", "'char'", "'char16_t'", "'char32_t'", 
		"'class'", "'const'", "'constexpr'", "'const_cast'", "'continue'", "'decltype'", 
		"'default'", "'delete'", "'do'", "'double'", "'dynamic_cast'", "'else'", 
		"'enum'", "'explicit'", "'export'", "'extern'", "'false'", "'final'", 
		"'float'", "'for'", "'friend'", "'goto'", "'if'", "'inline'", "'int'", 
		"'long'", "'mutable'", "'namespace'", "'new'", "'noexcept'", "'nullptr'", 
		"'operator'", "'override'", "'private'", "'protected'", "'public'", "'register'", 
		"'reinterpret_cast'", "'return'", "'short'", "'signed'", "'sizeof'", "'static'", 
		"'static_assert'", "'static_cast'", "'struct'", "'switch'", "'template'", 
		"'this'", "'thread_local'", "'throw'", "'true'", "'try'", "'typedef'", 
		"'typeid'", "'typename'", "'union'", "'unsigned'", "'using'", "'virtual'", 
		"'void'", "'volatile'", "'wchar_t'", "'while'", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'&'", "'|'", 
		"'~'", "'!'", "'='", "'<'", "'>'", "'+='", "'-='", "'*='", "'/='", "'%='", 
		"'^='", "'&='", "'|='", "'<<'", "'<<='", "'=='", "'!='", "'<='", "'>='", 
		"'&&'", "'||'", "'++'", "'--'", "','", "'->*'", "'->'", "'?'", "':'", 
		"'::'", "';'", "'.'", "'.*'", "'...'", null, null, "'0'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MultiLineMacro", "Directive", "Alignas", "Alignof", "Asm", "Auto", 
		"Bool", "Break", "Case", "Catch", "Char", "Char16", "Char32", "Class", 
		"Const", "Constexpr", "Const_cast", "Continue", "Decltype", "Default", 
		"Delete", "Do", "Double", "Dynamic_cast", "Else", "Enum", "Explicit", 
		"Export", "Extern", "False", "Final", "Float", "For", "Friend", "Goto", 
		"If", "Inline", "Int", "Long", "Mutable", "Namespace", "New", "Noexcept", 
		"Nullptr", "Operator", "Override", "Private", "Protected", "Public", "Register", 
		"Reinterpret_cast", "Return", "Short", "Signed", "Sizeof", "Static", "Static_assert", 
		"Static_cast", "Struct", "Switch", "Template", "This", "Thread_local", 
		"Throw", "True", "Try", "Typedef", "Typeid", "Typename", "Union", "Unsigned", 
		"Using", "Virtual", "Void", "Volatile", "Wchar", "While", "LeftParen", 
		"RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", 
		"Plus", "Minus", "Star", "Div", "Mod", "Caret", "And", "Or", "Tilde", 
		"Not", "Assign", "Less", "Greater", "PlusAssign", "MinusAssign", "StarAssign", 
		"DivAssign", "ModAssign", "XorAssign", "AndAssign", "OrAssign", "LeftShift", 
		"LeftShiftAssign", "Equal", "NotEqual", "LessEqual", "GreaterEqual", "AndAnd", 
		"OrOr", "PlusPlus", "MinusMinus", "Comma", "ArrowStar", "Arrow", "Question", 
		"Colon", "Doublecolon", "Semi", "Dot", "DotStar", "Ellipsis", "Identifier", 
		"Integerliteral", "ZeroLiteral", "Decimalliteral", "Octalliteral", "Hexadecimalliteral", 
		"Binaryliteral", "Integersuffix", "Characterliteral", "Floatingliteral", 
		"Stringliteral", "Userdefinedintegerliteral", "Userdefinedfloatingliteral", 
		"Userdefinedstringliteral", "Userdefinedcharacterliteral", "Whitespace", 
		"Newline", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CPP14.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CPP14Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CPP14Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CPP14Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TranslationunitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CPP14Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationseqContext declarationseq() {
			return GetRuleContext<DeclarationseqContext>(0);
		}
		public TranslationunitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translationunit; } }
	}

	[RuleVersion(0)]
	public TranslationunitContext translationunit() {
		TranslationunitContext _localctx = new TranslationunitContext(Context, State);
		EnterRule(_localctx, 0, RULE_translationunit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6096708528351086360L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 459384754220313597L) != 0)) {
				{
				State = 398;
				declarationseq(0);
				}
			}

			State = 401;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(CPP14Parser.This, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdexpressionContext idexpression() {
			return GetRuleContext<IdexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaexpressionContext lambdaexpression() {
			return GetRuleContext<LambdaexpressionContext>(0);
		}
		public PrimaryexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryexpression; } }
	}

	[RuleVersion(0)]
	public PrimaryexpressionContext primaryexpression() {
		PrimaryexpressionContext _localctx = new PrimaryexpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_primaryexpression);
		try {
			State = 411;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case False:
			case Nullptr:
			case True:
			case Integerliteral:
			case Characterliteral:
			case Floatingliteral:
			case Stringliteral:
			case Userdefinedintegerliteral:
			case Userdefinedfloatingliteral:
			case Userdefinedstringliteral:
			case Userdefinedcharacterliteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 403;
				literal();
				}
				break;
			case This:
				EnterOuterAlt(_localctx, 2);
				{
				State = 404;
				Match(This);
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 3);
				{
				State = 405;
				Match(LeftParen);
				State = 406;
				expression(0);
				State = 407;
				Match(RightParen);
				}
				break;
			case Decltype:
			case Operator:
			case Tilde:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 4);
				{
				State = 409;
				idexpression();
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 5);
				{
				State = 410;
				lambdaexpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnqualifiedidContext unqualifiedid() {
			return GetRuleContext<UnqualifiedidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedidContext qualifiedid() {
			return GetRuleContext<QualifiedidContext>(0);
		}
		public IdexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idexpression; } }
	}

	[RuleVersion(0)]
	public IdexpressionContext idexpression() {
		IdexpressionContext _localctx = new IdexpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_idexpression);
		try {
			State = 415;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 413;
				unqualifiedid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 414;
				qualifiedid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnqualifiedidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorfunctionidContext operatorfunctionid() {
			return GetRuleContext<OperatorfunctionidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConversionfunctionidContext conversionfunctionid() {
			return GetRuleContext<ConversionfunctionidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteraloperatoridContext literaloperatorid() {
			return GetRuleContext<LiteraloperatoridContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(CPP14Parser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassnameContext classname() {
			return GetRuleContext<ClassnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecltypespecifierContext decltypespecifier() {
			return GetRuleContext<DecltypespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateidContext templateid() {
			return GetRuleContext<TemplateidContext>(0);
		}
		public UnqualifiedidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unqualifiedid; } }
	}

	[RuleVersion(0)]
	public UnqualifiedidContext unqualifiedid() {
		UnqualifiedidContext _localctx = new UnqualifiedidContext(Context, State);
		EnterRule(_localctx, 6, RULE_unqualifiedid);
		try {
			State = 426;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 417;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 418;
				operatorfunctionid();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 419;
				conversionfunctionid();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 420;
				literaloperatorid();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 421;
				Match(Tilde);
				State = 422;
				classname();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 423;
				Match(Tilde);
				State = 424;
				decltypespecifier();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 425;
				templateid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnqualifiedidContext unqualifiedid() {
			return GetRuleContext<UnqualifiedidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public QualifiedidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedid; } }
	}

	[RuleVersion(0)]
	public QualifiedidContext qualifiedid() {
		QualifiedidContext _localctx = new QualifiedidContext(Context, State);
		EnterRule(_localctx, 8, RULE_qualifiedid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			nestednamespecifier(0);
			State = 430;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Template) {
				{
				State = 429;
				Match(Template);
				}
			}

			State = 432;
			unqualifiedid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestednamespecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Doublecolon() { return GetToken(CPP14Parser.Doublecolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespacenameContext namespacename() {
			return GetRuleContext<NamespacenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecltypespecifierContext decltypespecifier() {
			return GetRuleContext<DecltypespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public NestednamespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestednamespecifier; } }
	}

	[RuleVersion(0)]
	public NestednamespecifierContext nestednamespecifier() {
		return nestednamespecifier(0);
	}

	private NestednamespecifierContext nestednamespecifier(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NestednamespecifierContext _localctx = new NestednamespecifierContext(Context, _parentState);
		NestednamespecifierContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_nestednamespecifier, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 445;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 435;
				Match(Doublecolon);
				}
				break;
			case 2:
				{
				State = 436;
				typename();
				State = 437;
				Match(Doublecolon);
				}
				break;
			case 3:
				{
				State = 439;
				namespacename();
				State = 440;
				Match(Doublecolon);
				}
				break;
			case 4:
				{
				State = 442;
				decltypespecifier();
				State = 443;
				Match(Doublecolon);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 459;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 457;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new NestednamespecifierContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_nestednamespecifier);
						State = 447;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 448;
						Match(Identifier);
						State = 449;
						Match(Doublecolon);
						}
						break;
					case 2:
						{
						_localctx = new NestednamespecifierContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_nestednamespecifier);
						State = 450;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 452;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Template) {
							{
							State = 451;
							Match(Template);
							}
						}

						State = 454;
						simpletemplateid();
						State = 455;
						Match(Doublecolon);
						}
						break;
					}
					} 
				}
				State = 461;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LambdaexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaintroducerContext lambdaintroducer() {
			return GetRuleContext<LambdaintroducerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdadeclaratorContext lambdadeclarator() {
			return GetRuleContext<LambdadeclaratorContext>(0);
		}
		public LambdaexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaexpression; } }
	}

	[RuleVersion(0)]
	public LambdaexpressionContext lambdaexpression() {
		LambdaexpressionContext _localctx = new LambdaexpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_lambdaexpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462;
			lambdaintroducer();
			State = 464;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftParen) {
				{
				State = 463;
				lambdadeclarator();
				}
			}

			State = 466;
			compoundstatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaintroducerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LambdacaptureContext lambdacapture() {
			return GetRuleContext<LambdacaptureContext>(0);
		}
		public LambdaintroducerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaintroducer; } }
	}

	[RuleVersion(0)]
	public LambdaintroducerContext lambdaintroducer() {
		LambdaintroducerContext _localctx = new LambdaintroducerContext(Context, State);
		EnterRule(_localctx, 14, RULE_lambdaintroducer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			Match(LeftBracket);
			State = 470;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & -9223372032291373055L) != 0)) {
				{
				State = 469;
				lambdacapture();
				}
			}

			State = 472;
			Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdacaptureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CapturedefaultContext capturedefault() {
			return GetRuleContext<CapturedefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CapturelistContext capturelist() {
			return GetRuleContext<CapturelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public LambdacaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdacapture; } }
	}

	[RuleVersion(0)]
	public LambdacaptureContext lambdacapture() {
		LambdacaptureContext _localctx = new LambdacaptureContext(Context, State);
		EnterRule(_localctx, 16, RULE_lambdacapture);
		try {
			State = 480;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 474;
				capturedefault();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 475;
				capturelist(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 476;
				capturedefault();
				State = 477;
				Match(Comma);
				State = 478;
				capturelist(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CapturedefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public CapturedefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_capturedefault; } }
	}

	[RuleVersion(0)]
	public CapturedefaultContext capturedefault() {
		CapturedefaultContext _localctx = new CapturedefaultContext(Context, State);
		EnterRule(_localctx, 18, RULE_capturedefault);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			_la = TokenStream.LA(1);
			if ( !(_la==And || _la==Assign) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CapturelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaptureContext capture() {
			return GetRuleContext<CaptureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CapturelistContext capturelist() {
			return GetRuleContext<CapturelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public CapturelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_capturelist; } }
	}

	[RuleVersion(0)]
	public CapturelistContext capturelist() {
		return capturelist(0);
	}

	private CapturelistContext capturelist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CapturelistContext _localctx = new CapturelistContext(Context, _parentState);
		CapturelistContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_capturelist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 485;
			capture();
			State = 487;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 486;
				Match(Ellipsis);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 497;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CapturelistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_capturelist);
					State = 489;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 490;
					Match(Comma);
					State = 491;
					capture();
					State = 493;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						State = 492;
						Match(Ellipsis);
						}
						break;
					}
					}
					} 
				}
				State = 499;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CaptureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimplecaptureContext simplecapture() {
			return GetRuleContext<SimplecaptureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitcaptureContext initcapture() {
			return GetRuleContext<InitcaptureContext>(0);
		}
		public CaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_capture; } }
	}

	[RuleVersion(0)]
	public CaptureContext capture() {
		CaptureContext _localctx = new CaptureContext(Context, State);
		EnterRule(_localctx, 22, RULE_capture);
		try {
			State = 502;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 500;
				simplecapture();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 501;
				initcapture();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimplecaptureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(CPP14Parser.This, 0); }
		public SimplecaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simplecapture; } }
	}

	[RuleVersion(0)]
	public SimplecaptureContext simplecapture() {
		SimplecaptureContext _localctx = new SimplecaptureContext(Context, State);
		EnterRule(_localctx, 24, RULE_simplecapture);
		try {
			State = 508;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 504;
				Match(Identifier);
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 2);
				{
				State = 505;
				Match(And);
				State = 506;
				Match(Identifier);
				}
				break;
			case This:
				EnterOuterAlt(_localctx, 3);
				{
				State = 507;
				Match(This);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitcaptureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		public InitcaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initcapture; } }
	}

	[RuleVersion(0)]
	public InitcaptureContext initcapture() {
		InitcaptureContext _localctx = new InitcaptureContext(Context, State);
		EnterRule(_localctx, 26, RULE_initcapture);
		try {
			State = 515;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 510;
				Match(Identifier);
				State = 511;
				initializer();
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 2);
				{
				State = 512;
				Match(And);
				State = 513;
				Match(Identifier);
				State = 514;
				initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdadeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterdeclarationclauseContext parameterdeclarationclause() {
			return GetRuleContext<ParameterdeclarationclauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mutable() { return GetToken(CPP14Parser.Mutable, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionspecificationContext exceptionspecification() {
			return GetRuleContext<ExceptionspecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrailingreturntypeContext trailingreturntype() {
			return GetRuleContext<TrailingreturntypeContext>(0);
		}
		public LambdadeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdadeclarator; } }
	}

	[RuleVersion(0)]
	public LambdadeclaratorContext lambdadeclarator() {
		LambdadeclaratorContext _localctx = new LambdadeclaratorContext(Context, State);
		EnterRule(_localctx, 28, RULE_lambdadeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			Match(LeftParen);
			State = 518;
			parameterdeclarationclause();
			State = 519;
			Match(RightParen);
			State = 521;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Mutable) {
				{
				State = 520;
				Match(Mutable);
				}
			}

			State = 524;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Noexcept || _la==Throw) {
				{
				State = 523;
				exceptionspecification();
				}
			}

			State = 527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 526;
				attributespecifierseq(0);
				}
			}

			State = 530;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Arrow) {
				{
				State = 529;
				trailingreturntype();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryexpressionContext primaryexpression() {
			return GetRuleContext<PrimaryexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpletypespecifierContext simpletypespecifier() {
			return GetRuleContext<SimpletypespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenamespecifierContext typenamespecifier() {
			return GetRuleContext<TypenamespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dynamic_cast() { return GetToken(CPP14Parser.Dynamic_cast, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeidContext typeid() {
			return GetRuleContext<TypeidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static_cast() { return GetToken(CPP14Parser.Static_cast, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Reinterpret_cast() { return GetToken(CPP14Parser.Reinterpret_cast, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const_cast() { return GetToken(CPP14Parser.Const_cast, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typeid() { return GetToken(CPP14Parser.Typeid, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PostfixexpressionContext postfixexpression() {
			return GetRuleContext<PostfixexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(CPP14Parser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdexpressionContext idexpression() {
			return GetRuleContext<IdexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(CPP14Parser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PseudodestructornameContext pseudodestructorname() {
			return GetRuleContext<PseudodestructornameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(CPP14Parser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(CPP14Parser.MinusMinus, 0); }
		public PostfixexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixexpression; } }
	}

	[RuleVersion(0)]
	public PostfixexpressionContext postfixexpression() {
		return postfixexpression(0);
	}

	private PostfixexpressionContext postfixexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PostfixexpressionContext _localctx = new PostfixexpressionContext(Context, _parentState);
		PostfixexpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_postfixexpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 533;
				primaryexpression();
				}
				break;
			case 2:
				{
				State = 534;
				simpletypespecifier();
				State = 535;
				Match(LeftParen);
				State = 537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4965285389904001232L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 6991275472553596083L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 127L) != 0)) {
					{
					State = 536;
					expressionlist();
					}
				}

				State = 539;
				Match(RightParen);
				}
				break;
			case 3:
				{
				State = 541;
				typenamespecifier();
				State = 542;
				Match(LeftParen);
				State = 544;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4965285389904001232L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 6991275472553596083L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 127L) != 0)) {
					{
					State = 543;
					expressionlist();
					}
				}

				State = 546;
				Match(RightParen);
				}
				break;
			case 4:
				{
				State = 548;
				simpletypespecifier();
				State = 549;
				bracedinitlist();
				}
				break;
			case 5:
				{
				State = 551;
				typenamespecifier();
				State = 552;
				bracedinitlist();
				}
				break;
			case 6:
				{
				State = 554;
				Match(Dynamic_cast);
				State = 555;
				Match(Less);
				State = 556;
				typeid();
				State = 557;
				Match(Greater);
				State = 558;
				Match(LeftParen);
				State = 559;
				expression(0);
				State = 560;
				Match(RightParen);
				}
				break;
			case 7:
				{
				State = 562;
				Match(Static_cast);
				State = 563;
				Match(Less);
				State = 564;
				typeid();
				State = 565;
				Match(Greater);
				State = 566;
				Match(LeftParen);
				State = 567;
				expression(0);
				State = 568;
				Match(RightParen);
				}
				break;
			case 8:
				{
				State = 570;
				Match(Reinterpret_cast);
				State = 571;
				Match(Less);
				State = 572;
				typeid();
				State = 573;
				Match(Greater);
				State = 574;
				Match(LeftParen);
				State = 575;
				expression(0);
				State = 576;
				Match(RightParen);
				}
				break;
			case 9:
				{
				State = 578;
				Match(Const_cast);
				State = 579;
				Match(Less);
				State = 580;
				typeid();
				State = 581;
				Match(Greater);
				State = 582;
				Match(LeftParen);
				State = 583;
				expression(0);
				State = 584;
				Match(RightParen);
				}
				break;
			case 10:
				{
				State = 586;
				Match(Typeid);
				State = 587;
				Match(LeftParen);
				State = 588;
				expression(0);
				State = 589;
				Match(RightParen);
				}
				break;
			case 11:
				{
				State = 591;
				Match(Typeid);
				State = 592;
				Match(LeftParen);
				State = 593;
				typeid();
				State = 594;
				Match(RightParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 638;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 636;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 598;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 599;
						Match(LeftBracket);
						State = 600;
						expression(0);
						State = 601;
						Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 603;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 604;
						Match(LeftBracket);
						State = 605;
						bracedinitlist();
						State = 606;
						Match(RightBracket);
						}
						break;
					case 3:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 608;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 609;
						Match(LeftParen);
						State = 611;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4965285389904001232L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 6991275472553596083L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 127L) != 0)) {
							{
							State = 610;
							expressionlist();
							}
						}

						State = 613;
						Match(RightParen);
						}
						break;
					case 4:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 614;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 615;
						Match(Dot);
						State = 617;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Template) {
							{
							State = 616;
							Match(Template);
							}
						}

						State = 619;
						idexpression();
						}
						break;
					case 5:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 620;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 621;
						Match(Arrow);
						State = 623;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Template) {
							{
							State = 622;
							Match(Template);
							}
						}

						State = 625;
						idexpression();
						}
						break;
					case 6:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 626;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 627;
						Match(Dot);
						State = 628;
						pseudodestructorname();
						}
						break;
					case 7:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 629;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 630;
						Match(Arrow);
						State = 631;
						pseudodestructorname();
						}
						break;
					case 8:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 632;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 633;
						Match(PlusPlus);
						}
						break;
					case 9:
						{
						_localctx = new PostfixexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixexpression);
						State = 634;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 635;
						Match(MinusMinus);
						}
						break;
					}
					} 
				}
				State = 640;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitializerlistContext initializerlist() {
			return GetRuleContext<InitializerlistContext>(0);
		}
		public ExpressionlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionlist; } }
	}

	[RuleVersion(0)]
	public ExpressionlistContext expressionlist() {
		ExpressionlistContext _localctx = new ExpressionlistContext(Context, State);
		EnterRule(_localctx, 32, RULE_expressionlist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 641;
			initializerlist(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PseudodestructornameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Doublecolon() { return GetToken(CPP14Parser.Doublecolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(CPP14Parser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecltypespecifierContext decltypespecifier() {
			return GetRuleContext<DecltypespecifierContext>(0);
		}
		public PseudodestructornameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pseudodestructorname; } }
	}

	[RuleVersion(0)]
	public PseudodestructornameContext pseudodestructorname() {
		PseudodestructornameContext _localctx = new PseudodestructornameContext(Context, State);
		EnterRule(_localctx, 34, RULE_pseudodestructorname);
		int _la;
		try {
			State = 665;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 644;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 643;
					nestednamespecifier(0);
					}
					break;
				}
				State = 646;
				typename();
				State = 647;
				Match(Doublecolon);
				State = 648;
				Match(Tilde);
				State = 649;
				typename();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 651;
				nestednamespecifier(0);
				State = 652;
				Match(Template);
				State = 653;
				simpletemplateid();
				State = 654;
				Match(Doublecolon);
				State = 655;
				Match(Tilde);
				State = 656;
				typename();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 659;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Decltype || _la==Doublecolon || _la==Identifier) {
					{
					State = 658;
					nestednamespecifier(0);
					}
				}

				State = 661;
				Match(Tilde);
				State = 662;
				typename();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 663;
				Match(Tilde);
				State = 664;
				decltypespecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixexpressionContext postfixexpression() {
			return GetRuleContext<PostfixexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(CPP14Parser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastexpressionContext castexpression() {
			return GetRuleContext<CastexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(CPP14Parser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryoperatorContext unaryoperator() {
			return GetRuleContext<UnaryoperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sizeof() { return GetToken(CPP14Parser.Sizeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryexpressionContext unaryexpression() {
			return GetRuleContext<UnaryexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeidContext typeid() {
			return GetRuleContext<TypeidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Alignof() { return GetToken(CPP14Parser.Alignof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NoexceptexpressionContext noexceptexpression() {
			return GetRuleContext<NoexceptexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewexpressionContext newexpression() {
			return GetRuleContext<NewexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteexpressionContext deleteexpression() {
			return GetRuleContext<DeleteexpressionContext>(0);
		}
		public UnaryexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryexpression; } }
	}

	[RuleVersion(0)]
	public UnaryexpressionContext unaryexpression() {
		UnaryexpressionContext _localctx = new UnaryexpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_unaryexpression);
		try {
			State = 695;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 667;
				postfixexpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 668;
				Match(PlusPlus);
				State = 669;
				castexpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 670;
				Match(MinusMinus);
				State = 671;
				castexpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 672;
				unaryoperator();
				State = 673;
				castexpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 675;
				Match(Sizeof);
				State = 676;
				unaryexpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 677;
				Match(Sizeof);
				State = 678;
				Match(LeftParen);
				State = 679;
				typeid();
				State = 680;
				Match(RightParen);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 682;
				Match(Sizeof);
				State = 683;
				Match(Ellipsis);
				State = 684;
				Match(LeftParen);
				State = 685;
				Match(Identifier);
				State = 686;
				Match(RightParen);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 687;
				Match(Alignof);
				State = 688;
				Match(LeftParen);
				State = 689;
				typeid();
				State = 690;
				Match(RightParen);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 692;
				noexceptexpression();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 693;
				newexpression();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 694;
				deleteexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryoperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(CPP14Parser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(CPP14Parser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(CPP14Parser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(CPP14Parser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(CPP14Parser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(CPP14Parser.Minus, 0); }
		public UnaryoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryoperator; } }
	}

	[RuleVersion(0)]
	public UnaryoperatorContext unaryoperator() {
		UnaryoperatorContext _localctx = new UnaryoperatorContext(Context, State);
		EnterRule(_localctx, 38, RULE_unaryoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 967L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(CPP14Parser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewtypeidContext newtypeid() {
			return GetRuleContext<NewtypeidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Doublecolon() { return GetToken(CPP14Parser.Doublecolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewplacementContext newplacement() {
			return GetRuleContext<NewplacementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewinitializerContext newinitializer() {
			return GetRuleContext<NewinitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeidContext typeid() {
			return GetRuleContext<TypeidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public NewexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newexpression; } }
	}

	[RuleVersion(0)]
	public NewexpressionContext newexpression() {
		NewexpressionContext _localctx = new NewexpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_newexpression);
		int _la;
		try {
			State = 723;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 700;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Doublecolon) {
					{
					State = 699;
					Match(Doublecolon);
					}
				}

				State = 702;
				Match(New);
				State = 704;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LeftParen) {
					{
					State = 703;
					newplacement();
					}
				}

				State = 706;
				newtypeid();
				State = 708;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					State = 707;
					newinitializer();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 711;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Doublecolon) {
					{
					State = 710;
					Match(Doublecolon);
					}
				}

				State = 713;
				Match(New);
				State = 715;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 714;
					newplacement();
					}
					break;
				}
				State = 717;
				Match(LeftParen);
				State = 718;
				typeid();
				State = 719;
				Match(RightParen);
				State = 721;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 720;
					newinitializer();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewplacementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public NewplacementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newplacement; } }
	}

	[RuleVersion(0)]
	public NewplacementContext newplacement() {
		NewplacementContext _localctx = new NewplacementContext(Context, State);
		EnterRule(_localctx, 42, RULE_newplacement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 725;
			Match(LeftParen);
			State = 726;
			expressionlist();
			State = 727;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewtypeidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypespecifierseqContext typespecifierseq() {
			return GetRuleContext<TypespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewdeclaratorContext newdeclarator() {
			return GetRuleContext<NewdeclaratorContext>(0);
		}
		public NewtypeidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newtypeid; } }
	}

	[RuleVersion(0)]
	public NewtypeidContext newtypeid() {
		NewtypeidContext _localctx = new NewtypeidContext(Context, State);
		EnterRule(_localctx, 44, RULE_newtypeid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729;
			typespecifierseq();
			State = 731;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 730;
				newdeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewdeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PtroperatorContext ptroperator() {
			return GetRuleContext<PtroperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewdeclaratorContext newdeclarator() {
			return GetRuleContext<NewdeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoptrnewdeclaratorContext noptrnewdeclarator() {
			return GetRuleContext<NoptrnewdeclaratorContext>(0);
		}
		public NewdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newdeclarator; } }
	}

	[RuleVersion(0)]
	public NewdeclaratorContext newdeclarator() {
		NewdeclaratorContext _localctx = new NewdeclaratorContext(Context, State);
		EnterRule(_localctx, 46, RULE_newdeclarator);
		try {
			State = 738;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Decltype:
			case Star:
			case And:
			case AndAnd:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 733;
				ptroperator();
				State = 735;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
				case 1:
					{
					State = 734;
					newdeclarator();
					}
					break;
				}
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 737;
				noptrnewdeclarator(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoptrnewdeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoptrnewdeclaratorContext noptrnewdeclarator() {
			return GetRuleContext<NoptrnewdeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public NoptrnewdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noptrnewdeclarator; } }
	}

	[RuleVersion(0)]
	public NoptrnewdeclaratorContext noptrnewdeclarator() {
		return noptrnewdeclarator(0);
	}

	private NoptrnewdeclaratorContext noptrnewdeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoptrnewdeclaratorContext _localctx = new NoptrnewdeclaratorContext(Context, _parentState);
		NoptrnewdeclaratorContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_noptrnewdeclarator, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 741;
			Match(LeftBracket);
			State = 742;
			expression(0);
			State = 743;
			Match(RightBracket);
			State = 745;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 744;
				attributespecifierseq(0);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 756;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NoptrnewdeclaratorContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_noptrnewdeclarator);
					State = 747;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 748;
					Match(LeftBracket);
					State = 749;
					constantexpression();
					State = 750;
					Match(RightBracket);
					State = 752;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
					case 1:
						{
						State = 751;
						attributespecifierseq(0);
						}
						break;
					}
					}
					} 
				}
				State = 758;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NewinitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public NewinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newinitializer; } }
	}

	[RuleVersion(0)]
	public NewinitializerContext newinitializer() {
		NewinitializerContext _localctx = new NewinitializerContext(Context, State);
		EnterRule(_localctx, 50, RULE_newinitializer);
		int _la;
		try {
			State = 765;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 759;
				Match(LeftParen);
				State = 761;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4965285389904001232L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 6991275472553596083L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 127L) != 0)) {
					{
					State = 760;
					expressionlist();
					}
				}

				State = 763;
				Match(RightParen);
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 764;
				bracedinitlist();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(CPP14Parser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastexpressionContext castexpression() {
			return GetRuleContext<CastexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Doublecolon() { return GetToken(CPP14Parser.Doublecolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		public DeleteexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteexpression; } }
	}

	[RuleVersion(0)]
	public DeleteexpressionContext deleteexpression() {
		DeleteexpressionContext _localctx = new DeleteexpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_deleteexpression);
		int _la;
		try {
			State = 779;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 768;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Doublecolon) {
					{
					State = 767;
					Match(Doublecolon);
					}
				}

				State = 770;
				Match(Delete);
				State = 771;
				castexpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 773;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Doublecolon) {
					{
					State = 772;
					Match(Doublecolon);
					}
				}

				State = 775;
				Match(Delete);
				State = 776;
				Match(LeftBracket);
				State = 777;
				Match(RightBracket);
				State = 778;
				castexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoexceptexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Noexcept() { return GetToken(CPP14Parser.Noexcept, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public NoexceptexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noexceptexpression; } }
	}

	[RuleVersion(0)]
	public NoexceptexpressionContext noexceptexpression() {
		NoexceptexpressionContext _localctx = new NoexceptexpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_noexceptexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 781;
			Match(Noexcept);
			State = 782;
			Match(LeftParen);
			State = 783;
			expression(0);
			State = 784;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryexpressionContext unaryexpression() {
			return GetRuleContext<UnaryexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeidContext typeid() {
			return GetRuleContext<TypeidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastexpressionContext castexpression() {
			return GetRuleContext<CastexpressionContext>(0);
		}
		public CastexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castexpression; } }
	}

	[RuleVersion(0)]
	public CastexpressionContext castexpression() {
		CastexpressionContext _localctx = new CastexpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_castexpression);
		try {
			State = 792;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 786;
				unaryexpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 787;
				Match(LeftParen);
				State = 788;
				typeid();
				State = 789;
				Match(RightParen);
				State = 790;
				castexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PmexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CastexpressionContext castexpression() {
			return GetRuleContext<CastexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PmexpressionContext pmexpression() {
			return GetRuleContext<PmexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DotStar() { return GetToken(CPP14Parser.DotStar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ArrowStar() { return GetToken(CPP14Parser.ArrowStar, 0); }
		public PmexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pmexpression; } }
	}

	[RuleVersion(0)]
	public PmexpressionContext pmexpression() {
		return pmexpression(0);
	}

	private PmexpressionContext pmexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PmexpressionContext _localctx = new PmexpressionContext(Context, _parentState);
		PmexpressionContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_pmexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 795;
			castexpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 805;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 803;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
					case 1:
						{
						_localctx = new PmexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_pmexpression);
						State = 797;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 798;
						Match(DotStar);
						State = 799;
						castexpression();
						}
						break;
					case 2:
						{
						_localctx = new PmexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_pmexpression);
						State = 800;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 801;
						Match(ArrowStar);
						State = 802;
						castexpression();
						}
						break;
					}
					} 
				}
				State = 807;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PmexpressionContext pmexpression() {
			return GetRuleContext<PmexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeexpressionContext multiplicativeexpression() {
			return GetRuleContext<MultiplicativeexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(CPP14Parser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div() { return GetToken(CPP14Parser.Div, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod() { return GetToken(CPP14Parser.Mod, 0); }
		public MultiplicativeexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeexpression; } }
	}

	[RuleVersion(0)]
	public MultiplicativeexpressionContext multiplicativeexpression() {
		return multiplicativeexpression(0);
	}

	private MultiplicativeexpressionContext multiplicativeexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeexpressionContext _localctx = new MultiplicativeexpressionContext(Context, _parentState);
		MultiplicativeexpressionContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_multiplicativeexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 809;
			pmexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 822;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 820;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeexpression);
						State = 811;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 812;
						Match(Star);
						State = 813;
						pmexpression(0);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeexpression);
						State = 814;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 815;
						Match(Div);
						State = 816;
						pmexpression(0);
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeexpression);
						State = 817;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 818;
						Match(Mod);
						State = 819;
						pmexpression(0);
						}
						break;
					}
					} 
				}
				State = 824;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeexpressionContext multiplicativeexpression() {
			return GetRuleContext<MultiplicativeexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveexpressionContext additiveexpression() {
			return GetRuleContext<AdditiveexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(CPP14Parser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(CPP14Parser.Minus, 0); }
		public AdditiveexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveexpression; } }
	}

	[RuleVersion(0)]
	public AdditiveexpressionContext additiveexpression() {
		return additiveexpression(0);
	}

	private AdditiveexpressionContext additiveexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveexpressionContext _localctx = new AdditiveexpressionContext(Context, _parentState);
		AdditiveexpressionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_additiveexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 826;
			multiplicativeexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 836;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 834;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
					case 1:
						{
						_localctx = new AdditiveexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveexpression);
						State = 828;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 829;
						Match(Plus);
						State = 830;
						multiplicativeexpression(0);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveexpression);
						State = 831;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 832;
						Match(Minus);
						State = 833;
						multiplicativeexpression(0);
						}
						break;
					}
					} 
				}
				State = 838;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ShiftexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveexpressionContext additiveexpression() {
			return GetRuleContext<AdditiveexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftexpressionContext shiftexpression() {
			return GetRuleContext<ShiftexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShift() { return GetToken(CPP14Parser.LeftShift, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RightShiftContext rightShift() {
			return GetRuleContext<RightShiftContext>(0);
		}
		public ShiftexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftexpression; } }
	}

	[RuleVersion(0)]
	public ShiftexpressionContext shiftexpression() {
		return shiftexpression(0);
	}

	private ShiftexpressionContext shiftexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ShiftexpressionContext _localctx = new ShiftexpressionContext(Context, _parentState);
		ShiftexpressionContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_shiftexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 840;
			additiveexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 851;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 849;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
					case 1:
						{
						_localctx = new ShiftexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftexpression);
						State = 842;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 843;
						Match(LeftShift);
						State = 844;
						additiveexpression(0);
						}
						break;
					case 2:
						{
						_localctx = new ShiftexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftexpression);
						State = 845;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 846;
						rightShift();
						State = 847;
						additiveexpression(0);
						}
						break;
					}
					} 
				}
				State = 853;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShiftexpressionContext shiftexpression() {
			return GetRuleContext<ShiftexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalexpressionContext relationalexpression() {
			return GetRuleContext<RelationalexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessEqual() { return GetToken(CPP14Parser.LessEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterEqual() { return GetToken(CPP14Parser.GreaterEqual, 0); }
		public RelationalexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalexpression; } }
	}

	[RuleVersion(0)]
	public RelationalexpressionContext relationalexpression() {
		return relationalexpression(0);
	}

	private RelationalexpressionContext relationalexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationalexpressionContext _localctx = new RelationalexpressionContext(Context, _parentState);
		RelationalexpressionContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_relationalexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 855;
			shiftexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 871;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 869;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
					case 1:
						{
						_localctx = new RelationalexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalexpression);
						State = 857;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 858;
						Match(Less);
						State = 859;
						shiftexpression(0);
						}
						break;
					case 2:
						{
						_localctx = new RelationalexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalexpression);
						State = 860;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 861;
						Match(Greater);
						State = 862;
						shiftexpression(0);
						}
						break;
					case 3:
						{
						_localctx = new RelationalexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalexpression);
						State = 863;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 864;
						Match(LessEqual);
						State = 865;
						shiftexpression(0);
						}
						break;
					case 4:
						{
						_localctx = new RelationalexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalexpression);
						State = 866;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 867;
						Match(GreaterEqual);
						State = 868;
						shiftexpression(0);
						}
						break;
					}
					} 
				}
				State = 873;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalexpressionContext relationalexpression() {
			return GetRuleContext<RelationalexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityexpressionContext equalityexpression() {
			return GetRuleContext<EqualityexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(CPP14Parser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual() { return GetToken(CPP14Parser.NotEqual, 0); }
		public EqualityexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityexpression; } }
	}

	[RuleVersion(0)]
	public EqualityexpressionContext equalityexpression() {
		return equalityexpression(0);
	}

	private EqualityexpressionContext equalityexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityexpressionContext _localctx = new EqualityexpressionContext(Context, _parentState);
		EqualityexpressionContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_equalityexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 875;
			relationalexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 885;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 883;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
					case 1:
						{
						_localctx = new EqualityexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityexpression);
						State = 877;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 878;
						Match(Equal);
						State = 879;
						relationalexpression(0);
						}
						break;
					case 2:
						{
						_localctx = new EqualityexpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityexpression);
						State = 880;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 881;
						Match(NotEqual);
						State = 882;
						relationalexpression(0);
						}
						break;
					}
					} 
				}
				State = 887;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityexpressionContext equalityexpression() {
			return GetRuleContext<EqualityexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndexpressionContext andexpression() {
			return GetRuleContext<AndexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		public AndexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andexpression; } }
	}

	[RuleVersion(0)]
	public AndexpressionContext andexpression() {
		return andexpression(0);
	}

	private AndexpressionContext andexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndexpressionContext _localctx = new AndexpressionContext(Context, _parentState);
		AndexpressionContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_andexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 889;
			equalityexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 896;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndexpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andexpression);
					State = 891;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 892;
					Match(And);
					State = 893;
					equalityexpression(0);
					}
					} 
				}
				State = 898;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExclusiveorexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndexpressionContext andexpression() {
			return GetRuleContext<AndexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveorexpressionContext exclusiveorexpression() {
			return GetRuleContext<ExclusiveorexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(CPP14Parser.Caret, 0); }
		public ExclusiveorexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveorexpression; } }
	}

	[RuleVersion(0)]
	public ExclusiveorexpressionContext exclusiveorexpression() {
		return exclusiveorexpression(0);
	}

	private ExclusiveorexpressionContext exclusiveorexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExclusiveorexpressionContext _localctx = new ExclusiveorexpressionContext(Context, _parentState);
		ExclusiveorexpressionContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_exclusiveorexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 900;
			andexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 907;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusiveorexpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exclusiveorexpression);
					State = 902;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 903;
					Match(Caret);
					State = 904;
					andexpression(0);
					}
					} 
				}
				State = 909;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InclusiveorexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveorexpressionContext exclusiveorexpression() {
			return GetRuleContext<ExclusiveorexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InclusiveorexpressionContext inclusiveorexpression() {
			return GetRuleContext<InclusiveorexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(CPP14Parser.Or, 0); }
		public InclusiveorexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveorexpression; } }
	}

	[RuleVersion(0)]
	public InclusiveorexpressionContext inclusiveorexpression() {
		return inclusiveorexpression(0);
	}

	private InclusiveorexpressionContext inclusiveorexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InclusiveorexpressionContext _localctx = new InclusiveorexpressionContext(Context, _parentState);
		InclusiveorexpressionContext _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_inclusiveorexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 911;
			exclusiveorexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 918;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InclusiveorexpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_inclusiveorexpression);
					State = 913;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 914;
					Match(Or);
					State = 915;
					exclusiveorexpression(0);
					}
					} 
				}
				State = 920;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalandexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InclusiveorexpressionContext inclusiveorexpression() {
			return GetRuleContext<InclusiveorexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalandexpressionContext logicalandexpression() {
			return GetRuleContext<LogicalandexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd() { return GetToken(CPP14Parser.AndAnd, 0); }
		public LogicalandexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalandexpression; } }
	}

	[RuleVersion(0)]
	public LogicalandexpressionContext logicalandexpression() {
		return logicalandexpression(0);
	}

	private LogicalandexpressionContext logicalandexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalandexpressionContext _localctx = new LogicalandexpressionContext(Context, _parentState);
		LogicalandexpressionContext _prevctx = _localctx;
		int _startState = 76;
		EnterRecursionRule(_localctx, 76, RULE_logicalandexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 922;
			inclusiveorexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 929;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalandexpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logicalandexpression);
					State = 924;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 925;
					Match(AndAnd);
					State = 926;
					inclusiveorexpression(0);
					}
					} 
				}
				State = 931;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalorexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalandexpressionContext logicalandexpression() {
			return GetRuleContext<LogicalandexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalorexpressionContext logicalorexpression() {
			return GetRuleContext<LogicalorexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrOr() { return GetToken(CPP14Parser.OrOr, 0); }
		public LogicalorexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalorexpression; } }
	}

	[RuleVersion(0)]
	public LogicalorexpressionContext logicalorexpression() {
		return logicalorexpression(0);
	}

	private LogicalorexpressionContext logicalorexpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalorexpressionContext _localctx = new LogicalorexpressionContext(Context, _parentState);
		LogicalorexpressionContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_logicalorexpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 933;
			logicalandexpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 940;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalorexpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logicalorexpression);
					State = 935;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 936;
					Match(OrOr);
					State = 937;
					logicalandexpression(0);
					}
					} 
				}
				State = 942;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalorexpressionContext logicalorexpression() {
			return GetRuleContext<LogicalorexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question() { return GetToken(CPP14Parser.Question, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentexpressionContext assignmentexpression() {
			return GetRuleContext<AssignmentexpressionContext>(0);
		}
		public ConditionalexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalexpression; } }
	}

	[RuleVersion(0)]
	public ConditionalexpressionContext conditionalexpression() {
		ConditionalexpressionContext _localctx = new ConditionalexpressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_conditionalexpression);
		try {
			State = 950;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 943;
				logicalorexpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 944;
				logicalorexpression(0);
				State = 945;
				Match(Question);
				State = 946;
				expression(0);
				State = 947;
				Match(Colon);
				State = 948;
				assignmentexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalexpressionContext conditionalexpression() {
			return GetRuleContext<ConditionalexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalorexpressionContext logicalorexpression() {
			return GetRuleContext<LogicalorexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentoperatorContext assignmentoperator() {
			return GetRuleContext<AssignmentoperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerclauseContext initializerclause() {
			return GetRuleContext<InitializerclauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowexpressionContext throwexpression() {
			return GetRuleContext<ThrowexpressionContext>(0);
		}
		public AssignmentexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentexpression; } }
	}

	[RuleVersion(0)]
	public AssignmentexpressionContext assignmentexpression() {
		AssignmentexpressionContext _localctx = new AssignmentexpressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_assignmentexpression);
		try {
			State = 958;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 952;
				conditionalexpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 953;
				logicalorexpression(0);
				State = 954;
				assignmentoperator();
				State = 955;
				initializerclause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 957;
				throwexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentoperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StarAssign() { return GetToken(CPP14Parser.StarAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivAssign() { return GetToken(CPP14Parser.DivAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModAssign() { return GetToken(CPP14Parser.ModAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(CPP14Parser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(CPP14Parser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RightShiftAssignContext rightShiftAssign() {
			return GetRuleContext<RightShiftAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftAssign() { return GetToken(CPP14Parser.LeftShiftAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAssign() { return GetToken(CPP14Parser.AndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XorAssign() { return GetToken(CPP14Parser.XorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrAssign() { return GetToken(CPP14Parser.OrAssign, 0); }
		public AssignmentoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentoperator; } }
	}

	[RuleVersion(0)]
	public AssignmentoperatorContext assignmentoperator() {
		AssignmentoperatorContext _localctx = new AssignmentoperatorContext(Context, State);
		EnterRule(_localctx, 84, RULE_assignmentoperator);
		try {
			State = 971;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Assign:
				EnterOuterAlt(_localctx, 1);
				{
				State = 960;
				Match(Assign);
				}
				break;
			case StarAssign:
				EnterOuterAlt(_localctx, 2);
				{
				State = 961;
				Match(StarAssign);
				}
				break;
			case DivAssign:
				EnterOuterAlt(_localctx, 3);
				{
				State = 962;
				Match(DivAssign);
				}
				break;
			case ModAssign:
				EnterOuterAlt(_localctx, 4);
				{
				State = 963;
				Match(ModAssign);
				}
				break;
			case PlusAssign:
				EnterOuterAlt(_localctx, 5);
				{
				State = 964;
				Match(PlusAssign);
				}
				break;
			case MinusAssign:
				EnterOuterAlt(_localctx, 6);
				{
				State = 965;
				Match(MinusAssign);
				}
				break;
			case Greater:
				EnterOuterAlt(_localctx, 7);
				{
				State = 966;
				rightShiftAssign();
				}
				break;
			case LeftShiftAssign:
				EnterOuterAlt(_localctx, 8);
				{
				State = 967;
				Match(LeftShiftAssign);
				}
				break;
			case AndAssign:
				EnterOuterAlt(_localctx, 9);
				{
				State = 968;
				Match(AndAssign);
				}
				break;
			case XorAssign:
				EnterOuterAlt(_localctx, 10);
				{
				State = 969;
				Match(XorAssign);
				}
				break;
			case OrAssign:
				EnterOuterAlt(_localctx, 11);
				{
				State = 970;
				Match(OrAssign);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentexpressionContext assignmentexpression() {
			return GetRuleContext<AssignmentexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 86;
		EnterRecursionRule(_localctx, 86, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 974;
			assignmentexpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 981;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 976;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 977;
					Match(Comma);
					State = 978;
					assignmentexpression();
					}
					} 
				}
				State = 983;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConstantexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalexpressionContext conditionalexpression() {
			return GetRuleContext<ConditionalexpressionContext>(0);
		}
		public ConstantexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantexpression; } }
	}

	[RuleVersion(0)]
	public ConstantexpressionContext constantexpression() {
		ConstantexpressionContext _localctx = new ConstantexpressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_constantexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 984;
			conditionalexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabeledstatementContext labeledstatement() {
			return GetRuleContext<LabeledstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionstatementContext expressionstatement() {
			return GetRuleContext<ExpressionstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionstatementContext selectionstatement() {
			return GetRuleContext<SelectionstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationstatementContext iterationstatement() {
			return GetRuleContext<IterationstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JumpstatementContext jumpstatement() {
			return GetRuleContext<JumpstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationstatementContext declarationstatement() {
			return GetRuleContext<DeclarationstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryblockContext tryblock() {
			return GetRuleContext<TryblockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_statement);
		int _la;
		try {
			State = 1012;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 986;
				labeledstatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 988;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
				case 1:
					{
					State = 987;
					attributespecifierseq(0);
					}
					break;
				}
				State = 990;
				expressionstatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 992;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 991;
					attributespecifierseq(0);
					}
				}

				State = 994;
				compoundstatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 996;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 995;
					attributespecifierseq(0);
					}
				}

				State = 998;
				selectionstatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1000;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 999;
					attributespecifierseq(0);
					}
				}

				State = 1002;
				iterationstatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1004;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1003;
					attributespecifierseq(0);
					}
				}

				State = 1006;
				jumpstatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1007;
				declarationstatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1009;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1008;
					attributespecifierseq(0);
					}
				}

				State = 1011;
				tryblock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(CPP14Parser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(CPP14Parser.Default, 0); }
		public LabeledstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledstatement; } }
	}

	[RuleVersion(0)]
	public LabeledstatementContext labeledstatement() {
		LabeledstatementContext _localctx = new LabeledstatementContext(Context, State);
		EnterRule(_localctx, 92, RULE_labeledstatement);
		int _la;
		try {
			State = 1034;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1015;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1014;
					attributespecifierseq(0);
					}
				}

				State = 1017;
				Match(Identifier);
				State = 1018;
				Match(Colon);
				State = 1019;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1021;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1020;
					attributespecifierseq(0);
					}
				}

				State = 1023;
				Match(Case);
				State = 1024;
				constantexpression();
				State = 1025;
				Match(Colon);
				State = 1026;
				statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1029;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1028;
					attributespecifierseq(0);
					}
				}

				State = 1031;
				Match(Default);
				State = 1032;
				Match(Colon);
				State = 1033;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionstatement; } }
	}

	[RuleVersion(0)]
	public ExpressionstatementContext expressionstatement() {
		ExpressionstatementContext _localctx = new ExpressionstatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_expressionstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1037;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4965285389904001232L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 6991275472553333939L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 127L) != 0)) {
				{
				State = 1036;
				expression(0);
				}
			}

			State = 1039;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementseqContext statementseq() {
			return GetRuleContext<StatementseqContext>(0);
		}
		public CompoundstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundstatement; } }
	}

	[RuleVersion(0)]
	public CompoundstatementContext compoundstatement() {
		CompoundstatementContext _localctx = new CompoundstatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_compoundstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1041;
			Match(LeftBrace);
			State = 1043;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2306898542825833480L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8288452902724665343L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 127L) != 0)) {
				{
				State = 1042;
				statementseq(0);
				}
			}

			State = 1045;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementseqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementseqContext statementseq() {
			return GetRuleContext<StatementseqContext>(0);
		}
		public StatementseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementseq; } }
	}

	[RuleVersion(0)]
	public StatementseqContext statementseq() {
		return statementseq(0);
	}

	private StatementseqContext statementseq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StatementseqContext _localctx = new StatementseqContext(Context, _parentState);
		StatementseqContext _prevctx = _localctx;
		int _startState = 98;
		EnterRecursionRule(_localctx, 98, RULE_statementseq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1048;
			statement();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1054;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StatementseqContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_statementseq);
					State = 1050;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1051;
					statement();
					}
					} 
				}
				State = 1056;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SelectionstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(CPP14Parser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(CPP14Parser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(CPP14Parser.Switch, 0); }
		public SelectionstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionstatement; } }
	}

	[RuleVersion(0)]
	public SelectionstatementContext selectionstatement() {
		SelectionstatementContext _localctx = new SelectionstatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_selectionstatement);
		try {
			State = 1077;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1057;
				Match(If);
				State = 1058;
				Match(LeftParen);
				State = 1059;
				condition();
				State = 1060;
				Match(RightParen);
				State = 1061;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1063;
				Match(If);
				State = 1064;
				Match(LeftParen);
				State = 1065;
				condition();
				State = 1066;
				Match(RightParen);
				State = 1067;
				statement();
				State = 1068;
				Match(Else);
				State = 1069;
				statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1071;
				Match(Switch);
				State = 1072;
				Match(LeftParen);
				State = 1073;
				condition();
				State = 1074;
				Match(RightParen);
				State = 1075;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerclauseContext initializerclause() {
			return GetRuleContext<InitializerclauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 102, RULE_condition);
		int _la;
		try {
			State = 1095;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1079;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1081;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1080;
					attributespecifierseq(0);
					}
				}

				State = 1083;
				declspecifierseq();
				State = 1084;
				declarator();
				State = 1085;
				Match(Assign);
				State = 1086;
				initializerclause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1089;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1088;
					attributespecifierseq(0);
					}
				}

				State = 1091;
				declspecifierseq();
				State = 1092;
				declarator();
				State = 1093;
				bracedinitlist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(CPP14Parser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(CPP14Parser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(CPP14Parser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForinitstatementContext forinitstatement() {
			return GetRuleContext<ForinitstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForrangedeclarationContext forrangedeclaration() {
			return GetRuleContext<ForrangedeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForrangeinitializerContext forrangeinitializer() {
			return GetRuleContext<ForrangeinitializerContext>(0);
		}
		public IterationstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationstatement; } }
	}

	[RuleVersion(0)]
	public IterationstatementContext iterationstatement() {
		IterationstatementContext _localctx = new IterationstatementContext(Context, State);
		EnterRule(_localctx, 104, RULE_iterationstatement);
		int _la;
		try {
			State = 1132;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1097;
				Match(While);
				State = 1098;
				Match(LeftParen);
				State = 1099;
				condition();
				State = 1100;
				Match(RightParen);
				State = 1101;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1103;
				Match(Do);
				State = 1104;
				statement();
				State = 1105;
				Match(While);
				State = 1106;
				Match(LeftParen);
				State = 1107;
				expression(0);
				State = 1108;
				Match(RightParen);
				State = 1109;
				Match(Semi);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1111;
				Match(For);
				State = 1112;
				Match(LeftParen);
				State = 1113;
				forinitstatement();
				State = 1115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3608441145833817896L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 6991275472553336571L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 127L) != 0)) {
					{
					State = 1114;
					condition();
					}
				}

				State = 1117;
				Match(Semi);
				State = 1119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4965285389904001232L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 6991275472553333939L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 127L) != 0)) {
					{
					State = 1118;
					expression(0);
					}
				}

				State = 1121;
				Match(RightParen);
				State = 1122;
				statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1124;
				Match(For);
				State = 1125;
				Match(LeftParen);
				State = 1126;
				forrangedeclaration();
				State = 1127;
				Match(Colon);
				State = 1128;
				forrangeinitializer();
				State = 1129;
				Match(RightParen);
				State = 1130;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForinitstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionstatementContext expressionstatement() {
			return GetRuleContext<ExpressionstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpledeclarationContext simpledeclaration() {
			return GetRuleContext<SimpledeclarationContext>(0);
		}
		public ForinitstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forinitstatement; } }
	}

	[RuleVersion(0)]
	public ForinitstatementContext forinitstatement() {
		ForinitstatementContext _localctx = new ForinitstatementContext(Context, State);
		EnterRule(_localctx, 106, RULE_forinitstatement);
		try {
			State = 1136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1134;
				expressionstatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1135;
				simpledeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForrangedeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public ForrangedeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forrangedeclaration; } }
	}

	[RuleVersion(0)]
	public ForrangedeclarationContext forrangedeclaration() {
		ForrangedeclarationContext _localctx = new ForrangedeclarationContext(Context, State);
		EnterRule(_localctx, 108, RULE_forrangedeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1138;
				attributespecifierseq(0);
				}
			}

			State = 1141;
			declspecifierseq();
			State = 1142;
			declarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForrangeinitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public ForrangeinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forrangeinitializer; } }
	}

	[RuleVersion(0)]
	public ForrangeinitializerContext forrangeinitializer() {
		ForrangeinitializerContext _localctx = new ForrangeinitializerContext(Context, State);
		EnterRule(_localctx, 110, RULE_forrangeinitializer);
		try {
			State = 1146;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Alignof:
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Const_cast:
			case Decltype:
			case Delete:
			case Double:
			case Dynamic_cast:
			case False:
			case Float:
			case Int:
			case Long:
			case New:
			case Noexcept:
			case Nullptr:
			case Operator:
			case Reinterpret_cast:
			case Short:
			case Signed:
			case Sizeof:
			case Static_cast:
			case This:
			case Throw:
			case True:
			case Typeid:
			case Typename:
			case Unsigned:
			case Void:
			case Wchar:
			case LeftParen:
			case LeftBracket:
			case Plus:
			case Minus:
			case Star:
			case And:
			case Or:
			case Tilde:
			case Not:
			case PlusPlus:
			case MinusMinus:
			case Doublecolon:
			case Identifier:
			case Integerliteral:
			case Characterliteral:
			case Floatingliteral:
			case Stringliteral:
			case Userdefinedintegerliteral:
			case Userdefinedfloatingliteral:
			case Userdefinedstringliteral:
			case Userdefinedcharacterliteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1144;
				expression(0);
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1145;
				bracedinitlist();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(CPP14Parser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(CPP14Parser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(CPP14Parser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Goto() { return GetToken(CPP14Parser.Goto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public JumpstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpstatement; } }
	}

	[RuleVersion(0)]
	public JumpstatementContext jumpstatement() {
		JumpstatementContext _localctx = new JumpstatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_jumpstatement);
		int _la;
		try {
			State = 1164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1148;
				Match(Break);
				State = 1149;
				Match(Semi);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1150;
				Match(Continue);
				State = 1151;
				Match(Semi);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1152;
				Match(Return);
				State = 1154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4965285389904001232L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 6991275472553333939L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 127L) != 0)) {
					{
					State = 1153;
					expression(0);
					}
				}

				State = 1156;
				Match(Semi);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1157;
				Match(Return);
				State = 1158;
				bracedinitlist();
				State = 1159;
				Match(Semi);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1161;
				Match(Goto);
				State = 1162;
				Match(Identifier);
				State = 1163;
				Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockdeclarationContext blockdeclaration() {
			return GetRuleContext<BlockdeclarationContext>(0);
		}
		public DeclarationstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationstatement; } }
	}

	[RuleVersion(0)]
	public DeclarationstatementContext declarationstatement() {
		DeclarationstatementContext _localctx = new DeclarationstatementContext(Context, State);
		EnterRule(_localctx, 114, RULE_declarationstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1166;
			blockdeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationseqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationseqContext declarationseq() {
			return GetRuleContext<DeclarationseqContext>(0);
		}
		public DeclarationseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationseq; } }
	}

	[RuleVersion(0)]
	public DeclarationseqContext declarationseq() {
		return declarationseq(0);
	}

	private DeclarationseqContext declarationseq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DeclarationseqContext _localctx = new DeclarationseqContext(Context, _parentState);
		DeclarationseqContext _prevctx = _localctx;
		int _startState = 116;
		EnterRecursionRule(_localctx, 116, RULE_declarationseq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1169;
			declaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1175;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DeclarationseqContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_declarationseq);
					State = 1171;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1172;
					declaration();
					}
					} 
				}
				State = 1177;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,100,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockdeclarationContext blockdeclaration() {
			return GetRuleContext<BlockdeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctiondefinitionContext functiondefinition() {
			return GetRuleContext<FunctiondefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplatedeclarationContext templatedeclaration() {
			return GetRuleContext<TemplatedeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitinstantiationContext explicitinstantiation() {
			return GetRuleContext<ExplicitinstantiationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitspecializationContext explicitspecialization() {
			return GetRuleContext<ExplicitspecializationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinkagespecificationContext linkagespecification() {
			return GetRuleContext<LinkagespecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedefinitionContext namespacedefinition() {
			return GetRuleContext<NamespacedefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptydeclarationContext emptydeclaration() {
			return GetRuleContext<EmptydeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributedeclarationContext attributedeclaration() {
			return GetRuleContext<AttributedeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 118, RULE_declaration);
		try {
			State = 1187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1178;
				blockdeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1179;
				functiondefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1180;
				templatedeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1181;
				explicitinstantiation();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1182;
				explicitspecialization();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1183;
				linkagespecification();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1184;
				namespacedefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1185;
				emptydeclaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1186;
				attributedeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockdeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpledeclarationContext simpledeclaration() {
			return GetRuleContext<SimpledeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsmdefinitionContext asmdefinition() {
			return GetRuleContext<AsmdefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespacealiasdefinitionContext namespacealiasdefinition() {
			return GetRuleContext<NamespacealiasdefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingdeclarationContext usingdeclaration() {
			return GetRuleContext<UsingdeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingdirectiveContext usingdirective() {
			return GetRuleContext<UsingdirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Static_assertdeclarationContext static_assertdeclaration() {
			return GetRuleContext<Static_assertdeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasdeclarationContext aliasdeclaration() {
			return GetRuleContext<AliasdeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpaqueenumdeclarationContext opaqueenumdeclaration() {
			return GetRuleContext<OpaqueenumdeclarationContext>(0);
		}
		public BlockdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockdeclaration; } }
	}

	[RuleVersion(0)]
	public BlockdeclarationContext blockdeclaration() {
		BlockdeclarationContext _localctx = new BlockdeclarationContext(Context, State);
		EnterRule(_localctx, 120, RULE_blockdeclaration);
		try {
			State = 1197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1189;
				simpledeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1190;
				asmdefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1191;
				namespacealiasdefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1192;
				usingdeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1193;
				usingdirective();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1194;
				static_assertdeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1195;
				aliasdeclaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1196;
				opaqueenumdeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasdeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Using() { return GetToken(CPP14Parser.Using, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeidContext typeid() {
			return GetRuleContext<TypeidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public AliasdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasdeclaration; } }
	}

	[RuleVersion(0)]
	public AliasdeclarationContext aliasdeclaration() {
		AliasdeclarationContext _localctx = new AliasdeclarationContext(Context, State);
		EnterRule(_localctx, 122, RULE_aliasdeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1199;
			Match(Using);
			State = 1200;
			Match(Identifier);
			State = 1202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1201;
				attributespecifierseq(0);
				}
			}

			State = 1204;
			Match(Assign);
			State = 1205;
			typeid();
			State = 1206;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpledeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitdeclaratorlistContext initdeclaratorlist() {
			return GetRuleContext<InitdeclaratorlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public SimpledeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpledeclaration; } }
	}

	[RuleVersion(0)]
	public SimpledeclarationContext simpledeclaration() {
		SimpledeclarationContext _localctx = new SimpledeclarationContext(Context, State);
		EnterRule(_localctx, 124, RULE_simpledeclaration);
		int _la;
		try {
			State = 1222;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Constexpr:
			case Decltype:
			case Double:
			case Enum:
			case Explicit:
			case Extern:
			case Float:
			case Friend:
			case Inline:
			case Int:
			case Long:
			case Mutable:
			case Operator:
			case Register:
			case Short:
			case Signed:
			case Static:
			case Struct:
			case Thread_local:
			case Typedef:
			case Typename:
			case Union:
			case Unsigned:
			case Virtual:
			case Void:
			case Volatile:
			case Wchar:
			case LeftParen:
			case Star:
			case And:
			case Tilde:
			case AndAnd:
			case Doublecolon:
			case Semi:
			case Ellipsis:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1209;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
				case 1:
					{
					State = 1208;
					declspecifierseq();
					}
					break;
				}
				State = 1212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Decltype || _la==Operator || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 215512868999425L) != 0)) {
					{
					State = 1211;
					initdeclaratorlist(0);
					}
				}

				State = 1214;
				Match(Semi);
				}
				break;
			case Alignas:
			case LeftBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1215;
				attributespecifierseq(0);
				State = 1217;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
				case 1:
					{
					State = 1216;
					declspecifierseq();
					}
					break;
				}
				State = 1219;
				initdeclaratorlist(0);
				State = 1220;
				Match(Semi);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Static_assertdeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static_assert() { return GetToken(CPP14Parser.Static_assert, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Stringliteral() { return GetToken(CPP14Parser.Stringliteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public Static_assertdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_static_assertdeclaration; } }
	}

	[RuleVersion(0)]
	public Static_assertdeclarationContext static_assertdeclaration() {
		Static_assertdeclarationContext _localctx = new Static_assertdeclarationContext(Context, State);
		EnterRule(_localctx, 126, RULE_static_assertdeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1224;
			Match(Static_assert);
			State = 1225;
			Match(LeftParen);
			State = 1226;
			constantexpression();
			State = 1227;
			Match(Comma);
			State = 1228;
			Match(Stringliteral);
			State = 1229;
			Match(RightParen);
			State = 1230;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptydeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public EmptydeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptydeclaration; } }
	}

	[RuleVersion(0)]
	public EmptydeclarationContext emptydeclaration() {
		EmptydeclarationContext _localctx = new EmptydeclarationContext(Context, State);
		EnterRule(_localctx, 128, RULE_emptydeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1232;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributedeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public AttributedeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributedeclaration; } }
	}

	[RuleVersion(0)]
	public AttributedeclarationContext attributedeclaration() {
		AttributedeclarationContext _localctx = new AttributedeclarationContext(Context, State);
		EnterRule(_localctx, 130, RULE_attributedeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1234;
			attributespecifierseq(0);
			State = 1235;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclspecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StorageclassspecifierContext storageclassspecifier() {
			return GetRuleContext<StorageclassspecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypespecifierContext typespecifier() {
			return GetRuleContext<TypespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionspecifierContext functionspecifier() {
			return GetRuleContext<FunctionspecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Friend() { return GetToken(CPP14Parser.Friend, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typedef() { return GetToken(CPP14Parser.Typedef, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constexpr() { return GetToken(CPP14Parser.Constexpr, 0); }
		public DeclspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declspecifier; } }
	}

	[RuleVersion(0)]
	public DeclspecifierContext declspecifier() {
		DeclspecifierContext _localctx = new DeclspecifierContext(Context, State);
		EnterRule(_localctx, 132, RULE_declspecifier);
		try {
			State = 1243;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Extern:
			case Mutable:
			case Register:
			case Static:
			case Thread_local:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1237;
				storageclassspecifier();
				}
				break;
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Decltype:
			case Double:
			case Enum:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Struct:
			case Typename:
			case Union:
			case Unsigned:
			case Void:
			case Volatile:
			case Wchar:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1238;
				typespecifier();
				}
				break;
			case Explicit:
			case Inline:
			case Virtual:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1239;
				functionspecifier();
				}
				break;
			case Friend:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1240;
				Match(Friend);
				}
				break;
			case Typedef:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1241;
				Match(Typedef);
				}
				break;
			case Constexpr:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1242;
				Match(Constexpr);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclspecifierseqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclspecifierContext declspecifier() {
			return GetRuleContext<DeclspecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		public DeclspecifierseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declspecifierseq; } }
	}

	[RuleVersion(0)]
	public DeclspecifierseqContext declspecifierseq() {
		DeclspecifierseqContext _localctx = new DeclspecifierseqContext(Context, State);
		EnterRule(_localctx, 134, RULE_declspecifierseq);
		try {
			State = 1252;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1245;
				declspecifier();
				State = 1247;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
				case 1:
					{
					State = 1246;
					attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1249;
				declspecifier();
				State = 1250;
				declspecifierseq();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorageclassspecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Register() { return GetToken(CPP14Parser.Register, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(CPP14Parser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Thread_local() { return GetToken(CPP14Parser.Thread_local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extern() { return GetToken(CPP14Parser.Extern, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mutable() { return GetToken(CPP14Parser.Mutable, 0); }
		public StorageclassspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storageclassspecifier; } }
	}

	[RuleVersion(0)]
	public StorageclassspecifierContext storageclassspecifier() {
		StorageclassspecifierContext _localctx = new StorageclassspecifierContext(Context, State);
		EnterRule(_localctx, 136, RULE_storageclassspecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1254;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -9150187442861506560L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionspecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inline() { return GetToken(CPP14Parser.Inline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Virtual() { return GetToken(CPP14Parser.Virtual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Explicit() { return GetToken(CPP14Parser.Explicit, 0); }
		public FunctionspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionspecifier; } }
	}

	[RuleVersion(0)]
	public FunctionspecifierContext functionspecifier() {
		FunctionspecifierContext _localctx = new FunctionspecifierContext(Context, State);
		EnterRule(_localctx, 138, RULE_functionspecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1256;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 27)) & ~0x3f) == 0 && ((1L << (_la - 27)) & 70368744178689L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public TypedefnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefname; } }
	}

	[RuleVersion(0)]
	public TypedefnameContext typedefname() {
		TypedefnameContext _localctx = new TypedefnameContext(Context, State);
		EnterRule(_localctx, 140, RULE_typedefname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1258;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypespecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TrailingtypespecifierContext trailingtypespecifier() {
			return GetRuleContext<TrailingtypespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassspecifierContext classspecifier() {
			return GetRuleContext<ClassspecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumspecifierContext enumspecifier() {
			return GetRuleContext<EnumspecifierContext>(0);
		}
		public TypespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typespecifier; } }
	}

	[RuleVersion(0)]
	public TypespecifierContext typespecifier() {
		TypespecifierContext _localctx = new TypespecifierContext(Context, State);
		EnterRule(_localctx, 142, RULE_typespecifier);
		try {
			State = 1263;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1260;
				trailingtypespecifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1261;
				classspecifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1262;
				enumspecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrailingtypespecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpletypespecifierContext simpletypespecifier() {
			return GetRuleContext<SimpletypespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElaboratedtypespecifierContext elaboratedtypespecifier() {
			return GetRuleContext<ElaboratedtypespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenamespecifierContext typenamespecifier() {
			return GetRuleContext<TypenamespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CvqualifierContext cvqualifier() {
			return GetRuleContext<CvqualifierContext>(0);
		}
		public TrailingtypespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trailingtypespecifier; } }
	}

	[RuleVersion(0)]
	public TrailingtypespecifierContext trailingtypespecifier() {
		TrailingtypespecifierContext _localctx = new TrailingtypespecifierContext(Context, State);
		EnterRule(_localctx, 144, RULE_trailingtypespecifier);
		try {
			State = 1269;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Decltype:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Unsigned:
			case Void:
			case Wchar:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1265;
				simpletypespecifier();
				}
				break;
			case Class:
			case Enum:
			case Struct:
			case Union:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1266;
				elaboratedtypespecifier();
				}
				break;
			case Typename:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1267;
				typenamespecifier();
				}
				break;
			case Const:
			case Volatile:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1268;
				cvqualifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypespecifierseqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypespecifierContext typespecifier() {
			return GetRuleContext<TypespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypespecifierseqContext typespecifierseq() {
			return GetRuleContext<TypespecifierseqContext>(0);
		}
		public TypespecifierseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typespecifierseq; } }
	}

	[RuleVersion(0)]
	public TypespecifierseqContext typespecifierseq() {
		TypespecifierseqContext _localctx = new TypespecifierseqContext(Context, State);
		EnterRule(_localctx, 146, RULE_typespecifierseq);
		try {
			State = 1278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1271;
				typespecifier();
				State = 1273;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
				case 1:
					{
					State = 1272;
					attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1275;
				typespecifier();
				State = 1276;
				typespecifierseq();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrailingtypespecifierseqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TrailingtypespecifierContext trailingtypespecifier() {
			return GetRuleContext<TrailingtypespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrailingtypespecifierseqContext trailingtypespecifierseq() {
			return GetRuleContext<TrailingtypespecifierseqContext>(0);
		}
		public TrailingtypespecifierseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trailingtypespecifierseq; } }
	}

	[RuleVersion(0)]
	public TrailingtypespecifierseqContext trailingtypespecifierseq() {
		TrailingtypespecifierseqContext _localctx = new TrailingtypespecifierseqContext(Context, State);
		EnterRule(_localctx, 148, RULE_trailingtypespecifierseq);
		try {
			State = 1287;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1280;
				trailingtypespecifier();
				State = 1282;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
				case 1:
					{
					State = 1281;
					attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1284;
				trailingtypespecifier();
				State = 1285;
				trailingtypespecifierseq();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpletypespecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(CPP14Parser.Char, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char16() { return GetToken(CPP14Parser.Char16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char32() { return GetToken(CPP14Parser.Char32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Wchar() { return GetToken(CPP14Parser.Wchar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(CPP14Parser.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Short() { return GetToken(CPP14Parser.Short, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CPP14Parser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long() { return GetToken(CPP14Parser.Long, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(CPP14Parser.Signed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(CPP14Parser.Unsigned, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float() { return GetToken(CPP14Parser.Float, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double() { return GetToken(CPP14Parser.Double, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(CPP14Parser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Auto() { return GetToken(CPP14Parser.Auto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecltypespecifierContext decltypespecifier() {
			return GetRuleContext<DecltypespecifierContext>(0);
		}
		public SimpletypespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpletypespecifier; } }
	}

	[RuleVersion(0)]
	public SimpletypespecifierContext simpletypespecifier() {
		SimpletypespecifierContext _localctx = new SimpletypespecifierContext(Context, State);
		EnterRule(_localctx, 150, RULE_simpletypespecifier);
		try {
			State = 1312;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1290;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
				case 1:
					{
					State = 1289;
					nestednamespecifier(0);
					}
					break;
				}
				State = 1292;
				typename();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1293;
				nestednamespecifier(0);
				State = 1294;
				Match(Template);
				State = 1295;
				simpletemplateid();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1297;
				Match(Char);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1298;
				Match(Char16);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1299;
				Match(Char32);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1300;
				Match(Wchar);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1301;
				Match(Bool);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1302;
				Match(Short);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1303;
				Match(Int);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1304;
				Match(Long);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1305;
				Match(Signed);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1306;
				Match(Unsigned);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1307;
				Match(Float);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1308;
				Match(Double);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1309;
				Match(Void);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1310;
				Match(Auto);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1311;
				decltypespecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassnameContext classname() {
			return GetRuleContext<ClassnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumnameContext enumname() {
			return GetRuleContext<EnumnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedefnameContext typedefname() {
			return GetRuleContext<TypedefnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		public TypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typename; } }
	}

	[RuleVersion(0)]
	public TypenameContext typename() {
		TypenameContext _localctx = new TypenameContext(Context, State);
		EnterRule(_localctx, 152, RULE_typename);
		try {
			State = 1318;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1314;
				classname();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1315;
				enumname();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1316;
				typedefname();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1317;
				simpletemplateid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecltypespecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Decltype() { return GetToken(CPP14Parser.Decltype, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Auto() { return GetToken(CPP14Parser.Auto, 0); }
		public DecltypespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decltypespecifier; } }
	}

	[RuleVersion(0)]
	public DecltypespecifierContext decltypespecifier() {
		DecltypespecifierContext _localctx = new DecltypespecifierContext(Context, State);
		EnterRule(_localctx, 154, RULE_decltypespecifier);
		try {
			State = 1329;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1320;
				Match(Decltype);
				State = 1321;
				Match(LeftParen);
				State = 1322;
				expression(0);
				State = 1323;
				Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1325;
				Match(Decltype);
				State = 1326;
				Match(LeftParen);
				State = 1327;
				Match(Auto);
				State = 1328;
				Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElaboratedtypespecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClasskeyContext classkey() {
			return GetRuleContext<ClasskeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(CPP14Parser.Enum, 0); }
		public ElaboratedtypespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elaboratedtypespecifier; } }
	}

	[RuleVersion(0)]
	public ElaboratedtypespecifierContext elaboratedtypespecifier() {
		ElaboratedtypespecifierContext _localctx = new ElaboratedtypespecifierContext(Context, State);
		EnterRule(_localctx, 156, RULE_elaboratedtypespecifier);
		int _la;
		try {
			State = 1355;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1331;
				classkey();
				State = 1333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1332;
					attributespecifierseq(0);
					}
				}

				State = 1336;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
				case 1:
					{
					State = 1335;
					nestednamespecifier(0);
					}
					break;
				}
				State = 1338;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1340;
				classkey();
				State = 1341;
				simpletemplateid();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1343;
				classkey();
				State = 1344;
				nestednamespecifier(0);
				State = 1346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Template) {
					{
					State = 1345;
					Match(Template);
					}
				}

				State = 1348;
				simpletemplateid();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1350;
				Match(Enum);
				State = 1352;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
				case 1:
					{
					State = 1351;
					nestednamespecifier(0);
					}
					break;
				}
				State = 1354;
				Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public EnumnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumname; } }
	}

	[RuleVersion(0)]
	public EnumnameContext enumname() {
		EnumnameContext _localctx = new EnumnameContext(Context, State);
		EnterRule(_localctx, 158, RULE_enumname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1357;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumspecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumheadContext enumhead() {
			return GetRuleContext<EnumheadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorlistContext enumeratorlist() {
			return GetRuleContext<EnumeratorlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public EnumspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumspecifier; } }
	}

	[RuleVersion(0)]
	public EnumspecifierContext enumspecifier() {
		EnumspecifierContext _localctx = new EnumspecifierContext(Context, State);
		EnterRule(_localctx, 160, RULE_enumspecifier);
		int _la;
		try {
			State = 1372;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1359;
				enumhead();
				State = 1360;
				Match(LeftBrace);
				State = 1362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 1361;
					enumeratorlist(0);
					}
				}

				State = 1364;
				Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1366;
				enumhead();
				State = 1367;
				Match(LeftBrace);
				State = 1368;
				enumeratorlist(0);
				State = 1369;
				Match(Comma);
				State = 1370;
				Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumheadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumkeyContext enumkey() {
			return GetRuleContext<EnumkeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumbaseContext enumbase() {
			return GetRuleContext<EnumbaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public EnumheadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumhead; } }
	}

	[RuleVersion(0)]
	public EnumheadContext enumhead() {
		EnumheadContext _localctx = new EnumheadContext(Context, State);
		EnterRule(_localctx, 162, RULE_enumhead);
		int _la;
		try {
			State = 1393;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1374;
				enumkey();
				State = 1376;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1375;
					attributespecifierseq(0);
					}
				}

				State = 1379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 1378;
					Match(Identifier);
					}
				}

				State = 1382;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1381;
					enumbase();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1384;
				enumkey();
				State = 1386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1385;
					attributespecifierseq(0);
					}
				}

				State = 1388;
				nestednamespecifier(0);
				State = 1389;
				Match(Identifier);
				State = 1391;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1390;
					enumbase();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpaqueenumdeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumkeyContext enumkey() {
			return GetRuleContext<EnumkeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumbaseContext enumbase() {
			return GetRuleContext<EnumbaseContext>(0);
		}
		public OpaqueenumdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opaqueenumdeclaration; } }
	}

	[RuleVersion(0)]
	public OpaqueenumdeclarationContext opaqueenumdeclaration() {
		OpaqueenumdeclarationContext _localctx = new OpaqueenumdeclarationContext(Context, State);
		EnterRule(_localctx, 164, RULE_opaqueenumdeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1395;
			enumkey();
			State = 1397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1396;
				attributespecifierseq(0);
				}
			}

			State = 1399;
			Match(Identifier);
			State = 1401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1400;
				enumbase();
				}
			}

			State = 1403;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumkeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(CPP14Parser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(CPP14Parser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Struct() { return GetToken(CPP14Parser.Struct, 0); }
		public EnumkeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumkey; } }
	}

	[RuleVersion(0)]
	public EnumkeyContext enumkey() {
		EnumkeyContext _localctx = new EnumkeyContext(Context, State);
		EnterRule(_localctx, 166, RULE_enumkey);
		try {
			State = 1410;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1405;
				Match(Enum);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1406;
				Match(Enum);
				State = 1407;
				Match(Class);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1408;
				Match(Enum);
				State = 1409;
				Match(Struct);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumbaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypespecifierseqContext typespecifierseq() {
			return GetRuleContext<TypespecifierseqContext>(0);
		}
		public EnumbaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumbase; } }
	}

	[RuleVersion(0)]
	public EnumbaseContext enumbase() {
		EnumbaseContext _localctx = new EnumbaseContext(Context, State);
		EnterRule(_localctx, 168, RULE_enumbase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1412;
			Match(Colon);
			State = 1413;
			typespecifierseq();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratordefinitionContext enumeratordefinition() {
			return GetRuleContext<EnumeratordefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorlistContext enumeratorlist() {
			return GetRuleContext<EnumeratorlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public EnumeratorlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeratorlist; } }
	}

	[RuleVersion(0)]
	public EnumeratorlistContext enumeratorlist() {
		return enumeratorlist(0);
	}

	private EnumeratorlistContext enumeratorlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EnumeratorlistContext _localctx = new EnumeratorlistContext(Context, _parentState);
		EnumeratorlistContext _prevctx = _localctx;
		int _startState = 170;
		EnterRecursionRule(_localctx, 170, RULE_enumeratorlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1416;
			enumeratordefinition();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1423;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,137,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new EnumeratorlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_enumeratorlist);
					State = 1418;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1419;
					Match(Comma);
					State = 1420;
					enumeratordefinition();
					}
					} 
				}
				State = 1425;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,137,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EnumeratordefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorContext enumerator() {
			return GetRuleContext<EnumeratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public EnumeratordefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeratordefinition; } }
	}

	[RuleVersion(0)]
	public EnumeratordefinitionContext enumeratordefinition() {
		EnumeratordefinitionContext _localctx = new EnumeratordefinitionContext(Context, State);
		EnterRule(_localctx, 172, RULE_enumeratordefinition);
		try {
			State = 1431;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,138,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1426;
				enumerator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1427;
				enumerator();
				State = 1428;
				Match(Assign);
				State = 1429;
				constantexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public EnumeratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator; } }
	}

	[RuleVersion(0)]
	public EnumeratorContext enumerator() {
		EnumeratorContext _localctx = new EnumeratorContext(Context, State);
		EnterRule(_localctx, 174, RULE_enumerator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1433;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OriginalnamespacenameContext originalnamespacename() {
			return GetRuleContext<OriginalnamespacenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespacealiasContext namespacealias() {
			return GetRuleContext<NamespacealiasContext>(0);
		}
		public NamespacenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacename; } }
	}

	[RuleVersion(0)]
	public NamespacenameContext namespacename() {
		NamespacenameContext _localctx = new NamespacenameContext(Context, State);
		EnterRule(_localctx, 176, RULE_namespacename);
		try {
			State = 1437;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1435;
				originalnamespacename();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1436;
				namespacealias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OriginalnamespacenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public OriginalnamespacenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_originalnamespacename; } }
	}

	[RuleVersion(0)]
	public OriginalnamespacenameContext originalnamespacename() {
		OriginalnamespacenameContext _localctx = new OriginalnamespacenameContext(Context, State);
		EnterRule(_localctx, 178, RULE_originalnamespacename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1439;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamednamespacedefinitionContext namednamespacedefinition() {
			return GetRuleContext<NamednamespacedefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnnamednamespacedefinitionContext unnamednamespacedefinition() {
			return GetRuleContext<UnnamednamespacedefinitionContext>(0);
		}
		public NamespacedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacedefinition; } }
	}

	[RuleVersion(0)]
	public NamespacedefinitionContext namespacedefinition() {
		NamespacedefinitionContext _localctx = new NamespacedefinitionContext(Context, State);
		EnterRule(_localctx, 180, RULE_namespacedefinition);
		try {
			State = 1443;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1441;
				namednamespacedefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1442;
				unnamednamespacedefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamednamespacedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OriginalnamespacedefinitionContext originalnamespacedefinition() {
			return GetRuleContext<OriginalnamespacedefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtensionnamespacedefinitionContext extensionnamespacedefinition() {
			return GetRuleContext<ExtensionnamespacedefinitionContext>(0);
		}
		public NamednamespacedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namednamespacedefinition; } }
	}

	[RuleVersion(0)]
	public NamednamespacedefinitionContext namednamespacedefinition() {
		NamednamespacedefinitionContext _localctx = new NamednamespacedefinitionContext(Context, State);
		EnterRule(_localctx, 182, RULE_namednamespacedefinition);
		try {
			State = 1447;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1445;
				originalnamespacedefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1446;
				extensionnamespacedefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OriginalnamespacedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacebodyContext namespacebody() {
			return GetRuleContext<NamespacebodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inline() { return GetToken(CPP14Parser.Inline, 0); }
		public OriginalnamespacedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_originalnamespacedefinition; } }
	}

	[RuleVersion(0)]
	public OriginalnamespacedefinitionContext originalnamespacedefinition() {
		OriginalnamespacedefinitionContext _localctx = new OriginalnamespacedefinitionContext(Context, State);
		EnterRule(_localctx, 184, RULE_originalnamespacedefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1450;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Inline) {
				{
				State = 1449;
				Match(Inline);
				}
			}

			State = 1452;
			Match(Namespace);
			State = 1453;
			Match(Identifier);
			State = 1454;
			Match(LeftBrace);
			State = 1455;
			namespacebody();
			State = 1456;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtensionnamespacedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OriginalnamespacenameContext originalnamespacename() {
			return GetRuleContext<OriginalnamespacenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacebodyContext namespacebody() {
			return GetRuleContext<NamespacebodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inline() { return GetToken(CPP14Parser.Inline, 0); }
		public ExtensionnamespacedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extensionnamespacedefinition; } }
	}

	[RuleVersion(0)]
	public ExtensionnamespacedefinitionContext extensionnamespacedefinition() {
		ExtensionnamespacedefinitionContext _localctx = new ExtensionnamespacedefinitionContext(Context, State);
		EnterRule(_localctx, 186, RULE_extensionnamespacedefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1459;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Inline) {
				{
				State = 1458;
				Match(Inline);
				}
			}

			State = 1461;
			Match(Namespace);
			State = 1462;
			originalnamespacename();
			State = 1463;
			Match(LeftBrace);
			State = 1464;
			namespacebody();
			State = 1465;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnnamednamespacedefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacebodyContext namespacebody() {
			return GetRuleContext<NamespacebodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inline() { return GetToken(CPP14Parser.Inline, 0); }
		public UnnamednamespacedefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unnamednamespacedefinition; } }
	}

	[RuleVersion(0)]
	public UnnamednamespacedefinitionContext unnamednamespacedefinition() {
		UnnamednamespacedefinitionContext _localctx = new UnnamednamespacedefinitionContext(Context, State);
		EnterRule(_localctx, 188, RULE_unnamednamespacedefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1468;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Inline) {
				{
				State = 1467;
				Match(Inline);
				}
			}

			State = 1470;
			Match(Namespace);
			State = 1471;
			Match(LeftBrace);
			State = 1472;
			namespacebody();
			State = 1473;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacebodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationseqContext declarationseq() {
			return GetRuleContext<DeclarationseqContext>(0);
		}
		public NamespacebodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacebody; } }
	}

	[RuleVersion(0)]
	public NamespacebodyContext namespacebody() {
		NamespacebodyContext _localctx = new NamespacebodyContext(Context, State);
		EnterRule(_localctx, 190, RULE_namespacebody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6096708528351086360L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 459384754220313597L) != 0)) {
				{
				State = 1475;
				declarationseq(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacealiasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public NamespacealiasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacealias; } }
	}

	[RuleVersion(0)]
	public NamespacealiasContext namespacealias() {
		NamespacealiasContext _localctx = new NamespacealiasContext(Context, State);
		EnterRule(_localctx, 192, RULE_namespacealias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1478;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacealiasdefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiednamespacespecifierContext qualifiednamespacespecifier() {
			return GetRuleContext<QualifiednamespacespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public NamespacealiasdefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacealiasdefinition; } }
	}

	[RuleVersion(0)]
	public NamespacealiasdefinitionContext namespacealiasdefinition() {
		NamespacealiasdefinitionContext _localctx = new NamespacealiasdefinitionContext(Context, State);
		EnterRule(_localctx, 194, RULE_namespacealiasdefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1480;
			Match(Namespace);
			State = 1481;
			Match(Identifier);
			State = 1482;
			Match(Assign);
			State = 1483;
			qualifiednamespacespecifier();
			State = 1484;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiednamespacespecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespacenameContext namespacename() {
			return GetRuleContext<NamespacenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public QualifiednamespacespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiednamespacespecifier; } }
	}

	[RuleVersion(0)]
	public QualifiednamespacespecifierContext qualifiednamespacespecifier() {
		QualifiednamespacespecifierContext _localctx = new QualifiednamespacespecifierContext(Context, State);
		EnterRule(_localctx, 196, RULE_qualifiednamespacespecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1487;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				{
				State = 1486;
				nestednamespecifier(0);
				}
				break;
			}
			State = 1489;
			namespacename();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingdeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Using() { return GetToken(CPP14Parser.Using, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnqualifiedidContext unqualifiedid() {
			return GetRuleContext<UnqualifiedidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typename() { return GetToken(CPP14Parser.Typename, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Doublecolon() { return GetToken(CPP14Parser.Doublecolon, 0); }
		public UsingdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingdeclaration; } }
	}

	[RuleVersion(0)]
	public UsingdeclarationContext usingdeclaration() {
		UsingdeclarationContext _localctx = new UsingdeclarationContext(Context, State);
		EnterRule(_localctx, 198, RULE_usingdeclaration);
		int _la;
		try {
			State = 1504;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1491;
				Match(Using);
				State = 1493;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Typename) {
					{
					State = 1492;
					Match(Typename);
					}
				}

				State = 1495;
				nestednamespecifier(0);
				State = 1496;
				unqualifiedid();
				State = 1497;
				Match(Semi);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1499;
				Match(Using);
				State = 1500;
				Match(Doublecolon);
				State = 1501;
				unqualifiedid();
				State = 1502;
				Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingdirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Using() { return GetToken(CPP14Parser.Using, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacenameContext namespacename() {
			return GetRuleContext<NamespacenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public UsingdirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingdirective; } }
	}

	[RuleVersion(0)]
	public UsingdirectiveContext usingdirective() {
		UsingdirectiveContext _localctx = new UsingdirectiveContext(Context, State);
		EnterRule(_localctx, 200, RULE_usingdirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1507;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1506;
				attributespecifierseq(0);
				}
			}

			State = 1509;
			Match(Using);
			State = 1510;
			Match(Namespace);
			State = 1512;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
			case 1:
				{
				State = 1511;
				nestednamespecifier(0);
				}
				break;
			}
			State = 1514;
			namespacename();
			State = 1515;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsmdefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Asm() { return GetToken(CPP14Parser.Asm, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Stringliteral() { return GetToken(CPP14Parser.Stringliteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public AsmdefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asmdefinition; } }
	}

	[RuleVersion(0)]
	public AsmdefinitionContext asmdefinition() {
		AsmdefinitionContext _localctx = new AsmdefinitionContext(Context, State);
		EnterRule(_localctx, 202, RULE_asmdefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1517;
			Match(Asm);
			State = 1518;
			Match(LeftParen);
			State = 1519;
			Match(Stringliteral);
			State = 1520;
			Match(RightParen);
			State = 1521;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkagespecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extern() { return GetToken(CPP14Parser.Extern, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Stringliteral() { return GetToken(CPP14Parser.Stringliteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationseqContext declarationseq() {
			return GetRuleContext<DeclarationseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public LinkagespecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linkagespecification; } }
	}

	[RuleVersion(0)]
	public LinkagespecificationContext linkagespecification() {
		LinkagespecificationContext _localctx = new LinkagespecificationContext(Context, State);
		EnterRule(_localctx, 204, RULE_linkagespecification);
		int _la;
		try {
			State = 1533;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,152,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1523;
				Match(Extern);
				State = 1524;
				Match(Stringliteral);
				State = 1525;
				Match(LeftBrace);
				State = 1527;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6096708528351086360L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 459384754220313597L) != 0)) {
					{
					State = 1526;
					declarationseq(0);
					}
				}

				State = 1529;
				Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1530;
				Match(Extern);
				State = 1531;
				Match(Stringliteral);
				State = 1532;
				declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributespecifierseqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierContext attributespecifier() {
			return GetRuleContext<AttributespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public AttributespecifierseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributespecifierseq; } }
	}

	[RuleVersion(0)]
	public AttributespecifierseqContext attributespecifierseq() {
		return attributespecifierseq(0);
	}

	private AttributespecifierseqContext attributespecifierseq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AttributespecifierseqContext _localctx = new AttributespecifierseqContext(Context, _parentState);
		AttributespecifierseqContext _prevctx = _localctx;
		int _startState = 206;
		EnterRecursionRule(_localctx, 206, RULE_attributespecifierseq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1536;
			attributespecifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1542;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AttributespecifierseqContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_attributespecifierseq);
					State = 1538;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1539;
					attributespecifier();
					}
					} 
				}
				State = 1544;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AttributespecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftBracket() { return GetTokens(CPP14Parser.LeftBracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket(int i) {
			return GetToken(CPP14Parser.LeftBracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributelistContext attributelist() {
			return GetRuleContext<AttributelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightBracket() { return GetTokens(CPP14Parser.RightBracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket(int i) {
			return GetToken(CPP14Parser.RightBracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlignmentspecifierContext alignmentspecifier() {
			return GetRuleContext<AlignmentspecifierContext>(0);
		}
		public AttributespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributespecifier; } }
	}

	[RuleVersion(0)]
	public AttributespecifierContext attributespecifier() {
		AttributespecifierContext _localctx = new AttributespecifierContext(Context, State);
		EnterRule(_localctx, 208, RULE_attributespecifier);
		try {
			State = 1552;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBracket:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1545;
				Match(LeftBracket);
				State = 1546;
				Match(LeftBracket);
				State = 1547;
				attributelist(0);
				State = 1548;
				Match(RightBracket);
				State = 1549;
				Match(RightBracket);
				}
				break;
			case Alignas:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1551;
				alignmentspecifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlignmentspecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Alignas() { return GetToken(CPP14Parser.Alignas, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeidContext typeid() {
			return GetRuleContext<TypeidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public AlignmentspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alignmentspecifier; } }
	}

	[RuleVersion(0)]
	public AlignmentspecifierContext alignmentspecifier() {
		AlignmentspecifierContext _localctx = new AlignmentspecifierContext(Context, State);
		EnterRule(_localctx, 210, RULE_alignmentspecifier);
		int _la;
		try {
			State = 1570;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1554;
				Match(Alignas);
				State = 1555;
				Match(LeftParen);
				State = 1556;
				typeid();
				State = 1558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 1557;
					Match(Ellipsis);
					}
				}

				State = 1560;
				Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1562;
				Match(Alignas);
				State = 1563;
				Match(LeftParen);
				State = 1564;
				constantexpression();
				State = 1566;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 1565;
					Match(Ellipsis);
					}
				}

				State = 1568;
				Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributelistContext attributelist() {
			return GetRuleContext<AttributelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public AttributelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributelist; } }
	}

	[RuleVersion(0)]
	public AttributelistContext attributelist() {
		return attributelist(0);
	}

	private AttributelistContext attributelist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AttributelistContext _localctx = new AttributelistContext(Context, _parentState);
		AttributelistContext _prevctx = _localctx;
		int _startState = 212;
		EnterRecursionRule(_localctx, 212, RULE_attributelist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1579;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
			case 1:
				{
				State = 1574;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
				case 1:
					{
					State = 1573;
					attribute();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 1576;
				attribute();
				State = 1577;
				Match(Ellipsis);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1593;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1591;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
					case 1:
						{
						_localctx = new AttributelistContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_attributelist);
						State = 1581;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1582;
						Match(Comma);
						State = 1584;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
						case 1:
							{
							State = 1583;
							attribute();
							}
							break;
						}
						}
						break;
					case 2:
						{
						_localctx = new AttributelistContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_attributelist);
						State = 1586;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1587;
						Match(Comma);
						State = 1588;
						attribute();
						State = 1589;
						Match(Ellipsis);
						}
						break;
					}
					} 
				}
				State = 1595;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributetokenContext attributetoken() {
			return GetRuleContext<AttributetokenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeargumentclauseContext attributeargumentclause() {
			return GetRuleContext<AttributeargumentclauseContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 214, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1596;
			attributetoken();
			State = 1598;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
			case 1:
				{
				State = 1597;
				attributeargumentclause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributetokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributescopedtokenContext attributescopedtoken() {
			return GetRuleContext<AttributescopedtokenContext>(0);
		}
		public AttributetokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributetoken; } }
	}

	[RuleVersion(0)]
	public AttributetokenContext attributetoken() {
		AttributetokenContext _localctx = new AttributetokenContext(Context, State);
		EnterRule(_localctx, 216, RULE_attributetoken);
		try {
			State = 1602;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,164,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1600;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1601;
				attributescopedtoken();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributescopedtokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributenamespaceContext attributenamespace() {
			return GetRuleContext<AttributenamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Doublecolon() { return GetToken(CPP14Parser.Doublecolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public AttributescopedtokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributescopedtoken; } }
	}

	[RuleVersion(0)]
	public AttributescopedtokenContext attributescopedtoken() {
		AttributescopedtokenContext _localctx = new AttributescopedtokenContext(Context, State);
		EnterRule(_localctx, 218, RULE_attributescopedtoken);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1604;
			attributenamespace();
			State = 1605;
			Match(Doublecolon);
			State = 1606;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributenamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public AttributenamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributenamespace; } }
	}

	[RuleVersion(0)]
	public AttributenamespaceContext attributenamespace() {
		AttributenamespaceContext _localctx = new AttributenamespaceContext(Context, State);
		EnterRule(_localctx, 220, RULE_attributenamespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1608;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeargumentclauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BalancedtokenseqContext balancedtokenseq() {
			return GetRuleContext<BalancedtokenseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public AttributeargumentclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeargumentclause; } }
	}

	[RuleVersion(0)]
	public AttributeargumentclauseContext attributeargumentclause() {
		AttributeargumentclauseContext _localctx = new AttributeargumentclauseContext(Context, State);
		EnterRule(_localctx, 222, RULE_attributeargumentclause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1610;
			Match(LeftParen);
			State = 1611;
			balancedtokenseq(0);
			State = 1612;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BalancedtokenseqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BalancedtokenContext balancedtoken() {
			return GetRuleContext<BalancedtokenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BalancedtokenseqContext balancedtokenseq() {
			return GetRuleContext<BalancedtokenseqContext>(0);
		}
		public BalancedtokenseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_balancedtokenseq; } }
	}

	[RuleVersion(0)]
	public BalancedtokenseqContext balancedtokenseq() {
		return balancedtokenseq(0);
	}

	private BalancedtokenseqContext balancedtokenseq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BalancedtokenseqContext _localctx = new BalancedtokenseqContext(Context, _parentState);
		BalancedtokenseqContext _prevctx = _localctx;
		int _startState = 224;
		EnterRecursionRule(_localctx, 224, RULE_balancedtokenseq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1616;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
			case 1:
				{
				State = 1615;
				balancedtoken();
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1622;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,166,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BalancedtokenseqContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_balancedtokenseq);
					State = 1618;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1619;
					balancedtoken();
					}
					} 
				}
				State = 1624;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,166,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BalancedtokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BalancedtokenseqContext balancedtokenseq() {
			return GetRuleContext<BalancedtokenseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		public BalancedtokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_balancedtoken; } }
	}

	[RuleVersion(0)]
	public BalancedtokenContext balancedtoken() {
		BalancedtokenContext _localctx = new BalancedtokenContext(Context, State);
		EnterRule(_localctx, 226, RULE_balancedtoken);
		try {
			State = 1637;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1625;
				Match(LeftParen);
				State = 1626;
				balancedtokenseq(0);
				State = 1627;
				Match(RightParen);
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1629;
				Match(LeftBracket);
				State = 1630;
				balancedtokenseq(0);
				State = 1631;
				Match(RightBracket);
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1633;
				Match(LeftBrace);
				State = 1634;
				balancedtokenseq(0);
				State = 1635;
				Match(RightBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitdeclaratorlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitdeclaratorContext initdeclarator() {
			return GetRuleContext<InitdeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitdeclaratorlistContext initdeclaratorlist() {
			return GetRuleContext<InitdeclaratorlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public InitdeclaratorlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initdeclaratorlist; } }
	}

	[RuleVersion(0)]
	public InitdeclaratorlistContext initdeclaratorlist() {
		return initdeclaratorlist(0);
	}

	private InitdeclaratorlistContext initdeclaratorlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InitdeclaratorlistContext _localctx = new InitdeclaratorlistContext(Context, _parentState);
		InitdeclaratorlistContext _prevctx = _localctx;
		int _startState = 228;
		EnterRecursionRule(_localctx, 228, RULE_initdeclaratorlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1640;
			initdeclarator();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1647;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,168,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InitdeclaratorlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_initdeclaratorlist);
					State = 1642;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1643;
					Match(Comma);
					State = 1644;
					initdeclarator();
					}
					} 
				}
				State = 1649;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,168,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InitdeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public InitdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initdeclarator; } }
	}

	[RuleVersion(0)]
	public InitdeclaratorContext initdeclarator() {
		InitdeclaratorContext _localctx = new InitdeclaratorContext(Context, State);
		EnterRule(_localctx, 230, RULE_initdeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1650;
			declarator();
			State = 1652;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
			case 1:
				{
				State = 1651;
				initializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PtrdeclaratorContext ptrdeclarator() {
			return GetRuleContext<PtrdeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoptrdeclaratorContext noptrdeclarator() {
			return GetRuleContext<NoptrdeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersandqualifiersContext parametersandqualifiers() {
			return GetRuleContext<ParametersandqualifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrailingreturntypeContext trailingreturntype() {
			return GetRuleContext<TrailingreturntypeContext>(0);
		}
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(Context, State);
		EnterRule(_localctx, 232, RULE_declarator);
		try {
			State = 1659;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1654;
				ptrdeclarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1655;
				noptrdeclarator(0);
				State = 1656;
				parametersandqualifiers();
				State = 1657;
				trailingreturntype();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrdeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NoptrdeclaratorContext noptrdeclarator() {
			return GetRuleContext<NoptrdeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PtroperatorContext ptroperator() {
			return GetRuleContext<PtroperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PtrdeclaratorContext ptrdeclarator() {
			return GetRuleContext<PtrdeclaratorContext>(0);
		}
		public PtrdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptrdeclarator; } }
	}

	[RuleVersion(0)]
	public PtrdeclaratorContext ptrdeclarator() {
		PtrdeclaratorContext _localctx = new PtrdeclaratorContext(Context, State);
		EnterRule(_localctx, 234, RULE_ptrdeclarator);
		try {
			State = 1665;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1661;
				noptrdeclarator(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1662;
				ptroperator();
				State = 1663;
				ptrdeclarator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoptrdeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratoridContext declaratorid() {
			return GetRuleContext<DeclaratoridContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PtrdeclaratorContext ptrdeclarator() {
			return GetRuleContext<PtrdeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NoptrdeclaratorContext noptrdeclarator() {
			return GetRuleContext<NoptrdeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersandqualifiersContext parametersandqualifiers() {
			return GetRuleContext<ParametersandqualifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		public NoptrdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noptrdeclarator; } }
	}

	[RuleVersion(0)]
	public NoptrdeclaratorContext noptrdeclarator() {
		return noptrdeclarator(0);
	}

	private NoptrdeclaratorContext noptrdeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoptrdeclaratorContext _localctx = new NoptrdeclaratorContext(Context, _parentState);
		NoptrdeclaratorContext _prevctx = _localctx;
		int _startState = 236;
		EnterRecursionRule(_localctx, 236, RULE_noptrdeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1676;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Decltype:
			case Operator:
			case Tilde:
			case Doublecolon:
			case Ellipsis:
			case Identifier:
				{
				State = 1668;
				declaratorid();
				State = 1670;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
				case 1:
					{
					State = 1669;
					attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case LeftParen:
				{
				State = 1672;
				Match(LeftParen);
				State = 1673;
				ptrdeclarator();
				State = 1674;
				Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1691;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1689;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,176,Context) ) {
					case 1:
						{
						_localctx = new NoptrdeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noptrdeclarator);
						State = 1678;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1679;
						parametersandqualifiers();
						}
						break;
					case 2:
						{
						_localctx = new NoptrdeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noptrdeclarator);
						State = 1680;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1681;
						Match(LeftBracket);
						State = 1683;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4965285389904001232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 3495637736276666969L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 127L) != 0)) {
							{
							State = 1682;
							constantexpression();
							}
						}

						State = 1685;
						Match(RightBracket);
						State = 1687;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,175,Context) ) {
						case 1:
							{
							State = 1686;
							attributespecifierseq(0);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 1693;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParametersandqualifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterdeclarationclauseContext parameterdeclarationclause() {
			return GetRuleContext<ParameterdeclarationclauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CvqualifierseqContext cvqualifierseq() {
			return GetRuleContext<CvqualifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefqualifierContext refqualifier() {
			return GetRuleContext<RefqualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionspecificationContext exceptionspecification() {
			return GetRuleContext<ExceptionspecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public ParametersandqualifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametersandqualifiers; } }
	}

	[RuleVersion(0)]
	public ParametersandqualifiersContext parametersandqualifiers() {
		ParametersandqualifiersContext _localctx = new ParametersandqualifiersContext(Context, State);
		EnterRule(_localctx, 238, RULE_parametersandqualifiers);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1694;
			Match(LeftParen);
			State = 1695;
			parameterdeclarationclause();
			State = 1696;
			Match(RightParen);
			State = 1698;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
			case 1:
				{
				State = 1697;
				cvqualifierseq();
				}
				break;
			}
			State = 1701;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
			case 1:
				{
				State = 1700;
				refqualifier();
				}
				break;
			}
			State = 1704;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				{
				State = 1703;
				exceptionspecification();
				}
				break;
			}
			State = 1707;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,181,Context) ) {
			case 1:
				{
				State = 1706;
				attributespecifierseq(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrailingreturntypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(CPP14Parser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TrailingtypespecifierseqContext trailingtypespecifierseq() {
			return GetRuleContext<TrailingtypespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractdeclaratorContext abstractdeclarator() {
			return GetRuleContext<AbstractdeclaratorContext>(0);
		}
		public TrailingreturntypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trailingreturntype; } }
	}

	[RuleVersion(0)]
	public TrailingreturntypeContext trailingreturntype() {
		TrailingreturntypeContext _localctx = new TrailingreturntypeContext(Context, State);
		EnterRule(_localctx, 240, RULE_trailingreturntype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1709;
			Match(Arrow);
			State = 1710;
			trailingtypespecifierseq();
			State = 1712;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				{
				State = 1711;
				abstractdeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtroperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(CPP14Parser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CvqualifierseqContext cvqualifierseq() {
			return GetRuleContext<CvqualifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd() { return GetToken(CPP14Parser.AndAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public PtroperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptroperator; } }
	}

	[RuleVersion(0)]
	public PtroperatorContext ptroperator() {
		PtroperatorContext _localctx = new PtroperatorContext(Context, State);
		EnterRule(_localctx, 242, RULE_ptroperator);
		try {
			State = 1737;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Star:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1714;
				Match(Star);
				State = 1716;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,183,Context) ) {
				case 1:
					{
					State = 1715;
					attributespecifierseq(0);
					}
					break;
				}
				State = 1719;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,184,Context) ) {
				case 1:
					{
					State = 1718;
					cvqualifierseq();
					}
					break;
				}
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1721;
				Match(And);
				State = 1723;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
				case 1:
					{
					State = 1722;
					attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case AndAnd:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1725;
				Match(AndAnd);
				State = 1727;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,186,Context) ) {
				case 1:
					{
					State = 1726;
					attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case Decltype:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1729;
				nestednamespecifier(0);
				State = 1730;
				Match(Star);
				State = 1732;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
				case 1:
					{
					State = 1731;
					attributespecifierseq(0);
					}
					break;
				}
				State = 1735;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
				case 1:
					{
					State = 1734;
					cvqualifierseq();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CvqualifierseqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CvqualifierContext cvqualifier() {
			return GetRuleContext<CvqualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CvqualifierseqContext cvqualifierseq() {
			return GetRuleContext<CvqualifierseqContext>(0);
		}
		public CvqualifierseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cvqualifierseq; } }
	}

	[RuleVersion(0)]
	public CvqualifierseqContext cvqualifierseq() {
		CvqualifierseqContext _localctx = new CvqualifierseqContext(Context, State);
		EnterRule(_localctx, 244, RULE_cvqualifierseq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1739;
			cvqualifier();
			State = 1741;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
			case 1:
				{
				State = 1740;
				cvqualifierseq();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CvqualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(CPP14Parser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Volatile() { return GetToken(CPP14Parser.Volatile, 0); }
		public CvqualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cvqualifier; } }
	}

	[RuleVersion(0)]
	public CvqualifierContext cvqualifier() {
		CvqualifierContext _localctx = new CvqualifierContext(Context, State);
		EnterRule(_localctx, 246, RULE_cvqualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1743;
			_la = TokenStream.LA(1);
			if ( !(_la==Const || _la==Volatile) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefqualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd() { return GetToken(CPP14Parser.AndAnd, 0); }
		public RefqualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refqualifier; } }
	}

	[RuleVersion(0)]
	public RefqualifierContext refqualifier() {
		RefqualifierContext _localctx = new RefqualifierContext(Context, State);
		EnterRule(_localctx, 248, RULE_refqualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1745;
			_la = TokenStream.LA(1);
			if ( !(_la==And || _la==AndAnd) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratoridContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdexpressionContext idexpression() {
			return GetRuleContext<IdexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public DeclaratoridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaratorid; } }
	}

	[RuleVersion(0)]
	public DeclaratoridContext declaratorid() {
		DeclaratoridContext _localctx = new DeclaratoridContext(Context, State);
		EnterRule(_localctx, 250, RULE_declaratorid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1748;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 1747;
				Match(Ellipsis);
				}
			}

			State = 1750;
			idexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypespecifierseqContext typespecifierseq() {
			return GetRuleContext<TypespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractdeclaratorContext abstractdeclarator() {
			return GetRuleContext<AbstractdeclaratorContext>(0);
		}
		public TypeidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeid; } }
	}

	[RuleVersion(0)]
	public TypeidContext typeid() {
		TypeidContext _localctx = new TypeidContext(Context, State);
		EnterRule(_localctx, 252, RULE_typeid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1752;
			typespecifierseq();
			State = 1754;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
			case 1:
				{
				State = 1753;
				abstractdeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractdeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PtrabstractdeclaratorContext ptrabstractdeclarator() {
			return GetRuleContext<PtrabstractdeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersandqualifiersContext parametersandqualifiers() {
			return GetRuleContext<ParametersandqualifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrailingreturntypeContext trailingreturntype() {
			return GetRuleContext<TrailingreturntypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoptrabstractdeclaratorContext noptrabstractdeclarator() {
			return GetRuleContext<NoptrabstractdeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractpackdeclaratorContext abstractpackdeclarator() {
			return GetRuleContext<AbstractpackdeclaratorContext>(0);
		}
		public AbstractdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractdeclarator; } }
	}

	[RuleVersion(0)]
	public AbstractdeclaratorContext abstractdeclarator() {
		AbstractdeclaratorContext _localctx = new AbstractdeclaratorContext(Context, State);
		EnterRule(_localctx, 254, RULE_abstractdeclarator);
		try {
			State = 1764;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1756;
				ptrabstractdeclarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1758;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
				case 1:
					{
					State = 1757;
					noptrabstractdeclarator(0);
					}
					break;
				}
				State = 1760;
				parametersandqualifiers();
				State = 1761;
				trailingreturntype();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1763;
				abstractpackdeclarator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrabstractdeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NoptrabstractdeclaratorContext noptrabstractdeclarator() {
			return GetRuleContext<NoptrabstractdeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PtroperatorContext ptroperator() {
			return GetRuleContext<PtroperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PtrabstractdeclaratorContext ptrabstractdeclarator() {
			return GetRuleContext<PtrabstractdeclaratorContext>(0);
		}
		public PtrabstractdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptrabstractdeclarator; } }
	}

	[RuleVersion(0)]
	public PtrabstractdeclaratorContext ptrabstractdeclarator() {
		PtrabstractdeclaratorContext _localctx = new PtrabstractdeclaratorContext(Context, State);
		EnterRule(_localctx, 256, RULE_ptrabstractdeclarator);
		try {
			State = 1771;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
			case LeftBracket:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1766;
				noptrabstractdeclarator(0);
				}
				break;
			case Decltype:
			case Star:
			case And:
			case AndAnd:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1767;
				ptroperator();
				State = 1769;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
				case 1:
					{
					State = 1768;
					ptrabstractdeclarator();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoptrabstractdeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParametersandqualifiersContext parametersandqualifiers() {
			return GetRuleContext<ParametersandqualifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PtrabstractdeclaratorContext ptrabstractdeclarator() {
			return GetRuleContext<PtrabstractdeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NoptrabstractdeclaratorContext noptrabstractdeclarator() {
			return GetRuleContext<NoptrabstractdeclaratorContext>(0);
		}
		public NoptrabstractdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noptrabstractdeclarator; } }
	}

	[RuleVersion(0)]
	public NoptrabstractdeclaratorContext noptrabstractdeclarator() {
		return noptrabstractdeclarator(0);
	}

	private NoptrabstractdeclaratorContext noptrabstractdeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoptrabstractdeclaratorContext _localctx = new NoptrabstractdeclaratorContext(Context, _parentState);
		NoptrabstractdeclaratorContext _prevctx = _localctx;
		int _startState = 258;
		EnterRecursionRule(_localctx, 258, RULE_noptrabstractdeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1787;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
			case 1:
				{
				State = 1774;
				parametersandqualifiers();
				}
				break;
			case 2:
				{
				State = 1775;
				Match(LeftBracket);
				State = 1777;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4965285389904001232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 3495637736276666969L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 127L) != 0)) {
					{
					State = 1776;
					constantexpression();
					}
				}

				State = 1779;
				Match(RightBracket);
				State = 1781;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
				case 1:
					{
					State = 1780;
					attributespecifierseq(0);
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 1783;
				Match(LeftParen);
				State = 1784;
				ptrabstractdeclarator();
				State = 1785;
				Match(RightParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1802;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,203,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1800;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,202,Context) ) {
					case 1:
						{
						_localctx = new NoptrabstractdeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noptrabstractdeclarator);
						State = 1789;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1790;
						parametersandqualifiers();
						}
						break;
					case 2:
						{
						_localctx = new NoptrabstractdeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noptrabstractdeclarator);
						State = 1791;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1792;
						Match(LeftBracket);
						State = 1794;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4965285389904001232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 3495637736276666969L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 127L) != 0)) {
							{
							State = 1793;
							constantexpression();
							}
						}

						State = 1796;
						Match(RightBracket);
						State = 1798;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
						case 1:
							{
							State = 1797;
							attributespecifierseq(0);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 1804;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,203,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AbstractpackdeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NoptrabstractpackdeclaratorContext noptrabstractpackdeclarator() {
			return GetRuleContext<NoptrabstractpackdeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PtroperatorContext ptroperator() {
			return GetRuleContext<PtroperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractpackdeclaratorContext abstractpackdeclarator() {
			return GetRuleContext<AbstractpackdeclaratorContext>(0);
		}
		public AbstractpackdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractpackdeclarator; } }
	}

	[RuleVersion(0)]
	public AbstractpackdeclaratorContext abstractpackdeclarator() {
		AbstractpackdeclaratorContext _localctx = new AbstractpackdeclaratorContext(Context, State);
		EnterRule(_localctx, 260, RULE_abstractpackdeclarator);
		try {
			State = 1809;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Ellipsis:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1805;
				noptrabstractpackdeclarator(0);
				}
				break;
			case Decltype:
			case Star:
			case And:
			case AndAnd:
			case Doublecolon:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1806;
				ptroperator();
				State = 1807;
				abstractpackdeclarator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoptrabstractpackdeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NoptrabstractpackdeclaratorContext noptrabstractpackdeclarator() {
			return GetRuleContext<NoptrabstractpackdeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersandqualifiersContext parametersandqualifiers() {
			return GetRuleContext<ParametersandqualifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public NoptrabstractpackdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noptrabstractpackdeclarator; } }
	}

	[RuleVersion(0)]
	public NoptrabstractpackdeclaratorContext noptrabstractpackdeclarator() {
		return noptrabstractpackdeclarator(0);
	}

	private NoptrabstractpackdeclaratorContext noptrabstractpackdeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoptrabstractpackdeclaratorContext _localctx = new NoptrabstractpackdeclaratorContext(Context, _parentState);
		NoptrabstractpackdeclaratorContext _prevctx = _localctx;
		int _startState = 262;
		EnterRecursionRule(_localctx, 262, RULE_noptrabstractpackdeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1812;
			Match(Ellipsis);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1827;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,208,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1825;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,207,Context) ) {
					case 1:
						{
						_localctx = new NoptrabstractpackdeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noptrabstractpackdeclarator);
						State = 1814;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1815;
						parametersandqualifiers();
						}
						break;
					case 2:
						{
						_localctx = new NoptrabstractpackdeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noptrabstractpackdeclarator);
						State = 1816;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1817;
						Match(LeftBracket);
						State = 1819;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4965285389904001232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 3495637736276666969L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 127L) != 0)) {
							{
							State = 1818;
							constantexpression();
							}
						}

						State = 1821;
						Match(RightBracket);
						State = 1823;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
						case 1:
							{
							State = 1822;
							attributespecifierseq(0);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 1829;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,208,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterdeclarationclauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterdeclarationlistContext parameterdeclarationlist() {
			return GetRuleContext<ParameterdeclarationlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public ParameterdeclarationclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterdeclarationclause; } }
	}

	[RuleVersion(0)]
	public ParameterdeclarationclauseContext parameterdeclarationclause() {
		ParameterdeclarationclauseContext _localctx = new ParameterdeclarationclauseContext(Context, State);
		EnterRule(_localctx, 264, RULE_parameterdeclarationclause);
		int _la;
		try {
			State = 1840;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,211,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1831;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8546704109035980600L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 297237575406461917L) != 0)) {
					{
					State = 1830;
					parameterdeclarationlist(0);
					}
				}

				State = 1834;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 1833;
					Match(Ellipsis);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1836;
				parameterdeclarationlist(0);
				State = 1837;
				Match(Comma);
				State = 1838;
				Match(Ellipsis);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterdeclarationlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterdeclarationContext parameterdeclaration() {
			return GetRuleContext<ParameterdeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterdeclarationlistContext parameterdeclarationlist() {
			return GetRuleContext<ParameterdeclarationlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public ParameterdeclarationlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterdeclarationlist; } }
	}

	[RuleVersion(0)]
	public ParameterdeclarationlistContext parameterdeclarationlist() {
		return parameterdeclarationlist(0);
	}

	private ParameterdeclarationlistContext parameterdeclarationlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ParameterdeclarationlistContext _localctx = new ParameterdeclarationlistContext(Context, _parentState);
		ParameterdeclarationlistContext _prevctx = _localctx;
		int _startState = 266;
		EnterRecursionRule(_localctx, 266, RULE_parameterdeclarationlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1843;
			parameterdeclaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1850;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,212,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ParameterdeclarationlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_parameterdeclarationlist);
					State = 1845;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1846;
					Match(Comma);
					State = 1847;
					parameterdeclaration();
					}
					} 
				}
				State = 1852;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,212,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterdeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerclauseContext initializerclause() {
			return GetRuleContext<InitializerclauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractdeclaratorContext abstractdeclarator() {
			return GetRuleContext<AbstractdeclaratorContext>(0);
		}
		public ParameterdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterdeclaration; } }
	}

	[RuleVersion(0)]
	public ParameterdeclarationContext parameterdeclaration() {
		ParameterdeclarationContext _localctx = new ParameterdeclarationContext(Context, State);
		EnterRule(_localctx, 268, RULE_parameterdeclaration);
		int _la;
		try {
			State = 1884;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,219,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1854;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1853;
					attributespecifierseq(0);
					}
				}

				State = 1856;
				declspecifierseq();
				State = 1857;
				declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1860;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1859;
					attributespecifierseq(0);
					}
				}

				State = 1862;
				declspecifierseq();
				State = 1863;
				declarator();
				State = 1864;
				Match(Assign);
				State = 1865;
				initializerclause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1868;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1867;
					attributespecifierseq(0);
					}
				}

				State = 1870;
				declspecifierseq();
				State = 1872;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,216,Context) ) {
				case 1:
					{
					State = 1871;
					abstractdeclarator();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1875;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1874;
					attributespecifierseq(0);
					}
				}

				State = 1877;
				declspecifierseq();
				State = 1879;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Decltype || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 215512868983045L) != 0)) {
					{
					State = 1878;
					abstractdeclarator();
					}
				}

				State = 1881;
				Match(Assign);
				State = 1882;
				initializerclause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionbodyContext functionbody() {
			return GetRuleContext<FunctionbodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VirtspecifierseqContext virtspecifierseq() {
			return GetRuleContext<VirtspecifierseqContext>(0);
		}
		public FunctiondefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondefinition; } }
	}

	[RuleVersion(0)]
	public FunctiondefinitionContext functiondefinition() {
		FunctiondefinitionContext _localctx = new FunctiondefinitionContext(Context, State);
		EnterRule(_localctx, 270, RULE_functiondefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1887;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Alignas || _la==LeftBracket) {
				{
				State = 1886;
				attributespecifierseq(0);
				}
			}

			State = 1890;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,221,Context) ) {
			case 1:
				{
				State = 1889;
				declspecifierseq();
				}
				break;
			}
			State = 1892;
			declarator();
			State = 1894;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Final || _la==Override) {
				{
				State = 1893;
				virtspecifierseq(0);
				}
			}

			State = 1896;
			functionbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionbodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CtorinitializerContext ctorinitializer() {
			return GetRuleContext<CtorinitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctiontryblockContext functiontryblock() {
			return GetRuleContext<FunctiontryblockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(CPP14Parser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(CPP14Parser.Delete, 0); }
		public FunctionbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionbody; } }
	}

	[RuleVersion(0)]
	public FunctionbodyContext functionbody() {
		FunctionbodyContext _localctx = new FunctionbodyContext(Context, State);
		EnterRule(_localctx, 272, RULE_functionbody);
		int _la;
		try {
			State = 1909;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,224,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1899;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1898;
					ctorinitializer();
					}
				}

				State = 1901;
				compoundstatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1902;
				functiontryblock();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1903;
				Match(Assign);
				State = 1904;
				Match(Default);
				State = 1905;
				Match(Semi);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1906;
				Match(Assign);
				State = 1907;
				Match(Delete);
				State = 1908;
				Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BraceorequalinitializerContext braceorequalinitializer() {
			return GetRuleContext<BraceorequalinitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 274, RULE_initializer);
		try {
			State = 1916;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBrace:
			case Assign:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1911;
				braceorequalinitializer();
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1912;
				Match(LeftParen);
				State = 1913;
				expressionlist();
				State = 1914;
				Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BraceorequalinitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerclauseContext initializerclause() {
			return GetRuleContext<InitializerclauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public BraceorequalinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_braceorequalinitializer; } }
	}

	[RuleVersion(0)]
	public BraceorequalinitializerContext braceorequalinitializer() {
		BraceorequalinitializerContext _localctx = new BraceorequalinitializerContext(Context, State);
		EnterRule(_localctx, 276, RULE_braceorequalinitializer);
		try {
			State = 1921;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Assign:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1918;
				Match(Assign);
				State = 1919;
				initializerclause();
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1920;
				bracedinitlist();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerclauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentexpressionContext assignmentexpression() {
			return GetRuleContext<AssignmentexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public InitializerclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerclause; } }
	}

	[RuleVersion(0)]
	public InitializerclauseContext initializerclause() {
		InitializerclauseContext _localctx = new InitializerclauseContext(Context, State);
		EnterRule(_localctx, 278, RULE_initializerclause);
		try {
			State = 1925;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Alignof:
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Const_cast:
			case Decltype:
			case Delete:
			case Double:
			case Dynamic_cast:
			case False:
			case Float:
			case Int:
			case Long:
			case New:
			case Noexcept:
			case Nullptr:
			case Operator:
			case Reinterpret_cast:
			case Short:
			case Signed:
			case Sizeof:
			case Static_cast:
			case This:
			case Throw:
			case True:
			case Typeid:
			case Typename:
			case Unsigned:
			case Void:
			case Wchar:
			case LeftParen:
			case LeftBracket:
			case Plus:
			case Minus:
			case Star:
			case And:
			case Or:
			case Tilde:
			case Not:
			case PlusPlus:
			case MinusMinus:
			case Doublecolon:
			case Identifier:
			case Integerliteral:
			case Characterliteral:
			case Floatingliteral:
			case Stringliteral:
			case Userdefinedintegerliteral:
			case Userdefinedfloatingliteral:
			case Userdefinedstringliteral:
			case Userdefinedcharacterliteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1923;
				assignmentexpression();
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1924;
				bracedinitlist();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitializerclauseContext initializerclause() {
			return GetRuleContext<InitializerclauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerlistContext initializerlist() {
			return GetRuleContext<InitializerlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public InitializerlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerlist; } }
	}

	[RuleVersion(0)]
	public InitializerlistContext initializerlist() {
		return initializerlist(0);
	}

	private InitializerlistContext initializerlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InitializerlistContext _localctx = new InitializerlistContext(Context, _parentState);
		InitializerlistContext _prevctx = _localctx;
		int _startState = 280;
		EnterRecursionRule(_localctx, 280, RULE_initializerlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1928;
			initializerclause();
			State = 1930;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,228,Context) ) {
			case 1:
				{
				State = 1929;
				Match(Ellipsis);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1940;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,230,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InitializerlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_initializerlist);
					State = 1932;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1933;
					Match(Comma);
					State = 1934;
					initializerclause();
					State = 1936;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,229,Context) ) {
					case 1:
						{
						State = 1935;
						Match(Ellipsis);
						}
						break;
					}
					}
					} 
				}
				State = 1942;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,230,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BracedinitlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerlistContext initializerlist() {
			return GetRuleContext<InitializerlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public BracedinitlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracedinitlist; } }
	}

	[RuleVersion(0)]
	public BracedinitlistContext bracedinitlist() {
		BracedinitlistContext _localctx = new BracedinitlistContext(Context, State);
		EnterRule(_localctx, 282, RULE_bracedinitlist);
		int _la;
		try {
			State = 1952;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1943;
				Match(LeftBrace);
				State = 1944;
				initializerlist(0);
				State = 1946;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 1945;
					Match(Comma);
					}
				}

				State = 1948;
				Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1950;
				Match(LeftBrace);
				State = 1951;
				Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		public ClassnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classname; } }
	}

	[RuleVersion(0)]
	public ClassnameContext classname() {
		ClassnameContext _localctx = new ClassnameContext(Context, State);
		EnterRule(_localctx, 284, RULE_classname);
		try {
			State = 1956;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,233,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1954;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1955;
				simpletemplateid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassspecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassheadContext classhead() {
			return GetRuleContext<ClassheadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberspecificationContext memberspecification() {
			return GetRuleContext<MemberspecificationContext>(0);
		}
		public ClassspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classspecifier; } }
	}

	[RuleVersion(0)]
	public ClassspecifierContext classspecifier() {
		ClassspecifierContext _localctx = new ClassspecifierContext(Context, State);
		EnterRule(_localctx, 286, RULE_classspecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1958;
			classhead();
			State = 1959;
			Match(LeftBrace);
			State = 1961;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6095725564955854648L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 463888353847684093L) != 0)) {
				{
				State = 1960;
				memberspecification();
				}
			}

			State = 1963;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassheadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClasskeyContext classkey() {
			return GetRuleContext<ClasskeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassheadnameContext classheadname() {
			return GetRuleContext<ClassheadnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassvirtspecifierContext classvirtspecifier() {
			return GetRuleContext<ClassvirtspecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseclauseContext baseclause() {
			return GetRuleContext<BaseclauseContext>(0);
		}
		public ClassheadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classhead; } }
	}

	[RuleVersion(0)]
	public ClassheadContext classhead() {
		ClassheadContext _localctx = new ClassheadContext(Context, State);
		EnterRule(_localctx, 288, RULE_classhead);
		int _la;
		try {
			State = 1983;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,240,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1965;
				classkey();
				State = 1967;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1966;
					attributespecifierseq(0);
					}
				}

				State = 1969;
				classheadname();
				State = 1971;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Final) {
					{
					State = 1970;
					classvirtspecifier();
					}
				}

				State = 1974;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1973;
					baseclause();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1976;
				classkey();
				State = 1978;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 1977;
					attributespecifierseq(0);
					}
				}

				State = 1981;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1980;
					baseclause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassheadnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassnameContext classname() {
			return GetRuleContext<ClassnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		public ClassheadnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classheadname; } }
	}

	[RuleVersion(0)]
	public ClassheadnameContext classheadname() {
		ClassheadnameContext _localctx = new ClassheadnameContext(Context, State);
		EnterRule(_localctx, 290, RULE_classheadname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1986;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,241,Context) ) {
			case 1:
				{
				State = 1985;
				nestednamespecifier(0);
				}
				break;
			}
			State = 1988;
			classname();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassvirtspecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Final() { return GetToken(CPP14Parser.Final, 0); }
		public ClassvirtspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classvirtspecifier; } }
	}

	[RuleVersion(0)]
	public ClassvirtspecifierContext classvirtspecifier() {
		ClassvirtspecifierContext _localctx = new ClassvirtspecifierContext(Context, State);
		EnterRule(_localctx, 292, RULE_classvirtspecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1990;
			Match(Final);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClasskeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(CPP14Parser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Struct() { return GetToken(CPP14Parser.Struct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Union() { return GetToken(CPP14Parser.Union, 0); }
		public ClasskeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classkey; } }
	}

	[RuleVersion(0)]
	public ClasskeyContext classkey() {
		ClasskeyContext _localctx = new ClasskeyContext(Context, State);
		EnterRule(_localctx, 294, RULE_classkey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1992;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 72092778410016769L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberspecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberdeclarationContext memberdeclaration() {
			return GetRuleContext<MemberdeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberspecificationContext memberspecification() {
			return GetRuleContext<MemberspecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessspecifierContext accessspecifier() {
			return GetRuleContext<AccessspecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		public MemberspecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberspecification; } }
	}

	[RuleVersion(0)]
	public MemberspecificationContext memberspecification() {
		MemberspecificationContext _localctx = new MemberspecificationContext(Context, State);
		EnterRule(_localctx, 296, RULE_memberspecification);
		int _la;
		try {
			State = 2003;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Alignas:
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Constexpr:
			case Decltype:
			case Double:
			case Enum:
			case Explicit:
			case Extern:
			case Float:
			case Friend:
			case Inline:
			case Int:
			case Long:
			case Mutable:
			case Operator:
			case Register:
			case Short:
			case Signed:
			case Static:
			case Static_assert:
			case Struct:
			case Template:
			case Thread_local:
			case Typedef:
			case Typename:
			case Union:
			case Unsigned:
			case Using:
			case Virtual:
			case Void:
			case Volatile:
			case Wchar:
			case LeftParen:
			case LeftBracket:
			case Star:
			case And:
			case Tilde:
			case AndAnd:
			case Colon:
			case Doublecolon:
			case Semi:
			case Ellipsis:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1994;
				memberdeclaration();
				State = 1996;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6095725564955854648L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 463888353847684093L) != 0)) {
					{
					State = 1995;
					memberspecification();
					}
				}

				}
				break;
			case Private:
			case Protected:
			case Public:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1998;
				accessspecifier();
				State = 1999;
				Match(Colon);
				State = 2001;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6095725564955854648L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 463888353847684093L) != 0)) {
					{
					State = 2000;
					memberspecification();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberdeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclspecifierseqContext declspecifierseq() {
			return GetRuleContext<DeclspecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberdeclaratorlistContext memberdeclaratorlist() {
			return GetRuleContext<MemberdeclaratorlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctiondefinitionContext functiondefinition() {
			return GetRuleContext<FunctiondefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingdeclarationContext usingdeclaration() {
			return GetRuleContext<UsingdeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Static_assertdeclarationContext static_assertdeclaration() {
			return GetRuleContext<Static_assertdeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplatedeclarationContext templatedeclaration() {
			return GetRuleContext<TemplatedeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasdeclarationContext aliasdeclaration() {
			return GetRuleContext<AliasdeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptydeclarationContext emptydeclaration() {
			return GetRuleContext<EmptydeclarationContext>(0);
		}
		public MemberdeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberdeclaration; } }
	}

	[RuleVersion(0)]
	public MemberdeclarationContext memberdeclaration() {
		MemberdeclarationContext _localctx = new MemberdeclarationContext(Context, State);
		EnterRule(_localctx, 298, RULE_memberdeclaration);
		int _la;
		try {
			State = 2021;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,248,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2006;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,245,Context) ) {
				case 1:
					{
					State = 2005;
					attributespecifierseq(0);
					}
					break;
				}
				State = 2009;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,246,Context) ) {
				case 1:
					{
					State = 2008;
					declspecifierseq();
					}
					break;
				}
				State = 2012;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35184372613128L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 217711892254981L) != 0)) {
					{
					State = 2011;
					memberdeclaratorlist(0);
					}
				}

				State = 2014;
				Match(Semi);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2015;
				functiondefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2016;
				usingdeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2017;
				static_assertdeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2018;
				templatedeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2019;
				aliasdeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2020;
				emptydeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberdeclaratorlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberdeclaratorContext memberdeclarator() {
			return GetRuleContext<MemberdeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberdeclaratorlistContext memberdeclaratorlist() {
			return GetRuleContext<MemberdeclaratorlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public MemberdeclaratorlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberdeclaratorlist; } }
	}

	[RuleVersion(0)]
	public MemberdeclaratorlistContext memberdeclaratorlist() {
		return memberdeclaratorlist(0);
	}

	private MemberdeclaratorlistContext memberdeclaratorlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MemberdeclaratorlistContext _localctx = new MemberdeclaratorlistContext(Context, _parentState);
		MemberdeclaratorlistContext _prevctx = _localctx;
		int _startState = 300;
		EnterRecursionRule(_localctx, 300, RULE_memberdeclaratorlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2024;
			memberdeclarator();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2031;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,249,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MemberdeclaratorlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_memberdeclaratorlist);
					State = 2026;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2027;
					Match(Comma);
					State = 2028;
					memberdeclarator();
					}
					} 
				}
				State = 2033;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,249,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MemberdeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VirtspecifierseqContext virtspecifierseq() {
			return GetRuleContext<VirtspecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PurespecifierContext purespecifier() {
			return GetRuleContext<PurespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BraceorequalinitializerContext braceorequalinitializer() {
			return GetRuleContext<BraceorequalinitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		public MemberdeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberdeclarator; } }
	}

	[RuleVersion(0)]
	public MemberdeclaratorContext memberdeclarator() {
		MemberdeclaratorContext _localctx = new MemberdeclaratorContext(Context, State);
		EnterRule(_localctx, 302, RULE_memberdeclarator);
		int _la;
		try {
			State = 2053;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,255,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2034;
				declarator();
				State = 2036;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,250,Context) ) {
				case 1:
					{
					State = 2035;
					virtspecifierseq(0);
					}
					break;
				}
				State = 2039;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,251,Context) ) {
				case 1:
					{
					State = 2038;
					purespecifier();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2041;
				declarator();
				State = 2043;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,252,Context) ) {
				case 1:
					{
					State = 2042;
					braceorequalinitializer();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2046;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 2045;
					Match(Identifier);
					}
				}

				State = 2049;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2048;
					attributespecifierseq(0);
					}
				}

				State = 2051;
				Match(Colon);
				State = 2052;
				constantexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VirtspecifierseqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VirtspecifierContext virtspecifier() {
			return GetRuleContext<VirtspecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VirtspecifierseqContext virtspecifierseq() {
			return GetRuleContext<VirtspecifierseqContext>(0);
		}
		public VirtspecifierseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_virtspecifierseq; } }
	}

	[RuleVersion(0)]
	public VirtspecifierseqContext virtspecifierseq() {
		return virtspecifierseq(0);
	}

	private VirtspecifierseqContext virtspecifierseq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		VirtspecifierseqContext _localctx = new VirtspecifierseqContext(Context, _parentState);
		VirtspecifierseqContext _prevctx = _localctx;
		int _startState = 304;
		EnterRecursionRule(_localctx, 304, RULE_virtspecifierseq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2056;
			virtspecifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2062;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,256,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new VirtspecifierseqContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_virtspecifierseq);
					State = 2058;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2059;
					virtspecifier();
					}
					} 
				}
				State = 2064;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,256,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VirtspecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Override() { return GetToken(CPP14Parser.Override, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Final() { return GetToken(CPP14Parser.Final, 0); }
		public VirtspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_virtspecifier; } }
	}

	[RuleVersion(0)]
	public VirtspecifierContext virtspecifier() {
		VirtspecifierContext _localctx = new VirtspecifierContext(Context, State);
		EnterRule(_localctx, 306, RULE_virtspecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2065;
			_la = TokenStream.LA(1);
			if ( !(_la==Final || _la==Override) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PurespecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZeroLiteral() { return GetToken(CPP14Parser.ZeroLiteral, 0); }
		public PurespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_purespecifier; } }
	}

	[RuleVersion(0)]
	public PurespecifierContext purespecifier() {
		PurespecifierContext _localctx = new PurespecifierContext(Context, State);
		EnterRule(_localctx, 308, RULE_purespecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2067;
			Match(Assign);
			State = 2068;
			Match(ZeroLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseclauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasespecifierlistContext basespecifierlist() {
			return GetRuleContext<BasespecifierlistContext>(0);
		}
		public BaseclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseclause; } }
	}

	[RuleVersion(0)]
	public BaseclauseContext baseclause() {
		BaseclauseContext _localctx = new BaseclauseContext(Context, State);
		EnterRule(_localctx, 310, RULE_baseclause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2070;
			Match(Colon);
			State = 2071;
			basespecifierlist(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasespecifierlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasespecifierContext basespecifier() {
			return GetRuleContext<BasespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasespecifierlistContext basespecifierlist() {
			return GetRuleContext<BasespecifierlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public BasespecifierlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basespecifierlist; } }
	}

	[RuleVersion(0)]
	public BasespecifierlistContext basespecifierlist() {
		return basespecifierlist(0);
	}

	private BasespecifierlistContext basespecifierlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BasespecifierlistContext _localctx = new BasespecifierlistContext(Context, _parentState);
		BasespecifierlistContext _prevctx = _localctx;
		int _startState = 312;
		EnterRecursionRule(_localctx, 312, RULE_basespecifierlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2074;
			basespecifier();
			State = 2076;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,257,Context) ) {
			case 1:
				{
				State = 2075;
				Match(Ellipsis);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2086;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,259,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BasespecifierlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_basespecifierlist);
					State = 2078;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2079;
					Match(Comma);
					State = 2080;
					basespecifier();
					State = 2082;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,258,Context) ) {
					case 1:
						{
						State = 2081;
						Match(Ellipsis);
						}
						break;
					}
					}
					} 
				}
				State = 2088;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,259,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BasespecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasetypespecifierContext basetypespecifier() {
			return GetRuleContext<BasetypespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Virtual() { return GetToken(CPP14Parser.Virtual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessspecifierContext accessspecifier() {
			return GetRuleContext<AccessspecifierContext>(0);
		}
		public BasespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basespecifier; } }
	}

	[RuleVersion(0)]
	public BasespecifierContext basespecifier() {
		BasespecifierContext _localctx = new BasespecifierContext(Context, State);
		EnterRule(_localctx, 314, RULE_basespecifier);
		int _la;
		try {
			State = 2110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,265,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2090;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2089;
					attributespecifierseq(0);
					}
				}

				State = 2092;
				basetypespecifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2094;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2093;
					attributespecifierseq(0);
					}
				}

				State = 2096;
				Match(Virtual);
				State = 2098;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 985162418487296L) != 0)) {
					{
					State = 2097;
					accessspecifier();
					}
				}

				State = 2100;
				basetypespecifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2101;
					attributespecifierseq(0);
					}
				}

				State = 2104;
				accessspecifier();
				State = 2106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Virtual) {
					{
					State = 2105;
					Match(Virtual);
					}
				}

				State = 2108;
				basetypespecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassordecltypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassnameContext classname() {
			return GetRuleContext<ClassnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecltypespecifierContext decltypespecifier() {
			return GetRuleContext<DecltypespecifierContext>(0);
		}
		public ClassordecltypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classordecltype; } }
	}

	[RuleVersion(0)]
	public ClassordecltypeContext classordecltype() {
		ClassordecltypeContext _localctx = new ClassordecltypeContext(Context, State);
		EnterRule(_localctx, 316, RULE_classordecltype);
		try {
			State = 2117;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,267,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2113;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,266,Context) ) {
				case 1:
					{
					State = 2112;
					nestednamespecifier(0);
					}
					break;
				}
				State = 2115;
				classname();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2116;
				decltypespecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasetypespecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassordecltypeContext classordecltype() {
			return GetRuleContext<ClassordecltypeContext>(0);
		}
		public BasetypespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basetypespecifier; } }
	}

	[RuleVersion(0)]
	public BasetypespecifierContext basetypespecifier() {
		BasetypespecifierContext _localctx = new BasetypespecifierContext(Context, State);
		EnterRule(_localctx, 318, RULE_basetypespecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2119;
			classordecltype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessspecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Private() { return GetToken(CPP14Parser.Private, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Protected() { return GetToken(CPP14Parser.Protected, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Public() { return GetToken(CPP14Parser.Public, 0); }
		public AccessspecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessspecifier; } }
	}

	[RuleVersion(0)]
	public AccessspecifierContext accessspecifier() {
		AccessspecifierContext _localctx = new AccessspecifierContext(Context, State);
		EnterRule(_localctx, 320, RULE_accessspecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2121;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 985162418487296L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionfunctionidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(CPP14Parser.Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConversiontypeidContext conversiontypeid() {
			return GetRuleContext<ConversiontypeidContext>(0);
		}
		public ConversionfunctionidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionfunctionid; } }
	}

	[RuleVersion(0)]
	public ConversionfunctionidContext conversionfunctionid() {
		ConversionfunctionidContext _localctx = new ConversionfunctionidContext(Context, State);
		EnterRule(_localctx, 322, RULE_conversionfunctionid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2123;
			Match(Operator);
			State = 2124;
			conversiontypeid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversiontypeidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypespecifierseqContext typespecifierseq() {
			return GetRuleContext<TypespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConversiondeclaratorContext conversiondeclarator() {
			return GetRuleContext<ConversiondeclaratorContext>(0);
		}
		public ConversiontypeidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversiontypeid; } }
	}

	[RuleVersion(0)]
	public ConversiontypeidContext conversiontypeid() {
		ConversiontypeidContext _localctx = new ConversiontypeidContext(Context, State);
		EnterRule(_localctx, 324, RULE_conversiontypeid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2126;
			typespecifierseq();
			State = 2128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,268,Context) ) {
			case 1:
				{
				State = 2127;
				conversiondeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversiondeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PtroperatorContext ptroperator() {
			return GetRuleContext<PtroperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConversiondeclaratorContext conversiondeclarator() {
			return GetRuleContext<ConversiondeclaratorContext>(0);
		}
		public ConversiondeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversiondeclarator; } }
	}

	[RuleVersion(0)]
	public ConversiondeclaratorContext conversiondeclarator() {
		ConversiondeclaratorContext _localctx = new ConversiondeclaratorContext(Context, State);
		EnterRule(_localctx, 326, RULE_conversiondeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2130;
			ptroperator();
			State = 2132;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,269,Context) ) {
			case 1:
				{
				State = 2131;
				conversiondeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CtorinitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MeminitializerlistContext meminitializerlist() {
			return GetRuleContext<MeminitializerlistContext>(0);
		}
		public CtorinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctorinitializer; } }
	}

	[RuleVersion(0)]
	public CtorinitializerContext ctorinitializer() {
		CtorinitializerContext _localctx = new CtorinitializerContext(Context, State);
		EnterRule(_localctx, 328, RULE_ctorinitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2134;
			Match(Colon);
			State = 2135;
			meminitializerlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeminitializerlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MeminitializerContext meminitializer() {
			return GetRuleContext<MeminitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MeminitializerlistContext meminitializerlist() {
			return GetRuleContext<MeminitializerlistContext>(0);
		}
		public MeminitializerlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meminitializerlist; } }
	}

	[RuleVersion(0)]
	public MeminitializerlistContext meminitializerlist() {
		MeminitializerlistContext _localctx = new MeminitializerlistContext(Context, State);
		EnterRule(_localctx, 330, RULE_meminitializerlist);
		int _la;
		try {
			State = 2148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,272,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2137;
				meminitializer();
				State = 2139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 2138;
					Match(Ellipsis);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2141;
				meminitializer();
				State = 2143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 2142;
					Match(Ellipsis);
					}
				}

				State = 2145;
				Match(Comma);
				State = 2146;
				meminitializerlist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeminitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MeminitializeridContext meminitializerid() {
			return GetRuleContext<MeminitializeridContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracedinitlistContext bracedinitlist() {
			return GetRuleContext<BracedinitlistContext>(0);
		}
		public MeminitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meminitializer; } }
	}

	[RuleVersion(0)]
	public MeminitializerContext meminitializer() {
		MeminitializerContext _localctx = new MeminitializerContext(Context, State);
		EnterRule(_localctx, 332, RULE_meminitializer);
		int _la;
		try {
			State = 2160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,274,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2150;
				meminitializerid();
				State = 2151;
				Match(LeftParen);
				State = 2153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4965285389904001232L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 6991275472553596083L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 127L) != 0)) {
					{
					State = 2152;
					expressionlist();
					}
				}

				State = 2155;
				Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2157;
				meminitializerid();
				State = 2158;
				bracedinitlist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeminitializeridContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassordecltypeContext classordecltype() {
			return GetRuleContext<ClassordecltypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public MeminitializeridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meminitializerid; } }
	}

	[RuleVersion(0)]
	public MeminitializeridContext meminitializerid() {
		MeminitializeridContext _localctx = new MeminitializeridContext(Context, State);
		EnterRule(_localctx, 334, RULE_meminitializerid);
		try {
			State = 2164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,275,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2162;
				classordecltype();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2163;
				Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorfunctionidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(CPP14Parser.Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public OperatorfunctionidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorfunctionid; } }
	}

	[RuleVersion(0)]
	public OperatorfunctionidContext operatorfunctionid() {
		OperatorfunctionidContext _localctx = new OperatorfunctionidContext(Context, State);
		EnterRule(_localctx, 336, RULE_operatorfunctionid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2166;
			Match(Operator);
			State = 2167;
			@operator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteraloperatoridContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(CPP14Parser.Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Stringliteral() { return GetToken(CPP14Parser.Stringliteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Userdefinedstringliteral() { return GetToken(CPP14Parser.Userdefinedstringliteral, 0); }
		public LiteraloperatoridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literaloperatorid; } }
	}

	[RuleVersion(0)]
	public LiteraloperatoridContext literaloperatorid() {
		LiteraloperatoridContext _localctx = new LiteraloperatoridContext(Context, State);
		EnterRule(_localctx, 338, RULE_literaloperatorid);
		try {
			State = 2174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2169;
				Match(Operator);
				State = 2170;
				Match(Stringliteral);
				State = 2171;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2172;
				Match(Operator);
				State = 2173;
				Match(Userdefinedstringliteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplatedeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateparameterlistContext templateparameterlist() {
			return GetRuleContext<TemplateparameterlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public TemplatedeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templatedeclaration; } }
	}

	[RuleVersion(0)]
	public TemplatedeclarationContext templatedeclaration() {
		TemplatedeclarationContext _localctx = new TemplatedeclarationContext(Context, State);
		EnterRule(_localctx, 340, RULE_templatedeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2176;
			Match(Template);
			State = 2177;
			Match(Less);
			State = 2178;
			templateparameterlist(0);
			State = 2179;
			Match(Greater);
			State = 2180;
			declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateparameterlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TemplateparameterContext templateparameter() {
			return GetRuleContext<TemplateparameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateparameterlistContext templateparameterlist() {
			return GetRuleContext<TemplateparameterlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public TemplateparameterlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateparameterlist; } }
	}

	[RuleVersion(0)]
	public TemplateparameterlistContext templateparameterlist() {
		return templateparameterlist(0);
	}

	private TemplateparameterlistContext templateparameterlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TemplateparameterlistContext _localctx = new TemplateparameterlistContext(Context, _parentState);
		TemplateparameterlistContext _prevctx = _localctx;
		int _startState = 342;
		EnterRecursionRule(_localctx, 342, RULE_templateparameterlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2183;
			templateparameter();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2190;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,277,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TemplateparameterlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_templateparameterlist);
					State = 2185;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2186;
					Match(Comma);
					State = 2187;
					templateparameter();
					}
					} 
				}
				State = 2192;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,277,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TemplateparameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeparameterContext typeparameter() {
			return GetRuleContext<TypeparameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterdeclarationContext parameterdeclaration() {
			return GetRuleContext<ParameterdeclarationContext>(0);
		}
		public TemplateparameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateparameter; } }
	}

	[RuleVersion(0)]
	public TemplateparameterContext templateparameter() {
		TemplateparameterContext _localctx = new TemplateparameterContext(Context, State);
		EnterRule(_localctx, 344, RULE_templateparameter);
		try {
			State = 2195;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,278,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2193;
				typeparameter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2194;
				parameterdeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(CPP14Parser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeidContext typeid() {
			return GetRuleContext<TypeidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typename() { return GetToken(CPP14Parser.Typename, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateparameterlistContext templateparameterlist() {
			return GetRuleContext<TemplateparameterlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdexpressionContext idexpression() {
			return GetRuleContext<IdexpressionContext>(0);
		}
		public TypeparameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameter; } }
	}

	[RuleVersion(0)]
	public TypeparameterContext typeparameter() {
		TypeparameterContext _localctx = new TypeparameterContext(Context, State);
		EnterRule(_localctx, 346, RULE_typeparameter);
		int _la;
		try {
			State = 2245;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,288,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2197;
				Match(Class);
				State = 2199;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,279,Context) ) {
				case 1:
					{
					State = 2198;
					Match(Ellipsis);
					}
					break;
				}
				State = 2202;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,280,Context) ) {
				case 1:
					{
					State = 2201;
					Match(Identifier);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2204;
				Match(Class);
				State = 2206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 2205;
					Match(Identifier);
					}
				}

				State = 2208;
				Match(Assign);
				State = 2209;
				typeid();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2210;
				Match(Typename);
				State = 2212;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,282,Context) ) {
				case 1:
					{
					State = 2211;
					Match(Ellipsis);
					}
					break;
				}
				State = 2215;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,283,Context) ) {
				case 1:
					{
					State = 2214;
					Match(Identifier);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2217;
				Match(Typename);
				State = 2219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 2218;
					Match(Identifier);
					}
				}

				State = 2221;
				Match(Assign);
				State = 2222;
				typeid();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2223;
				Match(Template);
				State = 2224;
				Match(Less);
				State = 2225;
				templateparameterlist(0);
				State = 2226;
				Match(Greater);
				State = 2227;
				Match(Class);
				State = 2229;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,285,Context) ) {
				case 1:
					{
					State = 2228;
					Match(Ellipsis);
					}
					break;
				}
				State = 2232;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,286,Context) ) {
				case 1:
					{
					State = 2231;
					Match(Identifier);
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2234;
				Match(Template);
				State = 2235;
				Match(Less);
				State = 2236;
				templateparameterlist(0);
				State = 2237;
				Match(Greater);
				State = 2238;
				Match(Class);
				State = 2240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 2239;
					Match(Identifier);
					}
				}

				State = 2242;
				Match(Assign);
				State = 2243;
				idexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpletemplateidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TemplatenameContext templatename() {
			return GetRuleContext<TemplatenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateargumentlistContext templateargumentlist() {
			return GetRuleContext<TemplateargumentlistContext>(0);
		}
		public SimpletemplateidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpletemplateid; } }
	}

	[RuleVersion(0)]
	public SimpletemplateidContext simpletemplateid() {
		SimpletemplateidContext _localctx = new SimpletemplateidContext(Context, State);
		EnterRule(_localctx, 348, RULE_simpletemplateid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2247;
			templatename();
			State = 2248;
			Match(Less);
			State = 2250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 5541746142274582736L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 3495637736276668025L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 127L) != 0)) {
				{
				State = 2249;
				templateargumentlist(0);
				}
			}

			State = 2252;
			Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorfunctionidContext operatorfunctionid() {
			return GetRuleContext<OperatorfunctionidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateargumentlistContext templateargumentlist() {
			return GetRuleContext<TemplateargumentlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteraloperatoridContext literaloperatorid() {
			return GetRuleContext<LiteraloperatoridContext>(0);
		}
		public TemplateidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateid; } }
	}

	[RuleVersion(0)]
	public TemplateidContext templateid() {
		TemplateidContext _localctx = new TemplateidContext(Context, State);
		EnterRule(_localctx, 350, RULE_templateid);
		int _la;
		try {
			State = 2269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,292,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2254;
				simpletemplateid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2255;
				operatorfunctionid();
				State = 2256;
				Match(Less);
				State = 2258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 5541746142274582736L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 3495637736276668025L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 127L) != 0)) {
					{
					State = 2257;
					templateargumentlist(0);
					}
				}

				State = 2260;
				Match(Greater);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2262;
				literaloperatorid();
				State = 2263;
				Match(Less);
				State = 2265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 5541746142274582736L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 3495637736276668025L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 127L) != 0)) {
					{
					State = 2264;
					templateargumentlist(0);
					}
				}

				State = 2267;
				Match(Greater);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplatenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public TemplatenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templatename; } }
	}

	[RuleVersion(0)]
	public TemplatenameContext templatename() {
		TemplatenameContext _localctx = new TemplatenameContext(Context, State);
		EnterRule(_localctx, 352, RULE_templatename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2271;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateargumentlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TemplateargumentContext templateargument() {
			return GetRuleContext<TemplateargumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateargumentlistContext templateargumentlist() {
			return GetRuleContext<TemplateargumentlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public TemplateargumentlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateargumentlist; } }
	}

	[RuleVersion(0)]
	public TemplateargumentlistContext templateargumentlist() {
		return templateargumentlist(0);
	}

	private TemplateargumentlistContext templateargumentlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TemplateargumentlistContext _localctx = new TemplateargumentlistContext(Context, _parentState);
		TemplateargumentlistContext _prevctx = _localctx;
		int _startState = 354;
		EnterRecursionRule(_localctx, 354, RULE_templateargumentlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2274;
			templateargument();
			State = 2276;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,293,Context) ) {
			case 1:
				{
				State = 2275;
				Match(Ellipsis);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2286;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,295,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TemplateargumentlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_templateargumentlist);
					State = 2278;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2279;
					Match(Comma);
					State = 2280;
					templateargument();
					State = 2282;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,294,Context) ) {
					case 1:
						{
						State = 2281;
						Match(Ellipsis);
						}
						break;
					}
					}
					} 
				}
				State = 2288;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,295,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TemplateargumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeidContext typeid() {
			return GetRuleContext<TypeidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdexpressionContext idexpression() {
			return GetRuleContext<IdexpressionContext>(0);
		}
		public TemplateargumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateargument; } }
	}

	[RuleVersion(0)]
	public TemplateargumentContext templateargument() {
		TemplateargumentContext _localctx = new TemplateargumentContext(Context, State);
		EnterRule(_localctx, 356, RULE_templateargument);
		try {
			State = 2292;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,296,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2289;
				typeid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2290;
				constantexpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2291;
				idexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypenamespecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typename() { return GetToken(CPP14Parser.Typename, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NestednamespecifierContext nestednamespecifier() {
			return GetRuleContext<NestednamespecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpletemplateidContext simpletemplateid() {
			return GetRuleContext<SimpletemplateidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public TypenamespecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typenamespecifier; } }
	}

	[RuleVersion(0)]
	public TypenamespecifierContext typenamespecifier() {
		TypenamespecifierContext _localctx = new TypenamespecifierContext(Context, State);
		EnterRule(_localctx, 358, RULE_typenamespecifier);
		int _la;
		try {
			State = 2305;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,298,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2294;
				Match(Typename);
				State = 2295;
				nestednamespecifier(0);
				State = 2296;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2298;
				Match(Typename);
				State = 2299;
				nestednamespecifier(0);
				State = 2301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Template) {
					{
					State = 2300;
					Match(Template);
					}
				}

				State = 2303;
				simpletemplateid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitinstantiationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extern() { return GetToken(CPP14Parser.Extern, 0); }
		public ExplicitinstantiationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitinstantiation; } }
	}

	[RuleVersion(0)]
	public ExplicitinstantiationContext explicitinstantiation() {
		ExplicitinstantiationContext _localctx = new ExplicitinstantiationContext(Context, State);
		EnterRule(_localctx, 360, RULE_explicitinstantiation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Extern) {
				{
				State = 2307;
				Match(Extern);
				}
			}

			State = 2310;
			Match(Template);
			State = 2311;
			declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitspecializationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ExplicitspecializationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitspecialization; } }
	}

	[RuleVersion(0)]
	public ExplicitspecializationContext explicitspecialization() {
		ExplicitspecializationContext _localctx = new ExplicitspecializationContext(Context, State);
		EnterRule(_localctx, 362, RULE_explicitspecialization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2313;
			Match(Template);
			State = 2314;
			Match(Less);
			State = 2315;
			Match(Greater);
			State = 2316;
			declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryblockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(CPP14Parser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerseqContext handlerseq() {
			return GetRuleContext<HandlerseqContext>(0);
		}
		public TryblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryblock; } }
	}

	[RuleVersion(0)]
	public TryblockContext tryblock() {
		TryblockContext _localctx = new TryblockContext(Context, State);
		EnterRule(_localctx, 364, RULE_tryblock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2318;
			Match(Try);
			State = 2319;
			compoundstatement();
			State = 2320;
			handlerseq();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiontryblockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(CPP14Parser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerseqContext handlerseq() {
			return GetRuleContext<HandlerseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CtorinitializerContext ctorinitializer() {
			return GetRuleContext<CtorinitializerContext>(0);
		}
		public FunctiontryblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiontryblock; } }
	}

	[RuleVersion(0)]
	public FunctiontryblockContext functiontryblock() {
		FunctiontryblockContext _localctx = new FunctiontryblockContext(Context, State);
		EnterRule(_localctx, 366, RULE_functiontryblock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2322;
			Match(Try);
			State = 2324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 2323;
				ctorinitializer();
				}
			}

			State = 2326;
			compoundstatement();
			State = 2327;
			handlerseq();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerseqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HandlerContext handler() {
			return GetRuleContext<HandlerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerseqContext handlerseq() {
			return GetRuleContext<HandlerseqContext>(0);
		}
		public HandlerseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerseq; } }
	}

	[RuleVersion(0)]
	public HandlerseqContext handlerseq() {
		HandlerseqContext _localctx = new HandlerseqContext(Context, State);
		EnterRule(_localctx, 368, RULE_handlerseq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2329;
			handler();
			State = 2331;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,301,Context) ) {
			case 1:
				{
				State = 2330;
				handlerseq();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(CPP14Parser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExceptiondeclarationContext exceptiondeclaration() {
			return GetRuleContext<ExceptiondeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundstatementContext compoundstatement() {
			return GetRuleContext<CompoundstatementContext>(0);
		}
		public HandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handler; } }
	}

	[RuleVersion(0)]
	public HandlerContext handler() {
		HandlerContext _localctx = new HandlerContext(Context, State);
		EnterRule(_localctx, 370, RULE_handler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2333;
			Match(Catch);
			State = 2334;
			Match(LeftParen);
			State = 2335;
			exceptiondeclaration();
			State = 2336;
			Match(RightParen);
			State = 2337;
			compoundstatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptiondeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypespecifierseqContext typespecifierseq() {
			return GetRuleContext<TypespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributespecifierseqContext attributespecifierseq() {
			return GetRuleContext<AttributespecifierseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractdeclaratorContext abstractdeclarator() {
			return GetRuleContext<AbstractdeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public ExceptiondeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptiondeclaration; } }
	}

	[RuleVersion(0)]
	public ExceptiondeclarationContext exceptiondeclaration() {
		ExceptiondeclarationContext _localctx = new ExceptiondeclarationContext(Context, State);
		EnterRule(_localctx, 372, RULE_exceptiondeclaration);
		int _la;
		try {
			State = 2353;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,305,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2339;
					attributespecifierseq(0);
					}
				}

				State = 2342;
				typespecifierseq();
				State = 2343;
				declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Alignas || _la==LeftBracket) {
					{
					State = 2345;
					attributespecifierseq(0);
					}
				}

				State = 2348;
				typespecifierseq();
				State = 2350;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Decltype || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 215512868983045L) != 0)) {
					{
					State = 2349;
					abstractdeclarator();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2352;
				Match(Ellipsis);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(CPP14Parser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentexpressionContext assignmentexpression() {
			return GetRuleContext<AssignmentexpressionContext>(0);
		}
		public ThrowexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwexpression; } }
	}

	[RuleVersion(0)]
	public ThrowexpressionContext throwexpression() {
		ThrowexpressionContext _localctx = new ThrowexpressionContext(Context, State);
		EnterRule(_localctx, 374, RULE_throwexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2355;
			Match(Throw);
			State = 2357;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,306,Context) ) {
			case 1:
				{
				State = 2356;
				assignmentexpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionspecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DynamicexceptionspecificationContext dynamicexceptionspecification() {
			return GetRuleContext<DynamicexceptionspecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoexceptspecificationContext noexceptspecification() {
			return GetRuleContext<NoexceptspecificationContext>(0);
		}
		public ExceptionspecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionspecification; } }
	}

	[RuleVersion(0)]
	public ExceptionspecificationContext exceptionspecification() {
		ExceptionspecificationContext _localctx = new ExceptionspecificationContext(Context, State);
		EnterRule(_localctx, 376, RULE_exceptionspecification);
		try {
			State = 2361;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Throw:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2359;
				dynamicexceptionspecification();
				}
				break;
			case Noexcept:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2360;
				noexceptspecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DynamicexceptionspecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(CPP14Parser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeidlistContext typeidlist() {
			return GetRuleContext<TypeidlistContext>(0);
		}
		public DynamicexceptionspecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamicexceptionspecification; } }
	}

	[RuleVersion(0)]
	public DynamicexceptionspecificationContext dynamicexceptionspecification() {
		DynamicexceptionspecificationContext _localctx = new DynamicexceptionspecificationContext(Context, State);
		EnterRule(_localctx, 378, RULE_dynamicexceptionspecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2363;
			Match(Throw);
			State = 2364;
			Match(LeftParen);
			State = 2366;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 603483179072420032L) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 74309393851613415L) != 0)) {
				{
				State = 2365;
				typeidlist(0);
				}
			}

			State = 2368;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeidlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeidContext typeid() {
			return GetRuleContext<TypeidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeidlistContext typeidlist() {
			return GetRuleContext<TypeidlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public TypeidlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeidlist; } }
	}

	[RuleVersion(0)]
	public TypeidlistContext typeidlist() {
		return typeidlist(0);
	}

	private TypeidlistContext typeidlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeidlistContext _localctx = new TypeidlistContext(Context, _parentState);
		TypeidlistContext _prevctx = _localctx;
		int _startState = 380;
		EnterRecursionRule(_localctx, 380, RULE_typeidlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2371;
			typeid();
			State = 2373;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,309,Context) ) {
			case 1:
				{
				State = 2372;
				Match(Ellipsis);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2383;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,311,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeidlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_typeidlist);
					State = 2375;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2376;
					Match(Comma);
					State = 2377;
					typeid();
					State = 2379;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,310,Context) ) {
					case 1:
						{
						State = 2378;
						Match(Ellipsis);
						}
						break;
					}
					}
					} 
				}
				State = 2385;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,311,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NoexceptspecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Noexcept() { return GetToken(CPP14Parser.Noexcept, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantexpressionContext constantexpression() {
			return GetRuleContext<ConstantexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public NoexceptspecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noexceptspecification; } }
	}

	[RuleVersion(0)]
	public NoexceptspecificationContext noexceptspecification() {
		NoexceptspecificationContext _localctx = new NoexceptspecificationContext(Context, State);
		EnterRule(_localctx, 382, RULE_noexceptspecification);
		try {
			State = 2392;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,312,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2386;
				Match(Noexcept);
				State = 2387;
				Match(LeftParen);
				State = 2388;
				constantexpression();
				State = 2389;
				Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2391;
				Match(Noexcept);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightShiftContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Greater() { return GetTokens(CPP14Parser.Greater); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater(int i) {
			return GetToken(CPP14Parser.Greater, i);
		}
		public RightShiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightShift; } }
	}

	[RuleVersion(0)]
	public RightShiftContext rightShift() {
		RightShiftContext _localctx = new RightShiftContext(Context, State);
		EnterRule(_localctx, 384, RULE_rightShift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2394;
			Match(Greater);
			State = 2395;
			Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightShiftAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Greater() { return GetTokens(CPP14Parser.Greater); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater(int i) {
			return GetToken(CPP14Parser.Greater, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public RightShiftAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightShiftAssign; } }
	}

	[RuleVersion(0)]
	public RightShiftAssignContext rightShiftAssign() {
		RightShiftAssignContext _localctx = new RightShiftAssignContext(Context, State);
		EnterRule(_localctx, 386, RULE_rightShiftAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2397;
			Match(Greater);
			State = 2398;
			Match(Greater);
			State = 2399;
			Match(Assign);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(CPP14Parser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(CPP14Parser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(CPP14Parser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(CPP14Parser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(CPP14Parser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div() { return GetToken(CPP14Parser.Div, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod() { return GetToken(CPP14Parser.Mod, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(CPP14Parser.Caret, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(CPP14Parser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(CPP14Parser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(CPP14Parser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(CPP14Parser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(CPP14Parser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StarAssign() { return GetToken(CPP14Parser.StarAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivAssign() { return GetToken(CPP14Parser.DivAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModAssign() { return GetToken(CPP14Parser.ModAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XorAssign() { return GetToken(CPP14Parser.XorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAssign() { return GetToken(CPP14Parser.AndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrAssign() { return GetToken(CPP14Parser.OrAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShift() { return GetToken(CPP14Parser.LeftShift, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RightShiftContext rightShift() {
			return GetRuleContext<RightShiftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RightShiftAssignContext rightShiftAssign() {
			return GetRuleContext<RightShiftAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftAssign() { return GetToken(CPP14Parser.LeftShiftAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(CPP14Parser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual() { return GetToken(CPP14Parser.NotEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessEqual() { return GetToken(CPP14Parser.LessEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterEqual() { return GetToken(CPP14Parser.GreaterEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd() { return GetToken(CPP14Parser.AndAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrOr() { return GetToken(CPP14Parser.OrOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(CPP14Parser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(CPP14Parser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ArrowStar() { return GetToken(CPP14Parser.ArrowStar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(CPP14Parser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 388, RULE_operator);
		try {
			State = 2449;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,313,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2401;
				Match(New);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2402;
				Match(Delete);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2403;
				Match(New);
				State = 2404;
				Match(LeftBracket);
				State = 2405;
				Match(RightBracket);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2406;
				Match(Delete);
				State = 2407;
				Match(LeftBracket);
				State = 2408;
				Match(RightBracket);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2409;
				Match(Plus);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2410;
				Match(Minus);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2411;
				Match(Star);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2412;
				Match(Div);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2413;
				Match(Mod);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2414;
				Match(Caret);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2415;
				Match(And);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2416;
				Match(Or);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2417;
				Match(Tilde);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2418;
				Match(Not);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2419;
				Match(Assign);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2420;
				Match(Less);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2421;
				Match(Greater);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2422;
				Match(PlusAssign);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2423;
				Match(MinusAssign);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2424;
				Match(StarAssign);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2425;
				Match(DivAssign);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 2426;
				Match(ModAssign);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 2427;
				Match(XorAssign);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 2428;
				Match(AndAssign);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 2429;
				Match(OrAssign);
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 2430;
				Match(LeftShift);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 2431;
				rightShift();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 2432;
				rightShiftAssign();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 2433;
				Match(LeftShiftAssign);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 2434;
				Match(Equal);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 2435;
				Match(NotEqual);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 2436;
				Match(LessEqual);
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 2437;
				Match(GreaterEqual);
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 2438;
				Match(AndAnd);
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 2439;
				Match(OrOr);
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 2440;
				Match(PlusPlus);
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 2441;
				Match(MinusMinus);
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 2442;
				Match(Comma);
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 2443;
				Match(ArrowStar);
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 2444;
				Match(Arrow);
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 2445;
				Match(LeftParen);
				State = 2446;
				Match(RightParen);
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 2447;
				Match(LeftBracket);
				State = 2448;
				Match(RightBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integerliteral() { return GetToken(CPP14Parser.Integerliteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Characterliteral() { return GetToken(CPP14Parser.Characterliteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Floatingliteral() { return GetToken(CPP14Parser.Floatingliteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Stringliteral() { return GetToken(CPP14Parser.Stringliteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanliteralContext booleanliteral() {
			return GetRuleContext<BooleanliteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerliteralContext pointerliteral() {
			return GetRuleContext<PointerliteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserdefinedliteralContext userdefinedliteral() {
			return GetRuleContext<UserdefinedliteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 390, RULE_literal);
		try {
			State = 2458;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integerliteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2451;
				Match(Integerliteral);
				}
				break;
			case Characterliteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2452;
				Match(Characterliteral);
				}
				break;
			case Floatingliteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2453;
				Match(Floatingliteral);
				}
				break;
			case Stringliteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2454;
				Match(Stringliteral);
				}
				break;
			case False:
			case True:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2455;
				booleanliteral();
				}
				break;
			case Nullptr:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2456;
				pointerliteral();
				}
				break;
			case Userdefinedintegerliteral:
			case Userdefinedfloatingliteral:
			case Userdefinedstringliteral:
			case Userdefinedcharacterliteral:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2457;
				userdefinedliteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanliteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(CPP14Parser.False, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(CPP14Parser.True, 0); }
		public BooleanliteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanliteral; } }
	}

	[RuleVersion(0)]
	public BooleanliteralContext booleanliteral() {
		BooleanliteralContext _localctx = new BooleanliteralContext(Context, State);
		EnterRule(_localctx, 392, RULE_booleanliteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2460;
			_la = TokenStream.LA(1);
			if ( !(_la==False || _la==True) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerliteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Nullptr() { return GetToken(CPP14Parser.Nullptr, 0); }
		public PointerliteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerliteral; } }
	}

	[RuleVersion(0)]
	public PointerliteralContext pointerliteral() {
		PointerliteralContext _localctx = new PointerliteralContext(Context, State);
		EnterRule(_localctx, 394, RULE_pointerliteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2462;
			Match(Nullptr);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserdefinedliteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Userdefinedintegerliteral() { return GetToken(CPP14Parser.Userdefinedintegerliteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Userdefinedfloatingliteral() { return GetToken(CPP14Parser.Userdefinedfloatingliteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Userdefinedstringliteral() { return GetToken(CPP14Parser.Userdefinedstringliteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Userdefinedcharacterliteral() { return GetToken(CPP14Parser.Userdefinedcharacterliteral, 0); }
		public UserdefinedliteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userdefinedliteral; } }
	}

	[RuleVersion(0)]
	public UserdefinedliteralContext userdefinedliteral() {
		UserdefinedliteralContext _localctx = new UserdefinedliteralContext(Context, State);
		EnterRule(_localctx, 396, RULE_userdefinedliteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2464;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 136)) & ~0x3f) == 0 && ((1L << (_la - 136)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return nestednamespecifier_sempred((NestednamespecifierContext)_localctx, predIndex);
		case 10: return capturelist_sempred((CapturelistContext)_localctx, predIndex);
		case 15: return postfixexpression_sempred((PostfixexpressionContext)_localctx, predIndex);
		case 24: return noptrnewdeclarator_sempred((NoptrnewdeclaratorContext)_localctx, predIndex);
		case 29: return pmexpression_sempred((PmexpressionContext)_localctx, predIndex);
		case 30: return multiplicativeexpression_sempred((MultiplicativeexpressionContext)_localctx, predIndex);
		case 31: return additiveexpression_sempred((AdditiveexpressionContext)_localctx, predIndex);
		case 32: return shiftexpression_sempred((ShiftexpressionContext)_localctx, predIndex);
		case 33: return relationalexpression_sempred((RelationalexpressionContext)_localctx, predIndex);
		case 34: return equalityexpression_sempred((EqualityexpressionContext)_localctx, predIndex);
		case 35: return andexpression_sempred((AndexpressionContext)_localctx, predIndex);
		case 36: return exclusiveorexpression_sempred((ExclusiveorexpressionContext)_localctx, predIndex);
		case 37: return inclusiveorexpression_sempred((InclusiveorexpressionContext)_localctx, predIndex);
		case 38: return logicalandexpression_sempred((LogicalandexpressionContext)_localctx, predIndex);
		case 39: return logicalorexpression_sempred((LogicalorexpressionContext)_localctx, predIndex);
		case 43: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 49: return statementseq_sempred((StatementseqContext)_localctx, predIndex);
		case 58: return declarationseq_sempred((DeclarationseqContext)_localctx, predIndex);
		case 85: return enumeratorlist_sempred((EnumeratorlistContext)_localctx, predIndex);
		case 103: return attributespecifierseq_sempred((AttributespecifierseqContext)_localctx, predIndex);
		case 106: return attributelist_sempred((AttributelistContext)_localctx, predIndex);
		case 112: return balancedtokenseq_sempred((BalancedtokenseqContext)_localctx, predIndex);
		case 114: return initdeclaratorlist_sempred((InitdeclaratorlistContext)_localctx, predIndex);
		case 118: return noptrdeclarator_sempred((NoptrdeclaratorContext)_localctx, predIndex);
		case 129: return noptrabstractdeclarator_sempred((NoptrabstractdeclaratorContext)_localctx, predIndex);
		case 131: return noptrabstractpackdeclarator_sempred((NoptrabstractpackdeclaratorContext)_localctx, predIndex);
		case 133: return parameterdeclarationlist_sempred((ParameterdeclarationlistContext)_localctx, predIndex);
		case 140: return initializerlist_sempred((InitializerlistContext)_localctx, predIndex);
		case 150: return memberdeclaratorlist_sempred((MemberdeclaratorlistContext)_localctx, predIndex);
		case 152: return virtspecifierseq_sempred((VirtspecifierseqContext)_localctx, predIndex);
		case 156: return basespecifierlist_sempred((BasespecifierlistContext)_localctx, predIndex);
		case 171: return templateparameterlist_sempred((TemplateparameterlistContext)_localctx, predIndex);
		case 177: return templateargumentlist_sempred((TemplateargumentlistContext)_localctx, predIndex);
		case 190: return typeidlist_sempred((TypeidlistContext)_localctx, predIndex);
		}
		return true;
	}
	private bool nestednamespecifier_sempred(NestednamespecifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool capturelist_sempred(CapturelistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool postfixexpression_sempred(PostfixexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 19);
		case 4: return Precpred(Context, 18);
		case 5: return Precpred(Context, 17);
		case 6: return Precpred(Context, 12);
		case 7: return Precpred(Context, 11);
		case 8: return Precpred(Context, 10);
		case 9: return Precpred(Context, 9);
		case 10: return Precpred(Context, 8);
		case 11: return Precpred(Context, 7);
		}
		return true;
	}
	private bool noptrnewdeclarator_sempred(NoptrnewdeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool pmexpression_sempred(PmexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicativeexpression_sempred(MultiplicativeexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 3);
		case 16: return Precpred(Context, 2);
		case 17: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveexpression_sempred(AdditiveexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return Precpred(Context, 2);
		case 19: return Precpred(Context, 1);
		}
		return true;
	}
	private bool shiftexpression_sempred(ShiftexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return Precpred(Context, 2);
		case 21: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relationalexpression_sempred(RelationalexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return Precpred(Context, 4);
		case 23: return Precpred(Context, 3);
		case 24: return Precpred(Context, 2);
		case 25: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityexpression_sempred(EqualityexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26: return Precpred(Context, 2);
		case 27: return Precpred(Context, 1);
		}
		return true;
	}
	private bool andexpression_sempred(AndexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 28: return Precpred(Context, 1);
		}
		return true;
	}
	private bool exclusiveorexpression_sempred(ExclusiveorexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29: return Precpred(Context, 1);
		}
		return true;
	}
	private bool inclusiveorexpression_sempred(InclusiveorexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalandexpression_sempred(LogicalandexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalorexpression_sempred(LogicalorexpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33: return Precpred(Context, 1);
		}
		return true;
	}
	private bool statementseq_sempred(StatementseqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34: return Precpred(Context, 1);
		}
		return true;
	}
	private bool declarationseq_sempred(DeclarationseqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return Precpred(Context, 1);
		}
		return true;
	}
	private bool enumeratorlist_sempred(EnumeratorlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36: return Precpred(Context, 1);
		}
		return true;
	}
	private bool attributespecifierseq_sempred(AttributespecifierseqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37: return Precpred(Context, 1);
		}
		return true;
	}
	private bool attributelist_sempred(AttributelistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return Precpred(Context, 3);
		case 39: return Precpred(Context, 1);
		}
		return true;
	}
	private bool balancedtokenseq_sempred(BalancedtokenseqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40: return Precpred(Context, 1);
		}
		return true;
	}
	private bool initdeclaratorlist_sempred(InitdeclaratorlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return Precpred(Context, 1);
		}
		return true;
	}
	private bool noptrdeclarator_sempred(NoptrdeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42: return Precpred(Context, 3);
		case 43: return Precpred(Context, 2);
		}
		return true;
	}
	private bool noptrabstractdeclarator_sempred(NoptrabstractdeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 44: return Precpred(Context, 5);
		case 45: return Precpred(Context, 3);
		}
		return true;
	}
	private bool noptrabstractpackdeclarator_sempred(NoptrabstractpackdeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 46: return Precpred(Context, 3);
		case 47: return Precpred(Context, 2);
		}
		return true;
	}
	private bool parameterdeclarationlist_sempred(ParameterdeclarationlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 48: return Precpred(Context, 1);
		}
		return true;
	}
	private bool initializerlist_sempred(InitializerlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 49: return Precpred(Context, 1);
		}
		return true;
	}
	private bool memberdeclaratorlist_sempred(MemberdeclaratorlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50: return Precpred(Context, 1);
		}
		return true;
	}
	private bool virtspecifierseq_sempred(VirtspecifierseqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 51: return Precpred(Context, 1);
		}
		return true;
	}
	private bool basespecifierlist_sempred(BasespecifierlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52: return Precpred(Context, 1);
		}
		return true;
	}
	private bool templateparameterlist_sempred(TemplateparameterlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53: return Precpred(Context, 1);
		}
		return true;
	}
	private bool templateargumentlist_sempred(TemplateargumentlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54: return Precpred(Context, 1);
		}
		return true;
	}
	private bool typeidlist_sempred(TypeidlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,143,2467,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,1,0,3,0,400,8,0,1,0,1,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,412,8,1,1,2,1,2,3,2,416,8,2,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,427,8,3,1,4,1,4,3,4,431,8,4,1,4,1,
		4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,446,8,5,1,5,1,5,1,5,
		1,5,1,5,3,5,453,8,5,1,5,1,5,1,5,5,5,458,8,5,10,5,12,5,461,9,5,1,6,1,6,
		3,6,465,8,6,1,6,1,6,1,7,1,7,3,7,471,8,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,
		8,3,8,481,8,8,1,9,1,9,1,10,1,10,1,10,3,10,488,8,10,1,10,1,10,1,10,1,10,
		3,10,494,8,10,5,10,496,8,10,10,10,12,10,499,9,10,1,11,1,11,3,11,503,8,
		11,1,12,1,12,1,12,1,12,3,12,509,8,12,1,13,1,13,1,13,1,13,1,13,3,13,516,
		8,13,1,14,1,14,1,14,1,14,3,14,522,8,14,1,14,3,14,525,8,14,1,14,3,14,528,
		8,14,1,14,3,14,531,8,14,1,15,1,15,1,15,1,15,1,15,3,15,538,8,15,1,15,1,
		15,1,15,1,15,1,15,3,15,545,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
		3,15,597,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,3,15,612,8,15,1,15,1,15,1,15,1,15,3,15,618,8,15,1,15,1,15,1,15,
		1,15,3,15,624,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,5,15,637,8,15,10,15,12,15,640,9,15,1,16,1,16,1,17,3,17,645,8,17,1,17,
		1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,660,8,
		17,1,17,1,17,1,17,1,17,3,17,666,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
		1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
		1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,696,8,18,1,19,1,19,1,20,3,20,701,
		8,20,1,20,1,20,3,20,705,8,20,1,20,1,20,3,20,709,8,20,1,20,3,20,712,8,20,
		1,20,1,20,3,20,716,8,20,1,20,1,20,1,20,1,20,3,20,722,8,20,3,20,724,8,20,
		1,21,1,21,1,21,1,21,1,22,1,22,3,22,732,8,22,1,23,1,23,3,23,736,8,23,1,
		23,3,23,739,8,23,1,24,1,24,1,24,1,24,1,24,3,24,746,8,24,1,24,1,24,1,24,
		1,24,1,24,3,24,753,8,24,5,24,755,8,24,10,24,12,24,758,9,24,1,25,1,25,3,
		25,762,8,25,1,25,1,25,3,25,766,8,25,1,26,3,26,769,8,26,1,26,1,26,1,26,
		3,26,774,8,26,1,26,1,26,1,26,1,26,3,26,780,8,26,1,27,1,27,1,27,1,27,1,
		27,1,28,1,28,1,28,1,28,1,28,1,28,3,28,793,8,28,1,29,1,29,1,29,1,29,1,29,
		1,29,1,29,1,29,1,29,5,29,804,8,29,10,29,12,29,807,9,29,1,30,1,30,1,30,
		1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,5,30,821,8,30,10,30,12,30,
		824,9,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,5,31,835,8,31,10,
		31,12,31,838,9,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,
		32,850,8,32,10,32,12,32,853,9,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
		33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,5,33,870,8,33,10,33,12,33,873,9,
		33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,5,34,884,8,34,10,34,12,
		34,887,9,34,1,35,1,35,1,35,1,35,1,35,1,35,5,35,895,8,35,10,35,12,35,898,
		9,35,1,36,1,36,1,36,1,36,1,36,1,36,5,36,906,8,36,10,36,12,36,909,9,36,
		1,37,1,37,1,37,1,37,1,37,1,37,5,37,917,8,37,10,37,12,37,920,9,37,1,38,
		1,38,1,38,1,38,1,38,1,38,5,38,928,8,38,10,38,12,38,931,9,38,1,39,1,39,
		1,39,1,39,1,39,1,39,5,39,939,8,39,10,39,12,39,942,9,39,1,40,1,40,1,40,
		1,40,1,40,1,40,1,40,3,40,951,8,40,1,41,1,41,1,41,1,41,1,41,1,41,3,41,959,
		8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,972,8,
		42,1,43,1,43,1,43,1,43,1,43,1,43,5,43,980,8,43,10,43,12,43,983,9,43,1,
		44,1,44,1,45,1,45,3,45,989,8,45,1,45,1,45,3,45,993,8,45,1,45,1,45,3,45,
		997,8,45,1,45,1,45,3,45,1001,8,45,1,45,1,45,3,45,1005,8,45,1,45,1,45,1,
		45,3,45,1010,8,45,1,45,3,45,1013,8,45,1,46,3,46,1016,8,46,1,46,1,46,1,
		46,1,46,3,46,1022,8,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1030,8,46,1,
		46,1,46,1,46,3,46,1035,8,46,1,47,3,47,1038,8,47,1,47,1,47,1,48,1,48,3,
		48,1044,8,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,5,49,1053,8,49,10,49,12,
		49,1056,9,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
		50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1078,8,50,1,51,1,51,3,
		51,1082,8,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1090,8,51,1,51,1,51,1,
		51,1,51,3,51,1096,8,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
		52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,1116,8,52,1,52,1,52,3,
		52,1120,8,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,
		52,1133,8,52,1,53,1,53,3,53,1137,8,53,1,54,3,54,1140,8,54,1,54,1,54,1,
		54,1,55,1,55,3,55,1147,8,55,1,56,1,56,1,56,1,56,1,56,1,56,3,56,1155,8,
		56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,1165,8,56,1,57,1,57,1,
		58,1,58,1,58,1,58,1,58,5,58,1174,8,58,10,58,12,58,1177,9,58,1,59,1,59,
		1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,1188,8,59,1,60,1,60,1,60,1,60,
		1,60,1,60,1,60,1,60,3,60,1198,8,60,1,61,1,61,1,61,3,61,1203,8,61,1,61,
		1,61,1,61,1,61,1,62,3,62,1210,8,62,1,62,3,62,1213,8,62,1,62,1,62,1,62,
		3,62,1218,8,62,1,62,1,62,1,62,3,62,1223,8,62,1,63,1,63,1,63,1,63,1,63,
		1,63,1,63,1,63,1,64,1,64,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,
		3,66,1244,8,66,1,67,1,67,3,67,1248,8,67,1,67,1,67,1,67,3,67,1253,8,67,
		1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,1,71,3,71,1264,8,71,1,72,1,72,
		1,72,1,72,3,72,1270,8,72,1,73,1,73,3,73,1274,8,73,1,73,1,73,1,73,3,73,
		1279,8,73,1,74,1,74,3,74,1283,8,74,1,74,1,74,1,74,3,74,1288,8,74,1,75,
		3,75,1291,8,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,
		1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,1313,8,75,1,76,1,76,
		1,76,1,76,3,76,1319,8,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
		3,77,1330,8,77,1,78,1,78,3,78,1334,8,78,1,78,3,78,1337,8,78,1,78,1,78,
		1,78,1,78,1,78,1,78,1,78,1,78,3,78,1347,8,78,1,78,1,78,1,78,1,78,3,78,
		1353,8,78,1,78,3,78,1356,8,78,1,79,1,79,1,80,1,80,1,80,3,80,1363,8,80,
		1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1373,8,80,1,81,1,81,3,81,
		1377,8,81,1,81,3,81,1380,8,81,1,81,3,81,1383,8,81,1,81,1,81,3,81,1387,
		8,81,1,81,1,81,1,81,3,81,1392,8,81,3,81,1394,8,81,1,82,1,82,3,82,1398,
		8,82,1,82,1,82,3,82,1402,8,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,3,83,
		1411,8,83,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,1,85,5,85,1422,8,85,
		10,85,12,85,1425,9,85,1,86,1,86,1,86,1,86,1,86,3,86,1432,8,86,1,87,1,87,
		1,88,1,88,3,88,1438,8,88,1,89,1,89,1,90,1,90,3,90,1444,8,90,1,91,1,91,
		3,91,1448,8,91,1,92,3,92,1451,8,92,1,92,1,92,1,92,1,92,1,92,1,92,1,93,
		3,93,1460,8,93,1,93,1,93,1,93,1,93,1,93,1,93,1,94,3,94,1469,8,94,1,94,
		1,94,1,94,1,94,1,94,1,95,3,95,1477,8,95,1,96,1,96,1,97,1,97,1,97,1,97,
		1,97,1,97,1,98,3,98,1488,8,98,1,98,1,98,1,99,1,99,3,99,1494,8,99,1,99,
		1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1505,8,99,1,100,3,100,1508,
		8,100,1,100,1,100,1,100,3,100,1513,8,100,1,100,1,100,1,100,1,101,1,101,
		1,101,1,101,1,101,1,101,1,102,1,102,1,102,1,102,3,102,1528,8,102,1,102,
		1,102,1,102,1,102,3,102,1534,8,102,1,103,1,103,1,103,1,103,1,103,5,103,
		1541,8,103,10,103,12,103,1544,9,103,1,104,1,104,1,104,1,104,1,104,1,104,
		1,104,3,104,1553,8,104,1,105,1,105,1,105,1,105,3,105,1559,8,105,1,105,
		1,105,1,105,1,105,1,105,1,105,3,105,1567,8,105,1,105,1,105,3,105,1571,
		8,105,1,106,1,106,3,106,1575,8,106,1,106,1,106,1,106,3,106,1580,8,106,
		1,106,1,106,1,106,3,106,1585,8,106,1,106,1,106,1,106,1,106,1,106,5,106,
		1592,8,106,10,106,12,106,1595,9,106,1,107,1,107,3,107,1599,8,107,1,108,
		1,108,3,108,1603,8,108,1,109,1,109,1,109,1,109,1,110,1,110,1,111,1,111,
		1,111,1,111,1,112,1,112,3,112,1617,8,112,1,112,1,112,5,112,1621,8,112,
		10,112,12,112,1624,9,112,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
		1,113,1,113,1,113,1,113,3,113,1638,8,113,1,114,1,114,1,114,1,114,1,114,
		1,114,5,114,1646,8,114,10,114,12,114,1649,9,114,1,115,1,115,3,115,1653,
		8,115,1,116,1,116,1,116,1,116,1,116,3,116,1660,8,116,1,117,1,117,1,117,
		1,117,3,117,1666,8,117,1,118,1,118,1,118,3,118,1671,8,118,1,118,1,118,
		1,118,1,118,3,118,1677,8,118,1,118,1,118,1,118,1,118,1,118,3,118,1684,
		8,118,1,118,1,118,3,118,1688,8,118,5,118,1690,8,118,10,118,12,118,1693,
		9,118,1,119,1,119,1,119,1,119,3,119,1699,8,119,1,119,3,119,1702,8,119,
		1,119,3,119,1705,8,119,1,119,3,119,1708,8,119,1,120,1,120,1,120,3,120,
		1713,8,120,1,121,1,121,3,121,1717,8,121,1,121,3,121,1720,8,121,1,121,1,
		121,3,121,1724,8,121,1,121,1,121,3,121,1728,8,121,1,121,1,121,1,121,3,
		121,1733,8,121,1,121,3,121,1736,8,121,3,121,1738,8,121,1,122,1,122,3,122,
		1742,8,122,1,123,1,123,1,124,1,124,1,125,3,125,1749,8,125,1,125,1,125,
		1,126,1,126,3,126,1755,8,126,1,127,1,127,3,127,1759,8,127,1,127,1,127,
		1,127,1,127,3,127,1765,8,127,1,128,1,128,1,128,3,128,1770,8,128,3,128,
		1772,8,128,1,129,1,129,1,129,1,129,3,129,1778,8,129,1,129,1,129,3,129,
		1782,8,129,1,129,1,129,1,129,1,129,3,129,1788,8,129,1,129,1,129,1,129,
		1,129,1,129,3,129,1795,8,129,1,129,1,129,3,129,1799,8,129,5,129,1801,8,
		129,10,129,12,129,1804,9,129,1,130,1,130,1,130,1,130,3,130,1810,8,130,
		1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,3,131,1820,8,131,1,131,
		1,131,3,131,1824,8,131,5,131,1826,8,131,10,131,12,131,1829,9,131,1,132,
		3,132,1832,8,132,1,132,3,132,1835,8,132,1,132,1,132,1,132,1,132,3,132,
		1841,8,132,1,133,1,133,1,133,1,133,1,133,1,133,5,133,1849,8,133,10,133,
		12,133,1852,9,133,1,134,3,134,1855,8,134,1,134,1,134,1,134,1,134,3,134,
		1861,8,134,1,134,1,134,1,134,1,134,1,134,1,134,3,134,1869,8,134,1,134,
		1,134,3,134,1873,8,134,1,134,3,134,1876,8,134,1,134,1,134,3,134,1880,8,
		134,1,134,1,134,1,134,3,134,1885,8,134,1,135,3,135,1888,8,135,1,135,3,
		135,1891,8,135,1,135,1,135,3,135,1895,8,135,1,135,1,135,1,136,3,136,1900,
		8,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,3,136,1910,8,136,
		1,137,1,137,1,137,1,137,1,137,3,137,1917,8,137,1,138,1,138,1,138,3,138,
		1922,8,138,1,139,1,139,3,139,1926,8,139,1,140,1,140,1,140,3,140,1931,8,
		140,1,140,1,140,1,140,1,140,3,140,1937,8,140,5,140,1939,8,140,10,140,12,
		140,1942,9,140,1,141,1,141,1,141,3,141,1947,8,141,1,141,1,141,1,141,1,
		141,3,141,1953,8,141,1,142,1,142,3,142,1957,8,142,1,143,1,143,1,143,3,
		143,1962,8,143,1,143,1,143,1,144,1,144,3,144,1968,8,144,1,144,1,144,3,
		144,1972,8,144,1,144,3,144,1975,8,144,1,144,1,144,3,144,1979,8,144,1,144,
		3,144,1982,8,144,3,144,1984,8,144,1,145,3,145,1987,8,145,1,145,1,145,1,
		146,1,146,1,147,1,147,1,148,1,148,3,148,1997,8,148,1,148,1,148,1,148,3,
		148,2002,8,148,3,148,2004,8,148,1,149,3,149,2007,8,149,1,149,3,149,2010,
		8,149,1,149,3,149,2013,8,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,
		3,149,2022,8,149,1,150,1,150,1,150,1,150,1,150,1,150,5,150,2030,8,150,
		10,150,12,150,2033,9,150,1,151,1,151,3,151,2037,8,151,1,151,3,151,2040,
		8,151,1,151,1,151,3,151,2044,8,151,1,151,3,151,2047,8,151,1,151,3,151,
		2050,8,151,1,151,1,151,3,151,2054,8,151,1,152,1,152,1,152,1,152,1,152,
		5,152,2061,8,152,10,152,12,152,2064,9,152,1,153,1,153,1,154,1,154,1,154,
		1,155,1,155,1,155,1,156,1,156,1,156,3,156,2077,8,156,1,156,1,156,1,156,
		1,156,3,156,2083,8,156,5,156,2085,8,156,10,156,12,156,2088,9,156,1,157,
		3,157,2091,8,157,1,157,1,157,3,157,2095,8,157,1,157,1,157,3,157,2099,8,
		157,1,157,1,157,3,157,2103,8,157,1,157,1,157,3,157,2107,8,157,1,157,1,
		157,3,157,2111,8,157,1,158,3,158,2114,8,158,1,158,1,158,3,158,2118,8,158,
		1,159,1,159,1,160,1,160,1,161,1,161,1,161,1,162,1,162,3,162,2129,8,162,
		1,163,1,163,3,163,2133,8,163,1,164,1,164,1,164,1,165,1,165,3,165,2140,
		8,165,1,165,1,165,3,165,2144,8,165,1,165,1,165,1,165,3,165,2149,8,165,
		1,166,1,166,1,166,3,166,2154,8,166,1,166,1,166,1,166,1,166,1,166,3,166,
		2161,8,166,1,167,1,167,3,167,2165,8,167,1,168,1,168,1,168,1,169,1,169,
		1,169,1,169,1,169,3,169,2175,8,169,1,170,1,170,1,170,1,170,1,170,1,170,
		1,171,1,171,1,171,1,171,1,171,1,171,5,171,2189,8,171,10,171,12,171,2192,
		9,171,1,172,1,172,3,172,2196,8,172,1,173,1,173,3,173,2200,8,173,1,173,
		3,173,2203,8,173,1,173,1,173,3,173,2207,8,173,1,173,1,173,1,173,1,173,
		3,173,2213,8,173,1,173,3,173,2216,8,173,1,173,1,173,3,173,2220,8,173,1,
		173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,3,173,2230,8,173,1,173,3,
		173,2233,8,173,1,173,1,173,1,173,1,173,1,173,1,173,3,173,2241,8,173,1,
		173,1,173,1,173,3,173,2246,8,173,1,174,1,174,1,174,3,174,2251,8,174,1,
		174,1,174,1,175,1,175,1,175,1,175,3,175,2259,8,175,1,175,1,175,1,175,1,
		175,1,175,3,175,2266,8,175,1,175,1,175,3,175,2270,8,175,1,176,1,176,1,
		177,1,177,1,177,3,177,2277,8,177,1,177,1,177,1,177,1,177,3,177,2283,8,
		177,5,177,2285,8,177,10,177,12,177,2288,9,177,1,178,1,178,1,178,3,178,
		2293,8,178,1,179,1,179,1,179,1,179,1,179,1,179,1,179,3,179,2302,8,179,
		1,179,1,179,3,179,2306,8,179,1,180,3,180,2309,8,180,1,180,1,180,1,180,
		1,181,1,181,1,181,1,181,1,181,1,182,1,182,1,182,1,182,1,183,1,183,3,183,
		2325,8,183,1,183,1,183,1,183,1,184,1,184,3,184,2332,8,184,1,185,1,185,
		1,185,1,185,1,185,1,185,1,186,3,186,2341,8,186,1,186,1,186,1,186,1,186,
		3,186,2347,8,186,1,186,1,186,3,186,2351,8,186,1,186,3,186,2354,8,186,1,
		187,1,187,3,187,2358,8,187,1,188,1,188,3,188,2362,8,188,1,189,1,189,1,
		189,3,189,2367,8,189,1,189,1,189,1,190,1,190,1,190,3,190,2374,8,190,1,
		190,1,190,1,190,1,190,3,190,2380,8,190,5,190,2382,8,190,10,190,12,190,
		2385,9,190,1,191,1,191,1,191,1,191,1,191,1,191,3,191,2393,8,191,1,192,
		1,192,1,192,1,193,1,193,1,193,1,193,1,194,1,194,1,194,1,194,1,194,1,194,
		1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,
		1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,
		1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,
		1,194,1,194,1,194,1,194,1,194,1,194,3,194,2450,8,194,1,195,1,195,1,195,
		1,195,1,195,1,195,1,195,3,195,2459,8,195,1,196,1,196,1,197,1,197,1,198,
		1,198,1,198,0,34,10,20,30,48,58,60,62,64,66,68,70,72,74,76,78,86,98,116,
		170,206,212,224,228,236,258,262,266,280,300,304,312,342,354,380,199,0,
		2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
		52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
		100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
		136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
		172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,
		208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,
		244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,
		280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,
		316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,
		352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,
		388,390,392,394,396,0,11,2,0,90,90,94,94,2,0,84,86,90,93,5,0,29,29,40,
		40,50,50,56,56,63,63,3,0,27,27,37,37,73,73,2,0,15,15,75,75,2,0,90,90,111,
		111,3,0,14,14,59,59,70,70,2,0,31,31,46,46,1,0,47,49,2,0,30,30,65,65,1,
		0,136,139,2756,0,399,1,0,0,0,2,411,1,0,0,0,4,415,1,0,0,0,6,426,1,0,0,0,
		8,428,1,0,0,0,10,445,1,0,0,0,12,462,1,0,0,0,14,468,1,0,0,0,16,480,1,0,
		0,0,18,482,1,0,0,0,20,484,1,0,0,0,22,502,1,0,0,0,24,508,1,0,0,0,26,515,
		1,0,0,0,28,517,1,0,0,0,30,596,1,0,0,0,32,641,1,0,0,0,34,665,1,0,0,0,36,
		695,1,0,0,0,38,697,1,0,0,0,40,723,1,0,0,0,42,725,1,0,0,0,44,729,1,0,0,
		0,46,738,1,0,0,0,48,740,1,0,0,0,50,765,1,0,0,0,52,779,1,0,0,0,54,781,1,
		0,0,0,56,792,1,0,0,0,58,794,1,0,0,0,60,808,1,0,0,0,62,825,1,0,0,0,64,839,
		1,0,0,0,66,854,1,0,0,0,68,874,1,0,0,0,70,888,1,0,0,0,72,899,1,0,0,0,74,
		910,1,0,0,0,76,921,1,0,0,0,78,932,1,0,0,0,80,950,1,0,0,0,82,958,1,0,0,
		0,84,971,1,0,0,0,86,973,1,0,0,0,88,984,1,0,0,0,90,1012,1,0,0,0,92,1034,
		1,0,0,0,94,1037,1,0,0,0,96,1041,1,0,0,0,98,1047,1,0,0,0,100,1077,1,0,0,
		0,102,1095,1,0,0,0,104,1132,1,0,0,0,106,1136,1,0,0,0,108,1139,1,0,0,0,
		110,1146,1,0,0,0,112,1164,1,0,0,0,114,1166,1,0,0,0,116,1168,1,0,0,0,118,
		1187,1,0,0,0,120,1197,1,0,0,0,122,1199,1,0,0,0,124,1222,1,0,0,0,126,1224,
		1,0,0,0,128,1232,1,0,0,0,130,1234,1,0,0,0,132,1243,1,0,0,0,134,1252,1,
		0,0,0,136,1254,1,0,0,0,138,1256,1,0,0,0,140,1258,1,0,0,0,142,1263,1,0,
		0,0,144,1269,1,0,0,0,146,1278,1,0,0,0,148,1287,1,0,0,0,150,1312,1,0,0,
		0,152,1318,1,0,0,0,154,1329,1,0,0,0,156,1355,1,0,0,0,158,1357,1,0,0,0,
		160,1372,1,0,0,0,162,1393,1,0,0,0,164,1395,1,0,0,0,166,1410,1,0,0,0,168,
		1412,1,0,0,0,170,1415,1,0,0,0,172,1431,1,0,0,0,174,1433,1,0,0,0,176,1437,
		1,0,0,0,178,1439,1,0,0,0,180,1443,1,0,0,0,182,1447,1,0,0,0,184,1450,1,
		0,0,0,186,1459,1,0,0,0,188,1468,1,0,0,0,190,1476,1,0,0,0,192,1478,1,0,
		0,0,194,1480,1,0,0,0,196,1487,1,0,0,0,198,1504,1,0,0,0,200,1507,1,0,0,
		0,202,1517,1,0,0,0,204,1533,1,0,0,0,206,1535,1,0,0,0,208,1552,1,0,0,0,
		210,1570,1,0,0,0,212,1579,1,0,0,0,214,1596,1,0,0,0,216,1602,1,0,0,0,218,
		1604,1,0,0,0,220,1608,1,0,0,0,222,1610,1,0,0,0,224,1614,1,0,0,0,226,1637,
		1,0,0,0,228,1639,1,0,0,0,230,1650,1,0,0,0,232,1659,1,0,0,0,234,1665,1,
		0,0,0,236,1676,1,0,0,0,238,1694,1,0,0,0,240,1709,1,0,0,0,242,1737,1,0,
		0,0,244,1739,1,0,0,0,246,1743,1,0,0,0,248,1745,1,0,0,0,250,1748,1,0,0,
		0,252,1752,1,0,0,0,254,1764,1,0,0,0,256,1771,1,0,0,0,258,1787,1,0,0,0,
		260,1809,1,0,0,0,262,1811,1,0,0,0,264,1840,1,0,0,0,266,1842,1,0,0,0,268,
		1884,1,0,0,0,270,1887,1,0,0,0,272,1909,1,0,0,0,274,1916,1,0,0,0,276,1921,
		1,0,0,0,278,1925,1,0,0,0,280,1927,1,0,0,0,282,1952,1,0,0,0,284,1956,1,
		0,0,0,286,1958,1,0,0,0,288,1983,1,0,0,0,290,1986,1,0,0,0,292,1990,1,0,
		0,0,294,1992,1,0,0,0,296,2003,1,0,0,0,298,2021,1,0,0,0,300,2023,1,0,0,
		0,302,2053,1,0,0,0,304,2055,1,0,0,0,306,2065,1,0,0,0,308,2067,1,0,0,0,
		310,2070,1,0,0,0,312,2073,1,0,0,0,314,2110,1,0,0,0,316,2117,1,0,0,0,318,
		2119,1,0,0,0,320,2121,1,0,0,0,322,2123,1,0,0,0,324,2126,1,0,0,0,326,2130,
		1,0,0,0,328,2134,1,0,0,0,330,2148,1,0,0,0,332,2160,1,0,0,0,334,2164,1,
		0,0,0,336,2166,1,0,0,0,338,2174,1,0,0,0,340,2176,1,0,0,0,342,2182,1,0,
		0,0,344,2195,1,0,0,0,346,2245,1,0,0,0,348,2247,1,0,0,0,350,2269,1,0,0,
		0,352,2271,1,0,0,0,354,2273,1,0,0,0,356,2292,1,0,0,0,358,2305,1,0,0,0,
		360,2308,1,0,0,0,362,2313,1,0,0,0,364,2318,1,0,0,0,366,2322,1,0,0,0,368,
		2329,1,0,0,0,370,2333,1,0,0,0,372,2353,1,0,0,0,374,2355,1,0,0,0,376,2361,
		1,0,0,0,378,2363,1,0,0,0,380,2370,1,0,0,0,382,2392,1,0,0,0,384,2394,1,
		0,0,0,386,2397,1,0,0,0,388,2449,1,0,0,0,390,2458,1,0,0,0,392,2460,1,0,
		0,0,394,2462,1,0,0,0,396,2464,1,0,0,0,398,400,3,116,58,0,399,398,1,0,0,
		0,399,400,1,0,0,0,400,401,1,0,0,0,401,402,5,0,0,1,402,1,1,0,0,0,403,412,
		3,390,195,0,404,412,5,62,0,0,405,406,5,78,0,0,406,407,3,86,43,0,407,408,
		5,79,0,0,408,412,1,0,0,0,409,412,3,4,2,0,410,412,3,12,6,0,411,403,1,0,
		0,0,411,404,1,0,0,0,411,405,1,0,0,0,411,409,1,0,0,0,411,410,1,0,0,0,412,
		3,1,0,0,0,413,416,3,6,3,0,414,416,3,8,4,0,415,413,1,0,0,0,415,414,1,0,
		0,0,416,5,1,0,0,0,417,427,5,125,0,0,418,427,3,336,168,0,419,427,3,322,
		161,0,420,427,3,338,169,0,421,422,5,92,0,0,422,427,3,284,142,0,423,424,
		5,92,0,0,424,427,3,154,77,0,425,427,3,350,175,0,426,417,1,0,0,0,426,418,
		1,0,0,0,426,419,1,0,0,0,426,420,1,0,0,0,426,421,1,0,0,0,426,423,1,0,0,
		0,426,425,1,0,0,0,427,7,1,0,0,0,428,430,3,10,5,0,429,431,5,61,0,0,430,
		429,1,0,0,0,430,431,1,0,0,0,431,432,1,0,0,0,432,433,3,6,3,0,433,9,1,0,
		0,0,434,435,6,5,-1,0,435,446,5,120,0,0,436,437,3,152,76,0,437,438,5,120,
		0,0,438,446,1,0,0,0,439,440,3,176,88,0,440,441,5,120,0,0,441,446,1,0,0,
		0,442,443,3,154,77,0,443,444,5,120,0,0,444,446,1,0,0,0,445,434,1,0,0,0,
		445,436,1,0,0,0,445,439,1,0,0,0,445,442,1,0,0,0,446,459,1,0,0,0,447,448,
		10,2,0,0,448,449,5,125,0,0,449,458,5,120,0,0,450,452,10,1,0,0,451,453,
		5,61,0,0,452,451,1,0,0,0,452,453,1,0,0,0,453,454,1,0,0,0,454,455,3,348,
		174,0,455,456,5,120,0,0,456,458,1,0,0,0,457,447,1,0,0,0,457,450,1,0,0,
		0,458,461,1,0,0,0,459,457,1,0,0,0,459,460,1,0,0,0,460,11,1,0,0,0,461,459,
		1,0,0,0,462,464,3,14,7,0,463,465,3,28,14,0,464,463,1,0,0,0,464,465,1,0,
		0,0,465,466,1,0,0,0,466,467,3,96,48,0,467,13,1,0,0,0,468,470,5,80,0,0,
		469,471,3,16,8,0,470,469,1,0,0,0,470,471,1,0,0,0,471,472,1,0,0,0,472,473,
		5,81,0,0,473,15,1,0,0,0,474,481,3,18,9,0,475,481,3,20,10,0,476,477,3,18,
		9,0,477,478,5,115,0,0,478,479,3,20,10,0,479,481,1,0,0,0,480,474,1,0,0,
		0,480,475,1,0,0,0,480,476,1,0,0,0,481,17,1,0,0,0,482,483,7,0,0,0,483,19,
		1,0,0,0,484,485,6,10,-1,0,485,487,3,22,11,0,486,488,5,124,0,0,487,486,
		1,0,0,0,487,488,1,0,0,0,488,497,1,0,0,0,489,490,10,1,0,0,490,491,5,115,
		0,0,491,493,3,22,11,0,492,494,5,124,0,0,493,492,1,0,0,0,493,494,1,0,0,
		0,494,496,1,0,0,0,495,489,1,0,0,0,496,499,1,0,0,0,497,495,1,0,0,0,497,
		498,1,0,0,0,498,21,1,0,0,0,499,497,1,0,0,0,500,503,3,24,12,0,501,503,3,
		26,13,0,502,500,1,0,0,0,502,501,1,0,0,0,503,23,1,0,0,0,504,509,5,125,0,
		0,505,506,5,90,0,0,506,509,5,125,0,0,507,509,5,62,0,0,508,504,1,0,0,0,
		508,505,1,0,0,0,508,507,1,0,0,0,509,25,1,0,0,0,510,511,5,125,0,0,511,516,
		3,274,137,0,512,513,5,90,0,0,513,514,5,125,0,0,514,516,3,274,137,0,515,
		510,1,0,0,0,515,512,1,0,0,0,516,27,1,0,0,0,517,518,5,78,0,0,518,519,3,
		264,132,0,519,521,5,79,0,0,520,522,5,40,0,0,521,520,1,0,0,0,521,522,1,
		0,0,0,522,524,1,0,0,0,523,525,3,376,188,0,524,523,1,0,0,0,524,525,1,0,
		0,0,525,527,1,0,0,0,526,528,3,206,103,0,527,526,1,0,0,0,527,528,1,0,0,
		0,528,530,1,0,0,0,529,531,3,240,120,0,530,529,1,0,0,0,530,531,1,0,0,0,
		531,29,1,0,0,0,532,533,6,15,-1,0,533,597,3,2,1,0,534,535,3,150,75,0,535,
		537,5,78,0,0,536,538,3,32,16,0,537,536,1,0,0,0,537,538,1,0,0,0,538,539,
		1,0,0,0,539,540,5,79,0,0,540,597,1,0,0,0,541,542,3,358,179,0,542,544,5,
		78,0,0,543,545,3,32,16,0,544,543,1,0,0,0,544,545,1,0,0,0,545,546,1,0,0,
		0,546,547,5,79,0,0,547,597,1,0,0,0,548,549,3,150,75,0,549,550,3,282,141,
		0,550,597,1,0,0,0,551,552,3,358,179,0,552,553,3,282,141,0,553,597,1,0,
		0,0,554,555,5,24,0,0,555,556,5,95,0,0,556,557,3,252,126,0,557,558,5,96,
		0,0,558,559,5,78,0,0,559,560,3,86,43,0,560,561,5,79,0,0,561,597,1,0,0,
		0,562,563,5,58,0,0,563,564,5,95,0,0,564,565,3,252,126,0,565,566,5,96,0,
		0,566,567,5,78,0,0,567,568,3,86,43,0,568,569,5,79,0,0,569,597,1,0,0,0,
		570,571,5,51,0,0,571,572,5,95,0,0,572,573,3,252,126,0,573,574,5,96,0,0,
		574,575,5,78,0,0,575,576,3,86,43,0,576,577,5,79,0,0,577,597,1,0,0,0,578,
		579,5,17,0,0,579,580,5,95,0,0,580,581,3,252,126,0,581,582,5,96,0,0,582,
		583,5,78,0,0,583,584,3,86,43,0,584,585,5,79,0,0,585,597,1,0,0,0,586,587,
		5,68,0,0,587,588,5,78,0,0,588,589,3,86,43,0,589,590,5,79,0,0,590,597,1,
		0,0,0,591,592,5,68,0,0,592,593,5,78,0,0,593,594,3,252,126,0,594,595,5,
		79,0,0,595,597,1,0,0,0,596,532,1,0,0,0,596,534,1,0,0,0,596,541,1,0,0,0,
		596,548,1,0,0,0,596,551,1,0,0,0,596,554,1,0,0,0,596,562,1,0,0,0,596,570,
		1,0,0,0,596,578,1,0,0,0,596,586,1,0,0,0,596,591,1,0,0,0,597,638,1,0,0,
		0,598,599,10,19,0,0,599,600,5,80,0,0,600,601,3,86,43,0,601,602,5,81,0,
		0,602,637,1,0,0,0,603,604,10,18,0,0,604,605,5,80,0,0,605,606,3,282,141,
		0,606,607,5,81,0,0,607,637,1,0,0,0,608,609,10,17,0,0,609,611,5,78,0,0,
		610,612,3,32,16,0,611,610,1,0,0,0,611,612,1,0,0,0,612,613,1,0,0,0,613,
		637,5,79,0,0,614,615,10,12,0,0,615,617,5,122,0,0,616,618,5,61,0,0,617,
		616,1,0,0,0,617,618,1,0,0,0,618,619,1,0,0,0,619,637,3,4,2,0,620,621,10,
		11,0,0,621,623,5,117,0,0,622,624,5,61,0,0,623,622,1,0,0,0,623,624,1,0,
		0,0,624,625,1,0,0,0,625,637,3,4,2,0,626,627,10,10,0,0,627,628,5,122,0,
		0,628,637,3,34,17,0,629,630,10,9,0,0,630,631,5,117,0,0,631,637,3,34,17,
		0,632,633,10,8,0,0,633,637,5,113,0,0,634,635,10,7,0,0,635,637,5,114,0,
		0,636,598,1,0,0,0,636,603,1,0,0,0,636,608,1,0,0,0,636,614,1,0,0,0,636,
		620,1,0,0,0,636,626,1,0,0,0,636,629,1,0,0,0,636,632,1,0,0,0,636,634,1,
		0,0,0,637,640,1,0,0,0,638,636,1,0,0,0,638,639,1,0,0,0,639,31,1,0,0,0,640,
		638,1,0,0,0,641,642,3,280,140,0,642,33,1,0,0,0,643,645,3,10,5,0,644,643,
		1,0,0,0,644,645,1,0,0,0,645,646,1,0,0,0,646,647,3,152,76,0,647,648,5,120,
		0,0,648,649,5,92,0,0,649,650,3,152,76,0,650,666,1,0,0,0,651,652,3,10,5,
		0,652,653,5,61,0,0,653,654,3,348,174,0,654,655,5,120,0,0,655,656,5,92,
		0,0,656,657,3,152,76,0,657,666,1,0,0,0,658,660,3,10,5,0,659,658,1,0,0,
		0,659,660,1,0,0,0,660,661,1,0,0,0,661,662,5,92,0,0,662,666,3,152,76,0,
		663,664,5,92,0,0,664,666,3,154,77,0,665,644,1,0,0,0,665,651,1,0,0,0,665,
		659,1,0,0,0,665,663,1,0,0,0,666,35,1,0,0,0,667,696,3,30,15,0,668,669,5,
		113,0,0,669,696,3,56,28,0,670,671,5,114,0,0,671,696,3,56,28,0,672,673,
		3,38,19,0,673,674,3,56,28,0,674,696,1,0,0,0,675,676,5,55,0,0,676,696,3,
		36,18,0,677,678,5,55,0,0,678,679,5,78,0,0,679,680,3,252,126,0,680,681,
		5,79,0,0,681,696,1,0,0,0,682,683,5,55,0,0,683,684,5,124,0,0,684,685,5,
		78,0,0,685,686,5,125,0,0,686,696,5,79,0,0,687,688,5,4,0,0,688,689,5,78,
		0,0,689,690,3,252,126,0,690,691,5,79,0,0,691,696,1,0,0,0,692,696,3,54,
		27,0,693,696,3,40,20,0,694,696,3,52,26,0,695,667,1,0,0,0,695,668,1,0,0,
		0,695,670,1,0,0,0,695,672,1,0,0,0,695,675,1,0,0,0,695,677,1,0,0,0,695,
		682,1,0,0,0,695,687,1,0,0,0,695,692,1,0,0,0,695,693,1,0,0,0,695,694,1,
		0,0,0,696,37,1,0,0,0,697,698,7,1,0,0,698,39,1,0,0,0,699,701,5,120,0,0,
		700,699,1,0,0,0,700,701,1,0,0,0,701,702,1,0,0,0,702,704,5,42,0,0,703,705,
		3,42,21,0,704,703,1,0,0,0,704,705,1,0,0,0,705,706,1,0,0,0,706,708,3,44,
		22,0,707,709,3,50,25,0,708,707,1,0,0,0,708,709,1,0,0,0,709,724,1,0,0,0,
		710,712,5,120,0,0,711,710,1,0,0,0,711,712,1,0,0,0,712,713,1,0,0,0,713,
		715,5,42,0,0,714,716,3,42,21,0,715,714,1,0,0,0,715,716,1,0,0,0,716,717,
		1,0,0,0,717,718,5,78,0,0,718,719,3,252,126,0,719,721,5,79,0,0,720,722,
		3,50,25,0,721,720,1,0,0,0,721,722,1,0,0,0,722,724,1,0,0,0,723,700,1,0,
		0,0,723,711,1,0,0,0,724,41,1,0,0,0,725,726,5,78,0,0,726,727,3,32,16,0,
		727,728,5,79,0,0,728,43,1,0,0,0,729,731,3,146,73,0,730,732,3,46,23,0,731,
		730,1,0,0,0,731,732,1,0,0,0,732,45,1,0,0,0,733,735,3,242,121,0,734,736,
		3,46,23,0,735,734,1,0,0,0,735,736,1,0,0,0,736,739,1,0,0,0,737,739,3,48,
		24,0,738,733,1,0,0,0,738,737,1,0,0,0,739,47,1,0,0,0,740,741,6,24,-1,0,
		741,742,5,80,0,0,742,743,3,86,43,0,743,745,5,81,0,0,744,746,3,206,103,
		0,745,744,1,0,0,0,745,746,1,0,0,0,746,756,1,0,0,0,747,748,10,1,0,0,748,
		749,5,80,0,0,749,750,3,88,44,0,750,752,5,81,0,0,751,753,3,206,103,0,752,
		751,1,0,0,0,752,753,1,0,0,0,753,755,1,0,0,0,754,747,1,0,0,0,755,758,1,
		0,0,0,756,754,1,0,0,0,756,757,1,0,0,0,757,49,1,0,0,0,758,756,1,0,0,0,759,
		761,5,78,0,0,760,762,3,32,16,0,761,760,1,0,0,0,761,762,1,0,0,0,762,763,
		1,0,0,0,763,766,5,79,0,0,764,766,3,282,141,0,765,759,1,0,0,0,765,764,1,
		0,0,0,766,51,1,0,0,0,767,769,5,120,0,0,768,767,1,0,0,0,768,769,1,0,0,0,
		769,770,1,0,0,0,770,771,5,21,0,0,771,780,3,56,28,0,772,774,5,120,0,0,773,
		772,1,0,0,0,773,774,1,0,0,0,774,775,1,0,0,0,775,776,5,21,0,0,776,777,5,
		80,0,0,777,778,5,81,0,0,778,780,3,56,28,0,779,768,1,0,0,0,779,773,1,0,
		0,0,780,53,1,0,0,0,781,782,5,43,0,0,782,783,5,78,0,0,783,784,3,86,43,0,
		784,785,5,79,0,0,785,55,1,0,0,0,786,793,3,36,18,0,787,788,5,78,0,0,788,
		789,3,252,126,0,789,790,5,79,0,0,790,791,3,56,28,0,791,793,1,0,0,0,792,
		786,1,0,0,0,792,787,1,0,0,0,793,57,1,0,0,0,794,795,6,29,-1,0,795,796,3,
		56,28,0,796,805,1,0,0,0,797,798,10,2,0,0,798,799,5,123,0,0,799,804,3,56,
		28,0,800,801,10,1,0,0,801,802,5,116,0,0,802,804,3,56,28,0,803,797,1,0,
		0,0,803,800,1,0,0,0,804,807,1,0,0,0,805,803,1,0,0,0,805,806,1,0,0,0,806,
		59,1,0,0,0,807,805,1,0,0,0,808,809,6,30,-1,0,809,810,3,58,29,0,810,822,
		1,0,0,0,811,812,10,3,0,0,812,813,5,86,0,0,813,821,3,58,29,0,814,815,10,
		2,0,0,815,816,5,87,0,0,816,821,3,58,29,0,817,818,10,1,0,0,818,819,5,88,
		0,0,819,821,3,58,29,0,820,811,1,0,0,0,820,814,1,0,0,0,820,817,1,0,0,0,
		821,824,1,0,0,0,822,820,1,0,0,0,822,823,1,0,0,0,823,61,1,0,0,0,824,822,
		1,0,0,0,825,826,6,31,-1,0,826,827,3,60,30,0,827,836,1,0,0,0,828,829,10,
		2,0,0,829,830,5,84,0,0,830,835,3,60,30,0,831,832,10,1,0,0,832,833,5,85,
		0,0,833,835,3,60,30,0,834,828,1,0,0,0,834,831,1,0,0,0,835,838,1,0,0,0,
		836,834,1,0,0,0,836,837,1,0,0,0,837,63,1,0,0,0,838,836,1,0,0,0,839,840,
		6,32,-1,0,840,841,3,62,31,0,841,851,1,0,0,0,842,843,10,2,0,0,843,844,5,
		105,0,0,844,850,3,62,31,0,845,846,10,1,0,0,846,847,3,384,192,0,847,848,
		3,62,31,0,848,850,1,0,0,0,849,842,1,0,0,0,849,845,1,0,0,0,850,853,1,0,
		0,0,851,849,1,0,0,0,851,852,1,0,0,0,852,65,1,0,0,0,853,851,1,0,0,0,854,
		855,6,33,-1,0,855,856,3,64,32,0,856,871,1,0,0,0,857,858,10,4,0,0,858,859,
		5,95,0,0,859,870,3,64,32,0,860,861,10,3,0,0,861,862,5,96,0,0,862,870,3,
		64,32,0,863,864,10,2,0,0,864,865,5,109,0,0,865,870,3,64,32,0,866,867,10,
		1,0,0,867,868,5,110,0,0,868,870,3,64,32,0,869,857,1,0,0,0,869,860,1,0,
		0,0,869,863,1,0,0,0,869,866,1,0,0,0,870,873,1,0,0,0,871,869,1,0,0,0,871,
		872,1,0,0,0,872,67,1,0,0,0,873,871,1,0,0,0,874,875,6,34,-1,0,875,876,3,
		66,33,0,876,885,1,0,0,0,877,878,10,2,0,0,878,879,5,107,0,0,879,884,3,66,
		33,0,880,881,10,1,0,0,881,882,5,108,0,0,882,884,3,66,33,0,883,877,1,0,
		0,0,883,880,1,0,0,0,884,887,1,0,0,0,885,883,1,0,0,0,885,886,1,0,0,0,886,
		69,1,0,0,0,887,885,1,0,0,0,888,889,6,35,-1,0,889,890,3,68,34,0,890,896,
		1,0,0,0,891,892,10,1,0,0,892,893,5,90,0,0,893,895,3,68,34,0,894,891,1,
		0,0,0,895,898,1,0,0,0,896,894,1,0,0,0,896,897,1,0,0,0,897,71,1,0,0,0,898,
		896,1,0,0,0,899,900,6,36,-1,0,900,901,3,70,35,0,901,907,1,0,0,0,902,903,
		10,1,0,0,903,904,5,89,0,0,904,906,3,70,35,0,905,902,1,0,0,0,906,909,1,
		0,0,0,907,905,1,0,0,0,907,908,1,0,0,0,908,73,1,0,0,0,909,907,1,0,0,0,910,
		911,6,37,-1,0,911,912,3,72,36,0,912,918,1,0,0,0,913,914,10,1,0,0,914,915,
		5,91,0,0,915,917,3,72,36,0,916,913,1,0,0,0,917,920,1,0,0,0,918,916,1,0,
		0,0,918,919,1,0,0,0,919,75,1,0,0,0,920,918,1,0,0,0,921,922,6,38,-1,0,922,
		923,3,74,37,0,923,929,1,0,0,0,924,925,10,1,0,0,925,926,5,111,0,0,926,928,
		3,74,37,0,927,924,1,0,0,0,928,931,1,0,0,0,929,927,1,0,0,0,929,930,1,0,
		0,0,930,77,1,0,0,0,931,929,1,0,0,0,932,933,6,39,-1,0,933,934,3,76,38,0,
		934,940,1,0,0,0,935,936,10,1,0,0,936,937,5,112,0,0,937,939,3,76,38,0,938,
		935,1,0,0,0,939,942,1,0,0,0,940,938,1,0,0,0,940,941,1,0,0,0,941,79,1,0,
		0,0,942,940,1,0,0,0,943,951,3,78,39,0,944,945,3,78,39,0,945,946,5,118,
		0,0,946,947,3,86,43,0,947,948,5,119,0,0,948,949,3,82,41,0,949,951,1,0,
		0,0,950,943,1,0,0,0,950,944,1,0,0,0,951,81,1,0,0,0,952,959,3,80,40,0,953,
		954,3,78,39,0,954,955,3,84,42,0,955,956,3,278,139,0,956,959,1,0,0,0,957,
		959,3,374,187,0,958,952,1,0,0,0,958,953,1,0,0,0,958,957,1,0,0,0,959,83,
		1,0,0,0,960,972,5,94,0,0,961,972,5,99,0,0,962,972,5,100,0,0,963,972,5,
		101,0,0,964,972,5,97,0,0,965,972,5,98,0,0,966,972,3,386,193,0,967,972,
		5,106,0,0,968,972,5,103,0,0,969,972,5,102,0,0,970,972,5,104,0,0,971,960,
		1,0,0,0,971,961,1,0,0,0,971,962,1,0,0,0,971,963,1,0,0,0,971,964,1,0,0,
		0,971,965,1,0,0,0,971,966,1,0,0,0,971,967,1,0,0,0,971,968,1,0,0,0,971,
		969,1,0,0,0,971,970,1,0,0,0,972,85,1,0,0,0,973,974,6,43,-1,0,974,975,3,
		82,41,0,975,981,1,0,0,0,976,977,10,1,0,0,977,978,5,115,0,0,978,980,3,82,
		41,0,979,976,1,0,0,0,980,983,1,0,0,0,981,979,1,0,0,0,981,982,1,0,0,0,982,
		87,1,0,0,0,983,981,1,0,0,0,984,985,3,80,40,0,985,89,1,0,0,0,986,1013,3,
		92,46,0,987,989,3,206,103,0,988,987,1,0,0,0,988,989,1,0,0,0,989,990,1,
		0,0,0,990,1013,3,94,47,0,991,993,3,206,103,0,992,991,1,0,0,0,992,993,1,
		0,0,0,993,994,1,0,0,0,994,1013,3,96,48,0,995,997,3,206,103,0,996,995,1,
		0,0,0,996,997,1,0,0,0,997,998,1,0,0,0,998,1013,3,100,50,0,999,1001,3,206,
		103,0,1000,999,1,0,0,0,1000,1001,1,0,0,0,1001,1002,1,0,0,0,1002,1013,3,
		104,52,0,1003,1005,3,206,103,0,1004,1003,1,0,0,0,1004,1005,1,0,0,0,1005,
		1006,1,0,0,0,1006,1013,3,112,56,0,1007,1013,3,114,57,0,1008,1010,3,206,
		103,0,1009,1008,1,0,0,0,1009,1010,1,0,0,0,1010,1011,1,0,0,0,1011,1013,
		3,364,182,0,1012,986,1,0,0,0,1012,988,1,0,0,0,1012,992,1,0,0,0,1012,996,
		1,0,0,0,1012,1000,1,0,0,0,1012,1004,1,0,0,0,1012,1007,1,0,0,0,1012,1009,
		1,0,0,0,1013,91,1,0,0,0,1014,1016,3,206,103,0,1015,1014,1,0,0,0,1015,1016,
		1,0,0,0,1016,1017,1,0,0,0,1017,1018,5,125,0,0,1018,1019,5,119,0,0,1019,
		1035,3,90,45,0,1020,1022,3,206,103,0,1021,1020,1,0,0,0,1021,1022,1,0,0,
		0,1022,1023,1,0,0,0,1023,1024,5,9,0,0,1024,1025,3,88,44,0,1025,1026,5,
		119,0,0,1026,1027,3,90,45,0,1027,1035,1,0,0,0,1028,1030,3,206,103,0,1029,
		1028,1,0,0,0,1029,1030,1,0,0,0,1030,1031,1,0,0,0,1031,1032,5,20,0,0,1032,
		1033,5,119,0,0,1033,1035,3,90,45,0,1034,1015,1,0,0,0,1034,1021,1,0,0,0,
		1034,1029,1,0,0,0,1035,93,1,0,0,0,1036,1038,3,86,43,0,1037,1036,1,0,0,
		0,1037,1038,1,0,0,0,1038,1039,1,0,0,0,1039,1040,5,121,0,0,1040,95,1,0,
		0,0,1041,1043,5,82,0,0,1042,1044,3,98,49,0,1043,1042,1,0,0,0,1043,1044,
		1,0,0,0,1044,1045,1,0,0,0,1045,1046,5,83,0,0,1046,97,1,0,0,0,1047,1048,
		6,49,-1,0,1048,1049,3,90,45,0,1049,1054,1,0,0,0,1050,1051,10,1,0,0,1051,
		1053,3,90,45,0,1052,1050,1,0,0,0,1053,1056,1,0,0,0,1054,1052,1,0,0,0,1054,
		1055,1,0,0,0,1055,99,1,0,0,0,1056,1054,1,0,0,0,1057,1058,5,36,0,0,1058,
		1059,5,78,0,0,1059,1060,3,102,51,0,1060,1061,5,79,0,0,1061,1062,3,90,45,
		0,1062,1078,1,0,0,0,1063,1064,5,36,0,0,1064,1065,5,78,0,0,1065,1066,3,
		102,51,0,1066,1067,5,79,0,0,1067,1068,3,90,45,0,1068,1069,5,25,0,0,1069,
		1070,3,90,45,0,1070,1078,1,0,0,0,1071,1072,5,60,0,0,1072,1073,5,78,0,0,
		1073,1074,3,102,51,0,1074,1075,5,79,0,0,1075,1076,3,90,45,0,1076,1078,
		1,0,0,0,1077,1057,1,0,0,0,1077,1063,1,0,0,0,1077,1071,1,0,0,0,1078,101,
		1,0,0,0,1079,1096,3,86,43,0,1080,1082,3,206,103,0,1081,1080,1,0,0,0,1081,
		1082,1,0,0,0,1082,1083,1,0,0,0,1083,1084,3,134,67,0,1084,1085,3,232,116,
		0,1085,1086,5,94,0,0,1086,1087,3,278,139,0,1087,1096,1,0,0,0,1088,1090,
		3,206,103,0,1089,1088,1,0,0,0,1089,1090,1,0,0,0,1090,1091,1,0,0,0,1091,
		1092,3,134,67,0,1092,1093,3,232,116,0,1093,1094,3,282,141,0,1094,1096,
		1,0,0,0,1095,1079,1,0,0,0,1095,1081,1,0,0,0,1095,1089,1,0,0,0,1096,103,
		1,0,0,0,1097,1098,5,77,0,0,1098,1099,5,78,0,0,1099,1100,3,102,51,0,1100,
		1101,5,79,0,0,1101,1102,3,90,45,0,1102,1133,1,0,0,0,1103,1104,5,22,0,0,
		1104,1105,3,90,45,0,1105,1106,5,77,0,0,1106,1107,5,78,0,0,1107,1108,3,
		86,43,0,1108,1109,5,79,0,0,1109,1110,5,121,0,0,1110,1133,1,0,0,0,1111,
		1112,5,33,0,0,1112,1113,5,78,0,0,1113,1115,3,106,53,0,1114,1116,3,102,
		51,0,1115,1114,1,0,0,0,1115,1116,1,0,0,0,1116,1117,1,0,0,0,1117,1119,5,
		121,0,0,1118,1120,3,86,43,0,1119,1118,1,0,0,0,1119,1120,1,0,0,0,1120,1121,
		1,0,0,0,1121,1122,5,79,0,0,1122,1123,3,90,45,0,1123,1133,1,0,0,0,1124,
		1125,5,33,0,0,1125,1126,5,78,0,0,1126,1127,3,108,54,0,1127,1128,5,119,
		0,0,1128,1129,3,110,55,0,1129,1130,5,79,0,0,1130,1131,3,90,45,0,1131,1133,
		1,0,0,0,1132,1097,1,0,0,0,1132,1103,1,0,0,0,1132,1111,1,0,0,0,1132,1124,
		1,0,0,0,1133,105,1,0,0,0,1134,1137,3,94,47,0,1135,1137,3,124,62,0,1136,
		1134,1,0,0,0,1136,1135,1,0,0,0,1137,107,1,0,0,0,1138,1140,3,206,103,0,
		1139,1138,1,0,0,0,1139,1140,1,0,0,0,1140,1141,1,0,0,0,1141,1142,3,134,
		67,0,1142,1143,3,232,116,0,1143,109,1,0,0,0,1144,1147,3,86,43,0,1145,1147,
		3,282,141,0,1146,1144,1,0,0,0,1146,1145,1,0,0,0,1147,111,1,0,0,0,1148,
		1149,5,8,0,0,1149,1165,5,121,0,0,1150,1151,5,18,0,0,1151,1165,5,121,0,
		0,1152,1154,5,52,0,0,1153,1155,3,86,43,0,1154,1153,1,0,0,0,1154,1155,1,
		0,0,0,1155,1156,1,0,0,0,1156,1165,5,121,0,0,1157,1158,5,52,0,0,1158,1159,
		3,282,141,0,1159,1160,5,121,0,0,1160,1165,1,0,0,0,1161,1162,5,35,0,0,1162,
		1163,5,125,0,0,1163,1165,5,121,0,0,1164,1148,1,0,0,0,1164,1150,1,0,0,0,
		1164,1152,1,0,0,0,1164,1157,1,0,0,0,1164,1161,1,0,0,0,1165,113,1,0,0,0,
		1166,1167,3,120,60,0,1167,115,1,0,0,0,1168,1169,6,58,-1,0,1169,1170,3,
		118,59,0,1170,1175,1,0,0,0,1171,1172,10,1,0,0,1172,1174,3,118,59,0,1173,
		1171,1,0,0,0,1174,1177,1,0,0,0,1175,1173,1,0,0,0,1175,1176,1,0,0,0,1176,
		117,1,0,0,0,1177,1175,1,0,0,0,1178,1188,3,120,60,0,1179,1188,3,270,135,
		0,1180,1188,3,340,170,0,1181,1188,3,360,180,0,1182,1188,3,362,181,0,1183,
		1188,3,204,102,0,1184,1188,3,180,90,0,1185,1188,3,128,64,0,1186,1188,3,
		130,65,0,1187,1178,1,0,0,0,1187,1179,1,0,0,0,1187,1180,1,0,0,0,1187,1181,
		1,0,0,0,1187,1182,1,0,0,0,1187,1183,1,0,0,0,1187,1184,1,0,0,0,1187,1185,
		1,0,0,0,1187,1186,1,0,0,0,1188,119,1,0,0,0,1189,1198,3,124,62,0,1190,1198,
		3,202,101,0,1191,1198,3,194,97,0,1192,1198,3,198,99,0,1193,1198,3,200,
		100,0,1194,1198,3,126,63,0,1195,1198,3,122,61,0,1196,1198,3,164,82,0,1197,
		1189,1,0,0,0,1197,1190,1,0,0,0,1197,1191,1,0,0,0,1197,1192,1,0,0,0,1197,
		1193,1,0,0,0,1197,1194,1,0,0,0,1197,1195,1,0,0,0,1197,1196,1,0,0,0,1198,
		121,1,0,0,0,1199,1200,5,72,0,0,1200,1202,5,125,0,0,1201,1203,3,206,103,
		0,1202,1201,1,0,0,0,1202,1203,1,0,0,0,1203,1204,1,0,0,0,1204,1205,5,94,
		0,0,1205,1206,3,252,126,0,1206,1207,5,121,0,0,1207,123,1,0,0,0,1208,1210,
		3,134,67,0,1209,1208,1,0,0,0,1209,1210,1,0,0,0,1210,1212,1,0,0,0,1211,
		1213,3,228,114,0,1212,1211,1,0,0,0,1212,1213,1,0,0,0,1213,1214,1,0,0,0,
		1214,1223,5,121,0,0,1215,1217,3,206,103,0,1216,1218,3,134,67,0,1217,1216,
		1,0,0,0,1217,1218,1,0,0,0,1218,1219,1,0,0,0,1219,1220,3,228,114,0,1220,
		1221,5,121,0,0,1221,1223,1,0,0,0,1222,1209,1,0,0,0,1222,1215,1,0,0,0,1223,
		125,1,0,0,0,1224,1225,5,57,0,0,1225,1226,5,78,0,0,1226,1227,3,88,44,0,
		1227,1228,5,115,0,0,1228,1229,5,135,0,0,1229,1230,5,79,0,0,1230,1231,5,
		121,0,0,1231,127,1,0,0,0,1232,1233,5,121,0,0,1233,129,1,0,0,0,1234,1235,
		3,206,103,0,1235,1236,5,121,0,0,1236,131,1,0,0,0,1237,1244,3,136,68,0,
		1238,1244,3,142,71,0,1239,1244,3,138,69,0,1240,1244,5,34,0,0,1241,1244,
		5,67,0,0,1242,1244,5,16,0,0,1243,1237,1,0,0,0,1243,1238,1,0,0,0,1243,1239,
		1,0,0,0,1243,1240,1,0,0,0,1243,1241,1,0,0,0,1243,1242,1,0,0,0,1244,133,
		1,0,0,0,1245,1247,3,132,66,0,1246,1248,3,206,103,0,1247,1246,1,0,0,0,1247,
		1248,1,0,0,0,1248,1253,1,0,0,0,1249,1250,3,132,66,0,1250,1251,3,134,67,
		0,1251,1253,1,0,0,0,1252,1245,1,0,0,0,1252,1249,1,0,0,0,1253,135,1,0,0,
		0,1254,1255,7,2,0,0,1255,137,1,0,0,0,1256,1257,7,3,0,0,1257,139,1,0,0,
		0,1258,1259,5,125,0,0,1259,141,1,0,0,0,1260,1264,3,144,72,0,1261,1264,
		3,286,143,0,1262,1264,3,160,80,0,1263,1260,1,0,0,0,1263,1261,1,0,0,0,1263,
		1262,1,0,0,0,1264,143,1,0,0,0,1265,1270,3,150,75,0,1266,1270,3,156,78,
		0,1267,1270,3,358,179,0,1268,1270,3,246,123,0,1269,1265,1,0,0,0,1269,1266,
		1,0,0,0,1269,1267,1,0,0,0,1269,1268,1,0,0,0,1270,145,1,0,0,0,1271,1273,
		3,142,71,0,1272,1274,3,206,103,0,1273,1272,1,0,0,0,1273,1274,1,0,0,0,1274,
		1279,1,0,0,0,1275,1276,3,142,71,0,1276,1277,3,146,73,0,1277,1279,1,0,0,
		0,1278,1271,1,0,0,0,1278,1275,1,0,0,0,1279,147,1,0,0,0,1280,1282,3,144,
		72,0,1281,1283,3,206,103,0,1282,1281,1,0,0,0,1282,1283,1,0,0,0,1283,1288,
		1,0,0,0,1284,1285,3,144,72,0,1285,1286,3,148,74,0,1286,1288,1,0,0,0,1287,
		1280,1,0,0,0,1287,1284,1,0,0,0,1288,149,1,0,0,0,1289,1291,3,10,5,0,1290,
		1289,1,0,0,0,1290,1291,1,0,0,0,1291,1292,1,0,0,0,1292,1313,3,152,76,0,
		1293,1294,3,10,5,0,1294,1295,5,61,0,0,1295,1296,3,348,174,0,1296,1313,
		1,0,0,0,1297,1313,5,11,0,0,1298,1313,5,12,0,0,1299,1313,5,13,0,0,1300,
		1313,5,76,0,0,1301,1313,5,7,0,0,1302,1313,5,53,0,0,1303,1313,5,38,0,0,
		1304,1313,5,39,0,0,1305,1313,5,54,0,0,1306,1313,5,71,0,0,1307,1313,5,32,
		0,0,1308,1313,5,23,0,0,1309,1313,5,74,0,0,1310,1313,5,6,0,0,1311,1313,
		3,154,77,0,1312,1290,1,0,0,0,1312,1293,1,0,0,0,1312,1297,1,0,0,0,1312,
		1298,1,0,0,0,1312,1299,1,0,0,0,1312,1300,1,0,0,0,1312,1301,1,0,0,0,1312,
		1302,1,0,0,0,1312,1303,1,0,0,0,1312,1304,1,0,0,0,1312,1305,1,0,0,0,1312,
		1306,1,0,0,0,1312,1307,1,0,0,0,1312,1308,1,0,0,0,1312,1309,1,0,0,0,1312,
		1310,1,0,0,0,1312,1311,1,0,0,0,1313,151,1,0,0,0,1314,1319,3,284,142,0,
		1315,1319,3,158,79,0,1316,1319,3,140,70,0,1317,1319,3,348,174,0,1318,1314,
		1,0,0,0,1318,1315,1,0,0,0,1318,1316,1,0,0,0,1318,1317,1,0,0,0,1319,153,
		1,0,0,0,1320,1321,5,19,0,0,1321,1322,5,78,0,0,1322,1323,3,86,43,0,1323,
		1324,5,79,0,0,1324,1330,1,0,0,0,1325,1326,5,19,0,0,1326,1327,5,78,0,0,
		1327,1328,5,6,0,0,1328,1330,5,79,0,0,1329,1320,1,0,0,0,1329,1325,1,0,0,
		0,1330,155,1,0,0,0,1331,1333,3,294,147,0,1332,1334,3,206,103,0,1333,1332,
		1,0,0,0,1333,1334,1,0,0,0,1334,1336,1,0,0,0,1335,1337,3,10,5,0,1336,1335,
		1,0,0,0,1336,1337,1,0,0,0,1337,1338,1,0,0,0,1338,1339,5,125,0,0,1339,1356,
		1,0,0,0,1340,1341,3,294,147,0,1341,1342,3,348,174,0,1342,1356,1,0,0,0,
		1343,1344,3,294,147,0,1344,1346,3,10,5,0,1345,1347,5,61,0,0,1346,1345,
		1,0,0,0,1346,1347,1,0,0,0,1347,1348,1,0,0,0,1348,1349,3,348,174,0,1349,
		1356,1,0,0,0,1350,1352,5,26,0,0,1351,1353,3,10,5,0,1352,1351,1,0,0,0,1352,
		1353,1,0,0,0,1353,1354,1,0,0,0,1354,1356,5,125,0,0,1355,1331,1,0,0,0,1355,
		1340,1,0,0,0,1355,1343,1,0,0,0,1355,1350,1,0,0,0,1356,157,1,0,0,0,1357,
		1358,5,125,0,0,1358,159,1,0,0,0,1359,1360,3,162,81,0,1360,1362,5,82,0,
		0,1361,1363,3,170,85,0,1362,1361,1,0,0,0,1362,1363,1,0,0,0,1363,1364,1,
		0,0,0,1364,1365,5,83,0,0,1365,1373,1,0,0,0,1366,1367,3,162,81,0,1367,1368,
		5,82,0,0,1368,1369,3,170,85,0,1369,1370,5,115,0,0,1370,1371,5,83,0,0,1371,
		1373,1,0,0,0,1372,1359,1,0,0,0,1372,1366,1,0,0,0,1373,161,1,0,0,0,1374,
		1376,3,166,83,0,1375,1377,3,206,103,0,1376,1375,1,0,0,0,1376,1377,1,0,
		0,0,1377,1379,1,0,0,0,1378,1380,5,125,0,0,1379,1378,1,0,0,0,1379,1380,
		1,0,0,0,1380,1382,1,0,0,0,1381,1383,3,168,84,0,1382,1381,1,0,0,0,1382,
		1383,1,0,0,0,1383,1394,1,0,0,0,1384,1386,3,166,83,0,1385,1387,3,206,103,
		0,1386,1385,1,0,0,0,1386,1387,1,0,0,0,1387,1388,1,0,0,0,1388,1389,3,10,
		5,0,1389,1391,5,125,0,0,1390,1392,3,168,84,0,1391,1390,1,0,0,0,1391,1392,
		1,0,0,0,1392,1394,1,0,0,0,1393,1374,1,0,0,0,1393,1384,1,0,0,0,1394,163,
		1,0,0,0,1395,1397,3,166,83,0,1396,1398,3,206,103,0,1397,1396,1,0,0,0,1397,
		1398,1,0,0,0,1398,1399,1,0,0,0,1399,1401,5,125,0,0,1400,1402,3,168,84,
		0,1401,1400,1,0,0,0,1401,1402,1,0,0,0,1402,1403,1,0,0,0,1403,1404,5,121,
		0,0,1404,165,1,0,0,0,1405,1411,5,26,0,0,1406,1407,5,26,0,0,1407,1411,5,
		14,0,0,1408,1409,5,26,0,0,1409,1411,5,59,0,0,1410,1405,1,0,0,0,1410,1406,
		1,0,0,0,1410,1408,1,0,0,0,1411,167,1,0,0,0,1412,1413,5,119,0,0,1413,1414,
		3,146,73,0,1414,169,1,0,0,0,1415,1416,6,85,-1,0,1416,1417,3,172,86,0,1417,
		1423,1,0,0,0,1418,1419,10,1,0,0,1419,1420,5,115,0,0,1420,1422,3,172,86,
		0,1421,1418,1,0,0,0,1422,1425,1,0,0,0,1423,1421,1,0,0,0,1423,1424,1,0,
		0,0,1424,171,1,0,0,0,1425,1423,1,0,0,0,1426,1432,3,174,87,0,1427,1428,
		3,174,87,0,1428,1429,5,94,0,0,1429,1430,3,88,44,0,1430,1432,1,0,0,0,1431,
		1426,1,0,0,0,1431,1427,1,0,0,0,1432,173,1,0,0,0,1433,1434,5,125,0,0,1434,
		175,1,0,0,0,1435,1438,3,178,89,0,1436,1438,3,192,96,0,1437,1435,1,0,0,
		0,1437,1436,1,0,0,0,1438,177,1,0,0,0,1439,1440,5,125,0,0,1440,179,1,0,
		0,0,1441,1444,3,182,91,0,1442,1444,3,188,94,0,1443,1441,1,0,0,0,1443,1442,
		1,0,0,0,1444,181,1,0,0,0,1445,1448,3,184,92,0,1446,1448,3,186,93,0,1447,
		1445,1,0,0,0,1447,1446,1,0,0,0,1448,183,1,0,0,0,1449,1451,5,37,0,0,1450,
		1449,1,0,0,0,1450,1451,1,0,0,0,1451,1452,1,0,0,0,1452,1453,5,41,0,0,1453,
		1454,5,125,0,0,1454,1455,5,82,0,0,1455,1456,3,190,95,0,1456,1457,5,83,
		0,0,1457,185,1,0,0,0,1458,1460,5,37,0,0,1459,1458,1,0,0,0,1459,1460,1,
		0,0,0,1460,1461,1,0,0,0,1461,1462,5,41,0,0,1462,1463,3,178,89,0,1463,1464,
		5,82,0,0,1464,1465,3,190,95,0,1465,1466,5,83,0,0,1466,187,1,0,0,0,1467,
		1469,5,37,0,0,1468,1467,1,0,0,0,1468,1469,1,0,0,0,1469,1470,1,0,0,0,1470,
		1471,5,41,0,0,1471,1472,5,82,0,0,1472,1473,3,190,95,0,1473,1474,5,83,0,
		0,1474,189,1,0,0,0,1475,1477,3,116,58,0,1476,1475,1,0,0,0,1476,1477,1,
		0,0,0,1477,191,1,0,0,0,1478,1479,5,125,0,0,1479,193,1,0,0,0,1480,1481,
		5,41,0,0,1481,1482,5,125,0,0,1482,1483,5,94,0,0,1483,1484,3,196,98,0,1484,
		1485,5,121,0,0,1485,195,1,0,0,0,1486,1488,3,10,5,0,1487,1486,1,0,0,0,1487,
		1488,1,0,0,0,1488,1489,1,0,0,0,1489,1490,3,176,88,0,1490,197,1,0,0,0,1491,
		1493,5,72,0,0,1492,1494,5,69,0,0,1493,1492,1,0,0,0,1493,1494,1,0,0,0,1494,
		1495,1,0,0,0,1495,1496,3,10,5,0,1496,1497,3,6,3,0,1497,1498,5,121,0,0,
		1498,1505,1,0,0,0,1499,1500,5,72,0,0,1500,1501,5,120,0,0,1501,1502,3,6,
		3,0,1502,1503,5,121,0,0,1503,1505,1,0,0,0,1504,1491,1,0,0,0,1504,1499,
		1,0,0,0,1505,199,1,0,0,0,1506,1508,3,206,103,0,1507,1506,1,0,0,0,1507,
		1508,1,0,0,0,1508,1509,1,0,0,0,1509,1510,5,72,0,0,1510,1512,5,41,0,0,1511,
		1513,3,10,5,0,1512,1511,1,0,0,0,1512,1513,1,0,0,0,1513,1514,1,0,0,0,1514,
		1515,3,176,88,0,1515,1516,5,121,0,0,1516,201,1,0,0,0,1517,1518,5,5,0,0,
		1518,1519,5,78,0,0,1519,1520,5,135,0,0,1520,1521,5,79,0,0,1521,1522,5,
		121,0,0,1522,203,1,0,0,0,1523,1524,5,29,0,0,1524,1525,5,135,0,0,1525,1527,
		5,82,0,0,1526,1528,3,116,58,0,1527,1526,1,0,0,0,1527,1528,1,0,0,0,1528,
		1529,1,0,0,0,1529,1534,5,83,0,0,1530,1531,5,29,0,0,1531,1532,5,135,0,0,
		1532,1534,3,118,59,0,1533,1523,1,0,0,0,1533,1530,1,0,0,0,1534,205,1,0,
		0,0,1535,1536,6,103,-1,0,1536,1537,3,208,104,0,1537,1542,1,0,0,0,1538,
		1539,10,1,0,0,1539,1541,3,208,104,0,1540,1538,1,0,0,0,1541,1544,1,0,0,
		0,1542,1540,1,0,0,0,1542,1543,1,0,0,0,1543,207,1,0,0,0,1544,1542,1,0,0,
		0,1545,1546,5,80,0,0,1546,1547,5,80,0,0,1547,1548,3,212,106,0,1548,1549,
		5,81,0,0,1549,1550,5,81,0,0,1550,1553,1,0,0,0,1551,1553,3,210,105,0,1552,
		1545,1,0,0,0,1552,1551,1,0,0,0,1553,209,1,0,0,0,1554,1555,5,3,0,0,1555,
		1556,5,78,0,0,1556,1558,3,252,126,0,1557,1559,5,124,0,0,1558,1557,1,0,
		0,0,1558,1559,1,0,0,0,1559,1560,1,0,0,0,1560,1561,5,79,0,0,1561,1571,1,
		0,0,0,1562,1563,5,3,0,0,1563,1564,5,78,0,0,1564,1566,3,88,44,0,1565,1567,
		5,124,0,0,1566,1565,1,0,0,0,1566,1567,1,0,0,0,1567,1568,1,0,0,0,1568,1569,
		5,79,0,0,1569,1571,1,0,0,0,1570,1554,1,0,0,0,1570,1562,1,0,0,0,1571,211,
		1,0,0,0,1572,1574,6,106,-1,0,1573,1575,3,214,107,0,1574,1573,1,0,0,0,1574,
		1575,1,0,0,0,1575,1580,1,0,0,0,1576,1577,3,214,107,0,1577,1578,5,124,0,
		0,1578,1580,1,0,0,0,1579,1572,1,0,0,0,1579,1576,1,0,0,0,1580,1593,1,0,
		0,0,1581,1582,10,3,0,0,1582,1584,5,115,0,0,1583,1585,3,214,107,0,1584,
		1583,1,0,0,0,1584,1585,1,0,0,0,1585,1592,1,0,0,0,1586,1587,10,1,0,0,1587,
		1588,5,115,0,0,1588,1589,3,214,107,0,1589,1590,5,124,0,0,1590,1592,1,0,
		0,0,1591,1581,1,0,0,0,1591,1586,1,0,0,0,1592,1595,1,0,0,0,1593,1591,1,
		0,0,0,1593,1594,1,0,0,0,1594,213,1,0,0,0,1595,1593,1,0,0,0,1596,1598,3,
		216,108,0,1597,1599,3,222,111,0,1598,1597,1,0,0,0,1598,1599,1,0,0,0,1599,
		215,1,0,0,0,1600,1603,5,125,0,0,1601,1603,3,218,109,0,1602,1600,1,0,0,
		0,1602,1601,1,0,0,0,1603,217,1,0,0,0,1604,1605,3,220,110,0,1605,1606,5,
		120,0,0,1606,1607,5,125,0,0,1607,219,1,0,0,0,1608,1609,5,125,0,0,1609,
		221,1,0,0,0,1610,1611,5,78,0,0,1611,1612,3,224,112,0,1612,1613,5,79,0,
		0,1613,223,1,0,0,0,1614,1616,6,112,-1,0,1615,1617,3,226,113,0,1616,1615,
		1,0,0,0,1616,1617,1,0,0,0,1617,1622,1,0,0,0,1618,1619,10,1,0,0,1619,1621,
		3,226,113,0,1620,1618,1,0,0,0,1621,1624,1,0,0,0,1622,1620,1,0,0,0,1622,
		1623,1,0,0,0,1623,225,1,0,0,0,1624,1622,1,0,0,0,1625,1626,5,78,0,0,1626,
		1627,3,224,112,0,1627,1628,5,79,0,0,1628,1638,1,0,0,0,1629,1630,5,80,0,
		0,1630,1631,3,224,112,0,1631,1632,5,81,0,0,1632,1638,1,0,0,0,1633,1634,
		5,82,0,0,1634,1635,3,224,112,0,1635,1636,5,83,0,0,1636,1638,1,0,0,0,1637,
		1625,1,0,0,0,1637,1629,1,0,0,0,1637,1633,1,0,0,0,1638,227,1,0,0,0,1639,
		1640,6,114,-1,0,1640,1641,3,230,115,0,1641,1647,1,0,0,0,1642,1643,10,1,
		0,0,1643,1644,5,115,0,0,1644,1646,3,230,115,0,1645,1642,1,0,0,0,1646,1649,
		1,0,0,0,1647,1645,1,0,0,0,1647,1648,1,0,0,0,1648,229,1,0,0,0,1649,1647,
		1,0,0,0,1650,1652,3,232,116,0,1651,1653,3,274,137,0,1652,1651,1,0,0,0,
		1652,1653,1,0,0,0,1653,231,1,0,0,0,1654,1660,3,234,117,0,1655,1656,3,236,
		118,0,1656,1657,3,238,119,0,1657,1658,3,240,120,0,1658,1660,1,0,0,0,1659,
		1654,1,0,0,0,1659,1655,1,0,0,0,1660,233,1,0,0,0,1661,1666,3,236,118,0,
		1662,1663,3,242,121,0,1663,1664,3,234,117,0,1664,1666,1,0,0,0,1665,1661,
		1,0,0,0,1665,1662,1,0,0,0,1666,235,1,0,0,0,1667,1668,6,118,-1,0,1668,1670,
		3,250,125,0,1669,1671,3,206,103,0,1670,1669,1,0,0,0,1670,1671,1,0,0,0,
		1671,1677,1,0,0,0,1672,1673,5,78,0,0,1673,1674,3,234,117,0,1674,1675,5,
		79,0,0,1675,1677,1,0,0,0,1676,1667,1,0,0,0,1676,1672,1,0,0,0,1677,1691,
		1,0,0,0,1678,1679,10,3,0,0,1679,1690,3,238,119,0,1680,1681,10,2,0,0,1681,
		1683,5,80,0,0,1682,1684,3,88,44,0,1683,1682,1,0,0,0,1683,1684,1,0,0,0,
		1684,1685,1,0,0,0,1685,1687,5,81,0,0,1686,1688,3,206,103,0,1687,1686,1,
		0,0,0,1687,1688,1,0,0,0,1688,1690,1,0,0,0,1689,1678,1,0,0,0,1689,1680,
		1,0,0,0,1690,1693,1,0,0,0,1691,1689,1,0,0,0,1691,1692,1,0,0,0,1692,237,
		1,0,0,0,1693,1691,1,0,0,0,1694,1695,5,78,0,0,1695,1696,3,264,132,0,1696,
		1698,5,79,0,0,1697,1699,3,244,122,0,1698,1697,1,0,0,0,1698,1699,1,0,0,
		0,1699,1701,1,0,0,0,1700,1702,3,248,124,0,1701,1700,1,0,0,0,1701,1702,
		1,0,0,0,1702,1704,1,0,0,0,1703,1705,3,376,188,0,1704,1703,1,0,0,0,1704,
		1705,1,0,0,0,1705,1707,1,0,0,0,1706,1708,3,206,103,0,1707,1706,1,0,0,0,
		1707,1708,1,0,0,0,1708,239,1,0,0,0,1709,1710,5,117,0,0,1710,1712,3,148,
		74,0,1711,1713,3,254,127,0,1712,1711,1,0,0,0,1712,1713,1,0,0,0,1713,241,
		1,0,0,0,1714,1716,5,86,0,0,1715,1717,3,206,103,0,1716,1715,1,0,0,0,1716,
		1717,1,0,0,0,1717,1719,1,0,0,0,1718,1720,3,244,122,0,1719,1718,1,0,0,0,
		1719,1720,1,0,0,0,1720,1738,1,0,0,0,1721,1723,5,90,0,0,1722,1724,3,206,
		103,0,1723,1722,1,0,0,0,1723,1724,1,0,0,0,1724,1738,1,0,0,0,1725,1727,
		5,111,0,0,1726,1728,3,206,103,0,1727,1726,1,0,0,0,1727,1728,1,0,0,0,1728,
		1738,1,0,0,0,1729,1730,3,10,5,0,1730,1732,5,86,0,0,1731,1733,3,206,103,
		0,1732,1731,1,0,0,0,1732,1733,1,0,0,0,1733,1735,1,0,0,0,1734,1736,3,244,
		122,0,1735,1734,1,0,0,0,1735,1736,1,0,0,0,1736,1738,1,0,0,0,1737,1714,
		1,0,0,0,1737,1721,1,0,0,0,1737,1725,1,0,0,0,1737,1729,1,0,0,0,1738,243,
		1,0,0,0,1739,1741,3,246,123,0,1740,1742,3,244,122,0,1741,1740,1,0,0,0,
		1741,1742,1,0,0,0,1742,245,1,0,0,0,1743,1744,7,4,0,0,1744,247,1,0,0,0,
		1745,1746,7,5,0,0,1746,249,1,0,0,0,1747,1749,5,124,0,0,1748,1747,1,0,0,
		0,1748,1749,1,0,0,0,1749,1750,1,0,0,0,1750,1751,3,4,2,0,1751,251,1,0,0,
		0,1752,1754,3,146,73,0,1753,1755,3,254,127,0,1754,1753,1,0,0,0,1754,1755,
		1,0,0,0,1755,253,1,0,0,0,1756,1765,3,256,128,0,1757,1759,3,258,129,0,1758,
		1757,1,0,0,0,1758,1759,1,0,0,0,1759,1760,1,0,0,0,1760,1761,3,238,119,0,
		1761,1762,3,240,120,0,1762,1765,1,0,0,0,1763,1765,3,260,130,0,1764,1756,
		1,0,0,0,1764,1758,1,0,0,0,1764,1763,1,0,0,0,1765,255,1,0,0,0,1766,1772,
		3,258,129,0,1767,1769,3,242,121,0,1768,1770,3,256,128,0,1769,1768,1,0,
		0,0,1769,1770,1,0,0,0,1770,1772,1,0,0,0,1771,1766,1,0,0,0,1771,1767,1,
		0,0,0,1772,257,1,0,0,0,1773,1774,6,129,-1,0,1774,1788,3,238,119,0,1775,
		1777,5,80,0,0,1776,1778,3,88,44,0,1777,1776,1,0,0,0,1777,1778,1,0,0,0,
		1778,1779,1,0,0,0,1779,1781,5,81,0,0,1780,1782,3,206,103,0,1781,1780,1,
		0,0,0,1781,1782,1,0,0,0,1782,1788,1,0,0,0,1783,1784,5,78,0,0,1784,1785,
		3,256,128,0,1785,1786,5,79,0,0,1786,1788,1,0,0,0,1787,1773,1,0,0,0,1787,
		1775,1,0,0,0,1787,1783,1,0,0,0,1788,1802,1,0,0,0,1789,1790,10,5,0,0,1790,
		1801,3,238,119,0,1791,1792,10,3,0,0,1792,1794,5,80,0,0,1793,1795,3,88,
		44,0,1794,1793,1,0,0,0,1794,1795,1,0,0,0,1795,1796,1,0,0,0,1796,1798,5,
		81,0,0,1797,1799,3,206,103,0,1798,1797,1,0,0,0,1798,1799,1,0,0,0,1799,
		1801,1,0,0,0,1800,1789,1,0,0,0,1800,1791,1,0,0,0,1801,1804,1,0,0,0,1802,
		1800,1,0,0,0,1802,1803,1,0,0,0,1803,259,1,0,0,0,1804,1802,1,0,0,0,1805,
		1810,3,262,131,0,1806,1807,3,242,121,0,1807,1808,3,260,130,0,1808,1810,
		1,0,0,0,1809,1805,1,0,0,0,1809,1806,1,0,0,0,1810,261,1,0,0,0,1811,1812,
		6,131,-1,0,1812,1813,5,124,0,0,1813,1827,1,0,0,0,1814,1815,10,3,0,0,1815,
		1826,3,238,119,0,1816,1817,10,2,0,0,1817,1819,5,80,0,0,1818,1820,3,88,
		44,0,1819,1818,1,0,0,0,1819,1820,1,0,0,0,1820,1821,1,0,0,0,1821,1823,5,
		81,0,0,1822,1824,3,206,103,0,1823,1822,1,0,0,0,1823,1824,1,0,0,0,1824,
		1826,1,0,0,0,1825,1814,1,0,0,0,1825,1816,1,0,0,0,1826,1829,1,0,0,0,1827,
		1825,1,0,0,0,1827,1828,1,0,0,0,1828,263,1,0,0,0,1829,1827,1,0,0,0,1830,
		1832,3,266,133,0,1831,1830,1,0,0,0,1831,1832,1,0,0,0,1832,1834,1,0,0,0,
		1833,1835,5,124,0,0,1834,1833,1,0,0,0,1834,1835,1,0,0,0,1835,1841,1,0,
		0,0,1836,1837,3,266,133,0,1837,1838,5,115,0,0,1838,1839,5,124,0,0,1839,
		1841,1,0,0,0,1840,1831,1,0,0,0,1840,1836,1,0,0,0,1841,265,1,0,0,0,1842,
		1843,6,133,-1,0,1843,1844,3,268,134,0,1844,1850,1,0,0,0,1845,1846,10,1,
		0,0,1846,1847,5,115,0,0,1847,1849,3,268,134,0,1848,1845,1,0,0,0,1849,1852,
		1,0,0,0,1850,1848,1,0,0,0,1850,1851,1,0,0,0,1851,267,1,0,0,0,1852,1850,
		1,0,0,0,1853,1855,3,206,103,0,1854,1853,1,0,0,0,1854,1855,1,0,0,0,1855,
		1856,1,0,0,0,1856,1857,3,134,67,0,1857,1858,3,232,116,0,1858,1885,1,0,
		0,0,1859,1861,3,206,103,0,1860,1859,1,0,0,0,1860,1861,1,0,0,0,1861,1862,
		1,0,0,0,1862,1863,3,134,67,0,1863,1864,3,232,116,0,1864,1865,5,94,0,0,
		1865,1866,3,278,139,0,1866,1885,1,0,0,0,1867,1869,3,206,103,0,1868,1867,
		1,0,0,0,1868,1869,1,0,0,0,1869,1870,1,0,0,0,1870,1872,3,134,67,0,1871,
		1873,3,254,127,0,1872,1871,1,0,0,0,1872,1873,1,0,0,0,1873,1885,1,0,0,0,
		1874,1876,3,206,103,0,1875,1874,1,0,0,0,1875,1876,1,0,0,0,1876,1877,1,
		0,0,0,1877,1879,3,134,67,0,1878,1880,3,254,127,0,1879,1878,1,0,0,0,1879,
		1880,1,0,0,0,1880,1881,1,0,0,0,1881,1882,5,94,0,0,1882,1883,3,278,139,
		0,1883,1885,1,0,0,0,1884,1854,1,0,0,0,1884,1860,1,0,0,0,1884,1868,1,0,
		0,0,1884,1875,1,0,0,0,1885,269,1,0,0,0,1886,1888,3,206,103,0,1887,1886,
		1,0,0,0,1887,1888,1,0,0,0,1888,1890,1,0,0,0,1889,1891,3,134,67,0,1890,
		1889,1,0,0,0,1890,1891,1,0,0,0,1891,1892,1,0,0,0,1892,1894,3,232,116,0,
		1893,1895,3,304,152,0,1894,1893,1,0,0,0,1894,1895,1,0,0,0,1895,1896,1,
		0,0,0,1896,1897,3,272,136,0,1897,271,1,0,0,0,1898,1900,3,328,164,0,1899,
		1898,1,0,0,0,1899,1900,1,0,0,0,1900,1901,1,0,0,0,1901,1910,3,96,48,0,1902,
		1910,3,366,183,0,1903,1904,5,94,0,0,1904,1905,5,20,0,0,1905,1910,5,121,
		0,0,1906,1907,5,94,0,0,1907,1908,5,21,0,0,1908,1910,5,121,0,0,1909,1899,
		1,0,0,0,1909,1902,1,0,0,0,1909,1903,1,0,0,0,1909,1906,1,0,0,0,1910,273,
		1,0,0,0,1911,1917,3,276,138,0,1912,1913,5,78,0,0,1913,1914,3,32,16,0,1914,
		1915,5,79,0,0,1915,1917,1,0,0,0,1916,1911,1,0,0,0,1916,1912,1,0,0,0,1917,
		275,1,0,0,0,1918,1919,5,94,0,0,1919,1922,3,278,139,0,1920,1922,3,282,141,
		0,1921,1918,1,0,0,0,1921,1920,1,0,0,0,1922,277,1,0,0,0,1923,1926,3,82,
		41,0,1924,1926,3,282,141,0,1925,1923,1,0,0,0,1925,1924,1,0,0,0,1926,279,
		1,0,0,0,1927,1928,6,140,-1,0,1928,1930,3,278,139,0,1929,1931,5,124,0,0,
		1930,1929,1,0,0,0,1930,1931,1,0,0,0,1931,1940,1,0,0,0,1932,1933,10,1,0,
		0,1933,1934,5,115,0,0,1934,1936,3,278,139,0,1935,1937,5,124,0,0,1936,1935,
		1,0,0,0,1936,1937,1,0,0,0,1937,1939,1,0,0,0,1938,1932,1,0,0,0,1939,1942,
		1,0,0,0,1940,1938,1,0,0,0,1940,1941,1,0,0,0,1941,281,1,0,0,0,1942,1940,
		1,0,0,0,1943,1944,5,82,0,0,1944,1946,3,280,140,0,1945,1947,5,115,0,0,1946,
		1945,1,0,0,0,1946,1947,1,0,0,0,1947,1948,1,0,0,0,1948,1949,5,83,0,0,1949,
		1953,1,0,0,0,1950,1951,5,82,0,0,1951,1953,5,83,0,0,1952,1943,1,0,0,0,1952,
		1950,1,0,0,0,1953,283,1,0,0,0,1954,1957,5,125,0,0,1955,1957,3,348,174,
		0,1956,1954,1,0,0,0,1956,1955,1,0,0,0,1957,285,1,0,0,0,1958,1959,3,288,
		144,0,1959,1961,5,82,0,0,1960,1962,3,296,148,0,1961,1960,1,0,0,0,1961,
		1962,1,0,0,0,1962,1963,1,0,0,0,1963,1964,5,83,0,0,1964,287,1,0,0,0,1965,
		1967,3,294,147,0,1966,1968,3,206,103,0,1967,1966,1,0,0,0,1967,1968,1,0,
		0,0,1968,1969,1,0,0,0,1969,1971,3,290,145,0,1970,1972,3,292,146,0,1971,
		1970,1,0,0,0,1971,1972,1,0,0,0,1972,1974,1,0,0,0,1973,1975,3,310,155,0,
		1974,1973,1,0,0,0,1974,1975,1,0,0,0,1975,1984,1,0,0,0,1976,1978,3,294,
		147,0,1977,1979,3,206,103,0,1978,1977,1,0,0,0,1978,1979,1,0,0,0,1979,1981,
		1,0,0,0,1980,1982,3,310,155,0,1981,1980,1,0,0,0,1981,1982,1,0,0,0,1982,
		1984,1,0,0,0,1983,1965,1,0,0,0,1983,1976,1,0,0,0,1984,289,1,0,0,0,1985,
		1987,3,10,5,0,1986,1985,1,0,0,0,1986,1987,1,0,0,0,1987,1988,1,0,0,0,1988,
		1989,3,284,142,0,1989,291,1,0,0,0,1990,1991,5,31,0,0,1991,293,1,0,0,0,
		1992,1993,7,6,0,0,1993,295,1,0,0,0,1994,1996,3,298,149,0,1995,1997,3,296,
		148,0,1996,1995,1,0,0,0,1996,1997,1,0,0,0,1997,2004,1,0,0,0,1998,1999,
		3,320,160,0,1999,2001,5,119,0,0,2000,2002,3,296,148,0,2001,2000,1,0,0,
		0,2001,2002,1,0,0,0,2002,2004,1,0,0,0,2003,1994,1,0,0,0,2003,1998,1,0,
		0,0,2004,297,1,0,0,0,2005,2007,3,206,103,0,2006,2005,1,0,0,0,2006,2007,
		1,0,0,0,2007,2009,1,0,0,0,2008,2010,3,134,67,0,2009,2008,1,0,0,0,2009,
		2010,1,0,0,0,2010,2012,1,0,0,0,2011,2013,3,300,150,0,2012,2011,1,0,0,0,
		2012,2013,1,0,0,0,2013,2014,1,0,0,0,2014,2022,5,121,0,0,2015,2022,3,270,
		135,0,2016,2022,3,198,99,0,2017,2022,3,126,63,0,2018,2022,3,340,170,0,
		2019,2022,3,122,61,0,2020,2022,3,128,64,0,2021,2006,1,0,0,0,2021,2015,
		1,0,0,0,2021,2016,1,0,0,0,2021,2017,1,0,0,0,2021,2018,1,0,0,0,2021,2019,
		1,0,0,0,2021,2020,1,0,0,0,2022,299,1,0,0,0,2023,2024,6,150,-1,0,2024,2025,
		3,302,151,0,2025,2031,1,0,0,0,2026,2027,10,1,0,0,2027,2028,5,115,0,0,2028,
		2030,3,302,151,0,2029,2026,1,0,0,0,2030,2033,1,0,0,0,2031,2029,1,0,0,0,
		2031,2032,1,0,0,0,2032,301,1,0,0,0,2033,2031,1,0,0,0,2034,2036,3,232,116,
		0,2035,2037,3,304,152,0,2036,2035,1,0,0,0,2036,2037,1,0,0,0,2037,2039,
		1,0,0,0,2038,2040,3,308,154,0,2039,2038,1,0,0,0,2039,2040,1,0,0,0,2040,
		2054,1,0,0,0,2041,2043,3,232,116,0,2042,2044,3,276,138,0,2043,2042,1,0,
		0,0,2043,2044,1,0,0,0,2044,2054,1,0,0,0,2045,2047,5,125,0,0,2046,2045,
		1,0,0,0,2046,2047,1,0,0,0,2047,2049,1,0,0,0,2048,2050,3,206,103,0,2049,
		2048,1,0,0,0,2049,2050,1,0,0,0,2050,2051,1,0,0,0,2051,2052,5,119,0,0,2052,
		2054,3,88,44,0,2053,2034,1,0,0,0,2053,2041,1,0,0,0,2053,2046,1,0,0,0,2054,
		303,1,0,0,0,2055,2056,6,152,-1,0,2056,2057,3,306,153,0,2057,2062,1,0,0,
		0,2058,2059,10,1,0,0,2059,2061,3,306,153,0,2060,2058,1,0,0,0,2061,2064,
		1,0,0,0,2062,2060,1,0,0,0,2062,2063,1,0,0,0,2063,305,1,0,0,0,2064,2062,
		1,0,0,0,2065,2066,7,7,0,0,2066,307,1,0,0,0,2067,2068,5,94,0,0,2068,2069,
		5,127,0,0,2069,309,1,0,0,0,2070,2071,5,119,0,0,2071,2072,3,312,156,0,2072,
		311,1,0,0,0,2073,2074,6,156,-1,0,2074,2076,3,314,157,0,2075,2077,5,124,
		0,0,2076,2075,1,0,0,0,2076,2077,1,0,0,0,2077,2086,1,0,0,0,2078,2079,10,
		1,0,0,2079,2080,5,115,0,0,2080,2082,3,314,157,0,2081,2083,5,124,0,0,2082,
		2081,1,0,0,0,2082,2083,1,0,0,0,2083,2085,1,0,0,0,2084,2078,1,0,0,0,2085,
		2088,1,0,0,0,2086,2084,1,0,0,0,2086,2087,1,0,0,0,2087,313,1,0,0,0,2088,
		2086,1,0,0,0,2089,2091,3,206,103,0,2090,2089,1,0,0,0,2090,2091,1,0,0,0,
		2091,2092,1,0,0,0,2092,2111,3,318,159,0,2093,2095,3,206,103,0,2094,2093,
		1,0,0,0,2094,2095,1,0,0,0,2095,2096,1,0,0,0,2096,2098,5,73,0,0,2097,2099,
		3,320,160,0,2098,2097,1,0,0,0,2098,2099,1,0,0,0,2099,2100,1,0,0,0,2100,
		2111,3,318,159,0,2101,2103,3,206,103,0,2102,2101,1,0,0,0,2102,2103,1,0,
		0,0,2103,2104,1,0,0,0,2104,2106,3,320,160,0,2105,2107,5,73,0,0,2106,2105,
		1,0,0,0,2106,2107,1,0,0,0,2107,2108,1,0,0,0,2108,2109,3,318,159,0,2109,
		2111,1,0,0,0,2110,2090,1,0,0,0,2110,2094,1,0,0,0,2110,2102,1,0,0,0,2111,
		315,1,0,0,0,2112,2114,3,10,5,0,2113,2112,1,0,0,0,2113,2114,1,0,0,0,2114,
		2115,1,0,0,0,2115,2118,3,284,142,0,2116,2118,3,154,77,0,2117,2113,1,0,
		0,0,2117,2116,1,0,0,0,2118,317,1,0,0,0,2119,2120,3,316,158,0,2120,319,
		1,0,0,0,2121,2122,7,8,0,0,2122,321,1,0,0,0,2123,2124,5,45,0,0,2124,2125,
		3,324,162,0,2125,323,1,0,0,0,2126,2128,3,146,73,0,2127,2129,3,326,163,
		0,2128,2127,1,0,0,0,2128,2129,1,0,0,0,2129,325,1,0,0,0,2130,2132,3,242,
		121,0,2131,2133,3,326,163,0,2132,2131,1,0,0,0,2132,2133,1,0,0,0,2133,327,
		1,0,0,0,2134,2135,5,119,0,0,2135,2136,3,330,165,0,2136,329,1,0,0,0,2137,
		2139,3,332,166,0,2138,2140,5,124,0,0,2139,2138,1,0,0,0,2139,2140,1,0,0,
		0,2140,2149,1,0,0,0,2141,2143,3,332,166,0,2142,2144,5,124,0,0,2143,2142,
		1,0,0,0,2143,2144,1,0,0,0,2144,2145,1,0,0,0,2145,2146,5,115,0,0,2146,2147,
		3,330,165,0,2147,2149,1,0,0,0,2148,2137,1,0,0,0,2148,2141,1,0,0,0,2149,
		331,1,0,0,0,2150,2151,3,334,167,0,2151,2153,5,78,0,0,2152,2154,3,32,16,
		0,2153,2152,1,0,0,0,2153,2154,1,0,0,0,2154,2155,1,0,0,0,2155,2156,5,79,
		0,0,2156,2161,1,0,0,0,2157,2158,3,334,167,0,2158,2159,3,282,141,0,2159,
		2161,1,0,0,0,2160,2150,1,0,0,0,2160,2157,1,0,0,0,2161,333,1,0,0,0,2162,
		2165,3,316,158,0,2163,2165,5,125,0,0,2164,2162,1,0,0,0,2164,2163,1,0,0,
		0,2165,335,1,0,0,0,2166,2167,5,45,0,0,2167,2168,3,388,194,0,2168,337,1,
		0,0,0,2169,2170,5,45,0,0,2170,2171,5,135,0,0,2171,2175,5,125,0,0,2172,
		2173,5,45,0,0,2173,2175,5,138,0,0,2174,2169,1,0,0,0,2174,2172,1,0,0,0,
		2175,339,1,0,0,0,2176,2177,5,61,0,0,2177,2178,5,95,0,0,2178,2179,3,342,
		171,0,2179,2180,5,96,0,0,2180,2181,3,118,59,0,2181,341,1,0,0,0,2182,2183,
		6,171,-1,0,2183,2184,3,344,172,0,2184,2190,1,0,0,0,2185,2186,10,1,0,0,
		2186,2187,5,115,0,0,2187,2189,3,344,172,0,2188,2185,1,0,0,0,2189,2192,
		1,0,0,0,2190,2188,1,0,0,0,2190,2191,1,0,0,0,2191,343,1,0,0,0,2192,2190,
		1,0,0,0,2193,2196,3,346,173,0,2194,2196,3,268,134,0,2195,2193,1,0,0,0,
		2195,2194,1,0,0,0,2196,345,1,0,0,0,2197,2199,5,14,0,0,2198,2200,5,124,
		0,0,2199,2198,1,0,0,0,2199,2200,1,0,0,0,2200,2202,1,0,0,0,2201,2203,5,
		125,0,0,2202,2201,1,0,0,0,2202,2203,1,0,0,0,2203,2246,1,0,0,0,2204,2206,
		5,14,0,0,2205,2207,5,125,0,0,2206,2205,1,0,0,0,2206,2207,1,0,0,0,2207,
		2208,1,0,0,0,2208,2209,5,94,0,0,2209,2246,3,252,126,0,2210,2212,5,69,0,
		0,2211,2213,5,124,0,0,2212,2211,1,0,0,0,2212,2213,1,0,0,0,2213,2215,1,
		0,0,0,2214,2216,5,125,0,0,2215,2214,1,0,0,0,2215,2216,1,0,0,0,2216,2246,
		1,0,0,0,2217,2219,5,69,0,0,2218,2220,5,125,0,0,2219,2218,1,0,0,0,2219,
		2220,1,0,0,0,2220,2221,1,0,0,0,2221,2222,5,94,0,0,2222,2246,3,252,126,
		0,2223,2224,5,61,0,0,2224,2225,5,95,0,0,2225,2226,3,342,171,0,2226,2227,
		5,96,0,0,2227,2229,5,14,0,0,2228,2230,5,124,0,0,2229,2228,1,0,0,0,2229,
		2230,1,0,0,0,2230,2232,1,0,0,0,2231,2233,5,125,0,0,2232,2231,1,0,0,0,2232,
		2233,1,0,0,0,2233,2246,1,0,0,0,2234,2235,5,61,0,0,2235,2236,5,95,0,0,2236,
		2237,3,342,171,0,2237,2238,5,96,0,0,2238,2240,5,14,0,0,2239,2241,5,125,
		0,0,2240,2239,1,0,0,0,2240,2241,1,0,0,0,2241,2242,1,0,0,0,2242,2243,5,
		94,0,0,2243,2244,3,4,2,0,2244,2246,1,0,0,0,2245,2197,1,0,0,0,2245,2204,
		1,0,0,0,2245,2210,1,0,0,0,2245,2217,1,0,0,0,2245,2223,1,0,0,0,2245,2234,
		1,0,0,0,2246,347,1,0,0,0,2247,2248,3,352,176,0,2248,2250,5,95,0,0,2249,
		2251,3,354,177,0,2250,2249,1,0,0,0,2250,2251,1,0,0,0,2251,2252,1,0,0,0,
		2252,2253,5,96,0,0,2253,349,1,0,0,0,2254,2270,3,348,174,0,2255,2256,3,
		336,168,0,2256,2258,5,95,0,0,2257,2259,3,354,177,0,2258,2257,1,0,0,0,2258,
		2259,1,0,0,0,2259,2260,1,0,0,0,2260,2261,5,96,0,0,2261,2270,1,0,0,0,2262,
		2263,3,338,169,0,2263,2265,5,95,0,0,2264,2266,3,354,177,0,2265,2264,1,
		0,0,0,2265,2266,1,0,0,0,2266,2267,1,0,0,0,2267,2268,5,96,0,0,2268,2270,
		1,0,0,0,2269,2254,1,0,0,0,2269,2255,1,0,0,0,2269,2262,1,0,0,0,2270,351,
		1,0,0,0,2271,2272,5,125,0,0,2272,353,1,0,0,0,2273,2274,6,177,-1,0,2274,
		2276,3,356,178,0,2275,2277,5,124,0,0,2276,2275,1,0,0,0,2276,2277,1,0,0,
		0,2277,2286,1,0,0,0,2278,2279,10,1,0,0,2279,2280,5,115,0,0,2280,2282,3,
		356,178,0,2281,2283,5,124,0,0,2282,2281,1,0,0,0,2282,2283,1,0,0,0,2283,
		2285,1,0,0,0,2284,2278,1,0,0,0,2285,2288,1,0,0,0,2286,2284,1,0,0,0,2286,
		2287,1,0,0,0,2287,355,1,0,0,0,2288,2286,1,0,0,0,2289,2293,3,252,126,0,
		2290,2293,3,88,44,0,2291,2293,3,4,2,0,2292,2289,1,0,0,0,2292,2290,1,0,
		0,0,2292,2291,1,0,0,0,2293,357,1,0,0,0,2294,2295,5,69,0,0,2295,2296,3,
		10,5,0,2296,2297,5,125,0,0,2297,2306,1,0,0,0,2298,2299,5,69,0,0,2299,2301,
		3,10,5,0,2300,2302,5,61,0,0,2301,2300,1,0,0,0,2301,2302,1,0,0,0,2302,2303,
		1,0,0,0,2303,2304,3,348,174,0,2304,2306,1,0,0,0,2305,2294,1,0,0,0,2305,
		2298,1,0,0,0,2306,359,1,0,0,0,2307,2309,5,29,0,0,2308,2307,1,0,0,0,2308,
		2309,1,0,0,0,2309,2310,1,0,0,0,2310,2311,5,61,0,0,2311,2312,3,118,59,0,
		2312,361,1,0,0,0,2313,2314,5,61,0,0,2314,2315,5,95,0,0,2315,2316,5,96,
		0,0,2316,2317,3,118,59,0,2317,363,1,0,0,0,2318,2319,5,66,0,0,2319,2320,
		3,96,48,0,2320,2321,3,368,184,0,2321,365,1,0,0,0,2322,2324,5,66,0,0,2323,
		2325,3,328,164,0,2324,2323,1,0,0,0,2324,2325,1,0,0,0,2325,2326,1,0,0,0,
		2326,2327,3,96,48,0,2327,2328,3,368,184,0,2328,367,1,0,0,0,2329,2331,3,
		370,185,0,2330,2332,3,368,184,0,2331,2330,1,0,0,0,2331,2332,1,0,0,0,2332,
		369,1,0,0,0,2333,2334,5,10,0,0,2334,2335,5,78,0,0,2335,2336,3,372,186,
		0,2336,2337,5,79,0,0,2337,2338,3,96,48,0,2338,371,1,0,0,0,2339,2341,3,
		206,103,0,2340,2339,1,0,0,0,2340,2341,1,0,0,0,2341,2342,1,0,0,0,2342,2343,
		3,146,73,0,2343,2344,3,232,116,0,2344,2354,1,0,0,0,2345,2347,3,206,103,
		0,2346,2345,1,0,0,0,2346,2347,1,0,0,0,2347,2348,1,0,0,0,2348,2350,3,146,
		73,0,2349,2351,3,254,127,0,2350,2349,1,0,0,0,2350,2351,1,0,0,0,2351,2354,
		1,0,0,0,2352,2354,5,124,0,0,2353,2340,1,0,0,0,2353,2346,1,0,0,0,2353,2352,
		1,0,0,0,2354,373,1,0,0,0,2355,2357,5,64,0,0,2356,2358,3,82,41,0,2357,2356,
		1,0,0,0,2357,2358,1,0,0,0,2358,375,1,0,0,0,2359,2362,3,378,189,0,2360,
		2362,3,382,191,0,2361,2359,1,0,0,0,2361,2360,1,0,0,0,2362,377,1,0,0,0,
		2363,2364,5,64,0,0,2364,2366,5,78,0,0,2365,2367,3,380,190,0,2366,2365,
		1,0,0,0,2366,2367,1,0,0,0,2367,2368,1,0,0,0,2368,2369,5,79,0,0,2369,379,
		1,0,0,0,2370,2371,6,190,-1,0,2371,2373,3,252,126,0,2372,2374,5,124,0,0,
		2373,2372,1,0,0,0,2373,2374,1,0,0,0,2374,2383,1,0,0,0,2375,2376,10,1,0,
		0,2376,2377,5,115,0,0,2377,2379,3,252,126,0,2378,2380,5,124,0,0,2379,2378,
		1,0,0,0,2379,2380,1,0,0,0,2380,2382,1,0,0,0,2381,2375,1,0,0,0,2382,2385,
		1,0,0,0,2383,2381,1,0,0,0,2383,2384,1,0,0,0,2384,381,1,0,0,0,2385,2383,
		1,0,0,0,2386,2387,5,43,0,0,2387,2388,5,78,0,0,2388,2389,3,88,44,0,2389,
		2390,5,79,0,0,2390,2393,1,0,0,0,2391,2393,5,43,0,0,2392,2386,1,0,0,0,2392,
		2391,1,0,0,0,2393,383,1,0,0,0,2394,2395,5,96,0,0,2395,2396,5,96,0,0,2396,
		385,1,0,0,0,2397,2398,5,96,0,0,2398,2399,5,96,0,0,2399,2400,5,94,0,0,2400,
		387,1,0,0,0,2401,2450,5,42,0,0,2402,2450,5,21,0,0,2403,2404,5,42,0,0,2404,
		2405,5,80,0,0,2405,2450,5,81,0,0,2406,2407,5,21,0,0,2407,2408,5,80,0,0,
		2408,2450,5,81,0,0,2409,2450,5,84,0,0,2410,2450,5,85,0,0,2411,2450,5,86,
		0,0,2412,2450,5,87,0,0,2413,2450,5,88,0,0,2414,2450,5,89,0,0,2415,2450,
		5,90,0,0,2416,2450,5,91,0,0,2417,2450,5,92,0,0,2418,2450,5,93,0,0,2419,
		2450,5,94,0,0,2420,2450,5,95,0,0,2421,2450,5,96,0,0,2422,2450,5,97,0,0,
		2423,2450,5,98,0,0,2424,2450,5,99,0,0,2425,2450,5,100,0,0,2426,2450,5,
		101,0,0,2427,2450,5,102,0,0,2428,2450,5,103,0,0,2429,2450,5,104,0,0,2430,
		2450,5,105,0,0,2431,2450,3,384,192,0,2432,2450,3,386,193,0,2433,2450,5,
		106,0,0,2434,2450,5,107,0,0,2435,2450,5,108,0,0,2436,2450,5,109,0,0,2437,
		2450,5,110,0,0,2438,2450,5,111,0,0,2439,2450,5,112,0,0,2440,2450,5,113,
		0,0,2441,2450,5,114,0,0,2442,2450,5,115,0,0,2443,2450,5,116,0,0,2444,2450,
		5,117,0,0,2445,2446,5,78,0,0,2446,2450,5,79,0,0,2447,2448,5,80,0,0,2448,
		2450,5,81,0,0,2449,2401,1,0,0,0,2449,2402,1,0,0,0,2449,2403,1,0,0,0,2449,
		2406,1,0,0,0,2449,2409,1,0,0,0,2449,2410,1,0,0,0,2449,2411,1,0,0,0,2449,
		2412,1,0,0,0,2449,2413,1,0,0,0,2449,2414,1,0,0,0,2449,2415,1,0,0,0,2449,
		2416,1,0,0,0,2449,2417,1,0,0,0,2449,2418,1,0,0,0,2449,2419,1,0,0,0,2449,
		2420,1,0,0,0,2449,2421,1,0,0,0,2449,2422,1,0,0,0,2449,2423,1,0,0,0,2449,
		2424,1,0,0,0,2449,2425,1,0,0,0,2449,2426,1,0,0,0,2449,2427,1,0,0,0,2449,
		2428,1,0,0,0,2449,2429,1,0,0,0,2449,2430,1,0,0,0,2449,2431,1,0,0,0,2449,
		2432,1,0,0,0,2449,2433,1,0,0,0,2449,2434,1,0,0,0,2449,2435,1,0,0,0,2449,
		2436,1,0,0,0,2449,2437,1,0,0,0,2449,2438,1,0,0,0,2449,2439,1,0,0,0,2449,
		2440,1,0,0,0,2449,2441,1,0,0,0,2449,2442,1,0,0,0,2449,2443,1,0,0,0,2449,
		2444,1,0,0,0,2449,2445,1,0,0,0,2449,2447,1,0,0,0,2450,389,1,0,0,0,2451,
		2459,5,126,0,0,2452,2459,5,133,0,0,2453,2459,5,134,0,0,2454,2459,5,135,
		0,0,2455,2459,3,392,196,0,2456,2459,3,394,197,0,2457,2459,3,396,198,0,
		2458,2451,1,0,0,0,2458,2452,1,0,0,0,2458,2453,1,0,0,0,2458,2454,1,0,0,
		0,2458,2455,1,0,0,0,2458,2456,1,0,0,0,2458,2457,1,0,0,0,2459,391,1,0,0,
		0,2460,2461,7,9,0,0,2461,393,1,0,0,0,2462,2463,5,44,0,0,2463,395,1,0,0,
		0,2464,2465,7,10,0,0,2465,397,1,0,0,0,315,399,411,415,426,430,445,452,
		457,459,464,470,480,487,493,497,502,508,515,521,524,527,530,537,544,596,
		611,617,623,636,638,644,659,665,695,700,704,708,711,715,721,723,731,735,
		738,745,752,756,761,765,768,773,779,792,803,805,820,822,834,836,849,851,
		869,871,883,885,896,907,918,929,940,950,958,971,981,988,992,996,1000,1004,
		1009,1012,1015,1021,1029,1034,1037,1043,1054,1077,1081,1089,1095,1115,
		1119,1132,1136,1139,1146,1154,1164,1175,1187,1197,1202,1209,1212,1217,
		1222,1243,1247,1252,1263,1269,1273,1278,1282,1287,1290,1312,1318,1329,
		1333,1336,1346,1352,1355,1362,1372,1376,1379,1382,1386,1391,1393,1397,
		1401,1410,1423,1431,1437,1443,1447,1450,1459,1468,1476,1487,1493,1504,
		1507,1512,1527,1533,1542,1552,1558,1566,1570,1574,1579,1584,1591,1593,
		1598,1602,1616,1622,1637,1647,1652,1659,1665,1670,1676,1683,1687,1689,
		1691,1698,1701,1704,1707,1712,1716,1719,1723,1727,1732,1735,1737,1741,
		1748,1754,1758,1764,1769,1771,1777,1781,1787,1794,1798,1800,1802,1809,
		1819,1823,1825,1827,1831,1834,1840,1850,1854,1860,1868,1872,1875,1879,
		1884,1887,1890,1894,1899,1909,1916,1921,1925,1930,1936,1940,1946,1952,
		1956,1961,1967,1971,1974,1978,1981,1983,1986,1996,2001,2003,2006,2009,
		2012,2021,2031,2036,2039,2043,2046,2049,2053,2062,2076,2082,2086,2090,
		2094,2098,2102,2106,2110,2113,2117,2128,2132,2139,2143,2148,2153,2160,
		2164,2174,2190,2195,2199,2202,2206,2212,2215,2219,2229,2232,2240,2245,
		2250,2258,2265,2269,2276,2282,2286,2292,2301,2305,2308,2324,2331,2340,
		2346,2350,2353,2357,2361,2366,2373,2379,2383,2392,2449,2458
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
