//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class WhiteboxParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LOREM=1, IPSUM=2, DOLOR=3, SIT=4, AMET=5, CONSECTETUR=6, ADIPISCING=7, 
		WS=8;
	public const int
		RULE_test1 = 0, RULE_rule1 = 1, RULE_rule2 = 2, RULE_rule3 = 3, RULE_rule4 = 4, 
		RULE_rule5 = 5, RULE_test2 = 6, RULE_rule7 = 7, RULE_rule8 = 8, RULE_rule9 = 9, 
		RULE_rule10 = 10, RULE_rule11 = 11, RULE_test3 = 12, RULE_rule13 = 13, 
		RULE_test4 = 14, RULE_rule15 = 15, RULE_rule16 = 16, RULE_test5 = 17, 
		RULE_rule18 = 18, RULE_rule19 = 19, RULE_test6 = 20, RULE_rule21 = 21, 
		RULE_rule22 = 22, RULE_test7 = 23, RULE_test8 = 24;
	public static readonly string[] ruleNames = {
		"test1", "rule1", "rule2", "rule3", "rule4", "rule5", "test2", "rule7", 
		"rule8", "rule9", "rule10", "rule11", "test3", "rule13", "test4", "rule15", 
		"rule16", "test5", "rule18", "rule19", "test6", "rule21", "rule22", "test7", 
		"test8"
	};

	private static readonly string[] _LiteralNames = {
		null, "'LOREM'", "'IPSUM'", "'DOLOR'", "'SIT'", "'AMET'", "'CONSECTETUR'", 
		"'ADIPISCING'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LOREM", "IPSUM", "DOLOR", "SIT", "AMET", "CONSECTETUR", "ADIPISCING", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Whitebox.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static WhiteboxParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public WhiteboxParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public WhiteboxParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Test1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rule1Context rule1() {
			return GetRuleContext<Rule1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADIPISCING() { return GetToken(WhiteboxParser.ADIPISCING, 0); }
		public Test1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test1; } }
	}

	[RuleVersion(0)]
	public Test1Context test1() {
		Test1Context _localctx = new Test1Context(Context, State);
		EnterRule(_localctx, 0, RULE_test1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			rule1();
			State = 51;
			Match(ADIPISCING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rule2Context rule2() {
			return GetRuleContext<Rule2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSECTETUR() { return GetToken(WhiteboxParser.CONSECTETUR, 0); }
		public Rule1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule1; } }
	}

	[RuleVersion(0)]
	public Rule1Context rule1() {
		Rule1Context _localctx = new Rule1Context(Context, State);
		EnterRule(_localctx, 2, RULE_rule1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			rule2();
			State = 54;
			Match(CONSECTETUR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOREM() { return GetToken(WhiteboxParser.LOREM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rule3Context rule3() {
			return GetRuleContext<Rule3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule5Context rule5() {
			return GetRuleContext<Rule5Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SIT() { return GetTokens(WhiteboxParser.SIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIT(int i) {
			return GetToken(WhiteboxParser.SIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMET() { return GetToken(WhiteboxParser.AMET, 0); }
		public Rule2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule2; } }
	}

	[RuleVersion(0)]
	public Rule2Context rule2() {
		Rule2Context _localctx = new Rule2Context(Context, State);
		EnterRule(_localctx, 4, RULE_rule2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			Match(LOREM);
			State = 57;
			rule3();
			State = 58;
			rule5();
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SIT) {
				{
				{
				State = 59;
				Match(SIT);
				}
				}
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AMET) {
				{
				State = 65;
				Match(AMET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rule4Context rule4() {
			return GetRuleContext<Rule4Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLOR() { return GetToken(WhiteboxParser.DOLOR, 0); }
		public Rule3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule3; } }
	}

	[RuleVersion(0)]
	public Rule3Context rule3() {
		Rule3Context _localctx = new Rule3Context(Context, State);
		EnterRule(_localctx, 6, RULE_rule3);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			rule4();
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOLOR) {
				{
				State = 69;
				Match(DOLOR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule4Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPSUM() { return GetToken(WhiteboxParser.IPSUM, 0); }
		public Rule4Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule4; } }
	}

	[RuleVersion(0)]
	public Rule4Context rule4() {
		Rule4Context _localctx = new Rule4Context(Context, State);
		EnterRule(_localctx, 8, RULE_rule4);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IPSUM) {
				{
				State = 72;
				Match(IPSUM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule5Context : ParserRuleContext {
		public Rule5Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule5; } }
	}

	[RuleVersion(0)]
	public Rule5Context rule5() {
		Rule5Context _localctx = new Rule5Context(Context, State);
		EnterRule(_localctx, 10, RULE_rule5);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rule7Context rule7() {
			return GetRuleContext<Rule7Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADIPISCING() { return GetToken(WhiteboxParser.ADIPISCING, 0); }
		public Test2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test2; } }
	}

	[RuleVersion(0)]
	public Test2Context test2() {
		Test2Context _localctx = new Test2Context(Context, State);
		EnterRule(_localctx, 12, RULE_test2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			rule7();
			State = 78;
			Match(ADIPISCING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule7Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rule8Context rule8() {
			return GetRuleContext<Rule8Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSECTETUR() { return GetToken(WhiteboxParser.CONSECTETUR, 0); }
		public Rule7Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule7; } }
	}

	[RuleVersion(0)]
	public Rule7Context rule7() {
		Rule7Context _localctx = new Rule7Context(Context, State);
		EnterRule(_localctx, 14, RULE_rule7);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			rule8();
			State = 81;
			Match(CONSECTETUR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule8Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOREM() { return GetToken(WhiteboxParser.LOREM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rule11Context rule11() {
			return GetRuleContext<Rule11Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule9Context rule9() {
			return GetRuleContext<Rule9Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SIT() { return GetTokens(WhiteboxParser.SIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIT(int i) {
			return GetToken(WhiteboxParser.SIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMET() { return GetToken(WhiteboxParser.AMET, 0); }
		public Rule8Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule8; } }
	}

	[RuleVersion(0)]
	public Rule8Context rule8() {
		Rule8Context _localctx = new Rule8Context(Context, State);
		EnterRule(_localctx, 16, RULE_rule8);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(LOREM);
			State = 84;
			rule11();
			State = 85;
			rule9();
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SIT) {
				{
				{
				State = 86;
				Match(SIT);
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AMET) {
				{
				State = 92;
				Match(AMET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule9Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rule10Context rule10() {
			return GetRuleContext<Rule10Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLOR() { return GetToken(WhiteboxParser.DOLOR, 0); }
		public Rule9Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule9; } }
	}

	[RuleVersion(0)]
	public Rule9Context rule9() {
		Rule9Context _localctx = new Rule9Context(Context, State);
		EnterRule(_localctx, 18, RULE_rule9);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			rule10();
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOLOR) {
				{
				State = 96;
				Match(DOLOR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule10Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPSUM() { return GetToken(WhiteboxParser.IPSUM, 0); }
		public Rule10Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule10; } }
	}

	[RuleVersion(0)]
	public Rule10Context rule10() {
		Rule10Context _localctx = new Rule10Context(Context, State);
		EnterRule(_localctx, 20, RULE_rule10);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IPSUM) {
				{
				State = 99;
				Match(IPSUM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule11Context : ParserRuleContext {
		public Rule11Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule11; } }
	}

	[RuleVersion(0)]
	public Rule11Context rule11() {
		Rule11Context _localctx = new Rule11Context(Context, State);
		EnterRule(_localctx, 22, RULE_rule11);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOREM() { return GetToken(WhiteboxParser.LOREM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rule13Context rule13() {
			return GetRuleContext<Rule13Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSECTETUR() { return GetToken(WhiteboxParser.CONSECTETUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPSUM() { return GetToken(WhiteboxParser.IPSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AMET() { return GetTokens(WhiteboxParser.AMET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMET(int i) {
			return GetToken(WhiteboxParser.AMET, i);
		}
		public Test3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test3; } }
	}

	[RuleVersion(0)]
	public Test3Context test3() {
		Test3Context _localctx = new Test3Context(Context, State);
		EnterRule(_localctx, 24, RULE_test3);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(LOREM);
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IPSUM) {
				{
				State = 105;
				Match(IPSUM);
				}
			}

			State = 108;
			rule13();
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 109;
				Match(AMET);
				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==AMET );
			State = 114;
			Match(CONSECTETUR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule13Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOLOR() { return GetTokens(WhiteboxParser.DOLOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLOR(int i) {
			return GetToken(WhiteboxParser.DOLOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SIT() { return GetTokens(WhiteboxParser.SIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIT(int i) {
			return GetToken(WhiteboxParser.SIT, i);
		}
		public Rule13Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule13; } }
	}

	[RuleVersion(0)]
	public Rule13Context rule13() {
		Rule13Context _localctx = new Rule13Context(Context, State);
		EnterRule(_localctx, 26, RULE_rule13);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOLOR || _la==SIT) {
				{
				{
				State = 116;
				_la = TokenStream.LA(1);
				if ( !(_la==DOLOR || _la==SIT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test4Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOREM() { return GetToken(WhiteboxParser.LOREM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rule15Context rule15() {
			return GetRuleContext<Rule15Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule16Context rule16() {
			return GetRuleContext<Rule16Context>(0);
		}
		public Test4Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test4; } }
	}

	[RuleVersion(0)]
	public Test4Context test4() {
		Test4Context _localctx = new Test4Context(Context, State);
		EnterRule(_localctx, 28, RULE_test4);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(LOREM);
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 123;
				rule15();
				}
				break;
			case 2:
				{
				State = 124;
				rule16();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule15Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPSUM() { return GetToken(WhiteboxParser.IPSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLOR() { return GetToken(WhiteboxParser.DOLOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIT() { return GetToken(WhiteboxParser.SIT, 0); }
		public Rule15Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule15; } }
	}

	[RuleVersion(0)]
	public Rule15Context rule15() {
		Rule15Context _localctx = new Rule15Context(Context, State);
		EnterRule(_localctx, 30, RULE_rule15);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(IPSUM);
			State = 128;
			Match(DOLOR);
			State = 129;
			Match(SIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule16Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPSUM() { return GetToken(WhiteboxParser.IPSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLOR() { return GetToken(WhiteboxParser.DOLOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMET() { return GetToken(WhiteboxParser.AMET, 0); }
		public Rule16Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule16; } }
	}

	[RuleVersion(0)]
	public Rule16Context rule16() {
		Rule16Context _localctx = new Rule16Context(Context, State);
		EnterRule(_localctx, 32, RULE_rule16);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(IPSUM);
			State = 132;
			Match(DOLOR);
			State = 133;
			Match(AMET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test5Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOREM() { return GetToken(WhiteboxParser.LOREM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rule15Context rule15() {
			return GetRuleContext<Rule15Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule16Context rule16() {
			return GetRuleContext<Rule16Context>(0);
		}
		public Test5Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test5; } }
	}

	[RuleVersion(0)]
	public Test5Context test5() {
		Test5Context _localctx = new Test5Context(Context, State);
		EnterRule(_localctx, 34, RULE_test5);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(LOREM);
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 136;
				rule15();
				}
				break;
			case 2:
				{
				State = 137;
				rule16();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule18Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPSUM() { return GetToken(WhiteboxParser.IPSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLOR() { return GetToken(WhiteboxParser.DOLOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIT() { return GetToken(WhiteboxParser.SIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSECTETUR() { return GetToken(WhiteboxParser.CONSECTETUR, 0); }
		public Rule18Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule18; } }
	}

	[RuleVersion(0)]
	public Rule18Context rule18() {
		Rule18Context _localctx = new Rule18Context(Context, State);
		EnterRule(_localctx, 36, RULE_rule18);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(IPSUM);
			State = 141;
			Match(DOLOR);
			State = 142;
			_la = TokenStream.LA(1);
			if ( !(_la==SIT || _la==CONSECTETUR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule19Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPSUM() { return GetToken(WhiteboxParser.IPSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLOR() { return GetToken(WhiteboxParser.DOLOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMET() { return GetToken(WhiteboxParser.AMET, 0); }
		public Rule19Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule19; } }
	}

	[RuleVersion(0)]
	public Rule19Context rule19() {
		Rule19Context _localctx = new Rule19Context(Context, State);
		EnterRule(_localctx, 38, RULE_rule19);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(IPSUM);
			State = 145;
			Match(DOLOR);
			State = 146;
			Match(AMET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test6Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOREM() { return GetToken(WhiteboxParser.LOREM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rule15Context rule15() {
			return GetRuleContext<Rule15Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule16Context rule16() {
			return GetRuleContext<Rule16Context>(0);
		}
		public Test6Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test6; } }
	}

	[RuleVersion(0)]
	public Test6Context test6() {
		Test6Context _localctx = new Test6Context(Context, State);
		EnterRule(_localctx, 40, RULE_test6);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(LOREM);
			State = 151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 149;
				rule15();
				}
				break;
			case 2:
				{
				State = 150;
				rule16();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule21Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPSUM() { return GetToken(WhiteboxParser.IPSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLOR() { return GetToken(WhiteboxParser.DOLOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIT() { return GetToken(WhiteboxParser.SIT, 0); }
		public Rule21Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule21; } }
	}

	[RuleVersion(0)]
	public Rule21Context rule21() {
		Rule21Context _localctx = new Rule21Context(Context, State);
		EnterRule(_localctx, 42, RULE_rule21);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(IPSUM);
			State = 154;
			Match(DOLOR);
			State = 155;
			Match(SIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule22Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPSUM() { return GetToken(WhiteboxParser.IPSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLOR() { return GetToken(WhiteboxParser.DOLOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMET() { return GetToken(WhiteboxParser.AMET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSECTETUR() { return GetToken(WhiteboxParser.CONSECTETUR, 0); }
		public Rule22Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule22; } }
	}

	[RuleVersion(0)]
	public Rule22Context rule22() {
		Rule22Context _localctx = new Rule22Context(Context, State);
		EnterRule(_localctx, 44, RULE_rule22);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			Match(IPSUM);
			State = 158;
			Match(DOLOR);
			State = 159;
			_la = TokenStream.LA(1);
			if ( !(_la==AMET || _la==CONSECTETUR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test7Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOREM() { return GetToken(WhiteboxParser.LOREM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPSUM() { return GetToken(WhiteboxParser.IPSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLOR() { return GetToken(WhiteboxParser.DOLOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIT() { return GetToken(WhiteboxParser.SIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMET() { return GetToken(WhiteboxParser.AMET, 0); }
		public Test7Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test7; } }
	}

	[RuleVersion(0)]
	public Test7Context test7() {
		Test7Context _localctx = new Test7Context(Context, State);
		EnterRule(_localctx, 46, RULE_test7);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			Match(LOREM);
			State = 168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 162;
				Match(IPSUM);
				State = 163;
				Match(DOLOR);
				State = 164;
				Match(SIT);
				}
				break;
			case 2:
				{
				State = 165;
				Match(IPSUM);
				State = 166;
				Match(DOLOR);
				State = 167;
				Match(AMET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test8Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOREM() { return GetToken(WhiteboxParser.LOREM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPSUM() { return GetToken(WhiteboxParser.IPSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLOR() { return GetToken(WhiteboxParser.DOLOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIT() { return GetToken(WhiteboxParser.SIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMET() { return GetToken(WhiteboxParser.AMET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSECTETUR() { return GetToken(WhiteboxParser.CONSECTETUR, 0); }
		public Test8Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test8; } }
	}

	[RuleVersion(0)]
	public Test8Context test8() {
		Test8Context _localctx = new Test8Context(Context, State);
		EnterRule(_localctx, 48, RULE_test8);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(LOREM);
			State = 179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 171;
				Match(IPSUM);
				State = 172;
				Match(DOLOR);
				State = 173;
				Match(SIT);
				State = 174;
				Match(AMET);
				}
				break;
			case 2:
				{
				State = 175;
				Match(IPSUM);
				State = 176;
				Match(DOLOR);
				State = 177;
				Match(SIT);
				State = 178;
				Match(CONSECTETUR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,8,182,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
		5,2,61,8,2,10,2,12,2,64,9,2,1,2,3,2,67,8,2,1,3,1,3,3,3,71,8,3,1,4,3,4,
		74,8,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,5,8,88,8,8,10,8,
		12,8,91,9,8,1,8,3,8,94,8,8,1,9,1,9,3,9,98,8,9,1,10,3,10,101,8,10,1,11,
		1,11,1,12,1,12,3,12,107,8,12,1,12,1,12,4,12,111,8,12,11,12,12,12,112,1,
		12,1,12,1,13,5,13,118,8,13,10,13,12,13,121,9,13,1,14,1,14,1,14,3,14,126,
		8,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,3,17,139,8,
		17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,3,20,152,8,20,
		1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,
		1,23,3,23,169,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,180,
		8,24,1,24,0,0,25,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,42,44,46,48,0,3,1,0,3,4,2,0,4,4,6,6,1,0,5,6,172,0,50,1,0,0,0,2,53,1,
		0,0,0,4,56,1,0,0,0,6,68,1,0,0,0,8,73,1,0,0,0,10,75,1,0,0,0,12,77,1,0,0,
		0,14,80,1,0,0,0,16,83,1,0,0,0,18,95,1,0,0,0,20,100,1,0,0,0,22,102,1,0,
		0,0,24,104,1,0,0,0,26,119,1,0,0,0,28,122,1,0,0,0,30,127,1,0,0,0,32,131,
		1,0,0,0,34,135,1,0,0,0,36,140,1,0,0,0,38,144,1,0,0,0,40,148,1,0,0,0,42,
		153,1,0,0,0,44,157,1,0,0,0,46,161,1,0,0,0,48,170,1,0,0,0,50,51,3,2,1,0,
		51,52,5,7,0,0,52,1,1,0,0,0,53,54,3,4,2,0,54,55,5,6,0,0,55,3,1,0,0,0,56,
		57,5,1,0,0,57,58,3,6,3,0,58,62,3,10,5,0,59,61,5,4,0,0,60,59,1,0,0,0,61,
		64,1,0,0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,66,1,0,0,0,64,62,1,0,0,0,65,
		67,5,5,0,0,66,65,1,0,0,0,66,67,1,0,0,0,67,5,1,0,0,0,68,70,3,8,4,0,69,71,
		5,3,0,0,70,69,1,0,0,0,70,71,1,0,0,0,71,7,1,0,0,0,72,74,5,2,0,0,73,72,1,
		0,0,0,73,74,1,0,0,0,74,9,1,0,0,0,75,76,1,0,0,0,76,11,1,0,0,0,77,78,3,14,
		7,0,78,79,5,7,0,0,79,13,1,0,0,0,80,81,3,16,8,0,81,82,5,6,0,0,82,15,1,0,
		0,0,83,84,5,1,0,0,84,85,3,22,11,0,85,89,3,18,9,0,86,88,5,4,0,0,87,86,1,
		0,0,0,88,91,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,93,1,0,0,0,91,89,1,
		0,0,0,92,94,5,5,0,0,93,92,1,0,0,0,93,94,1,0,0,0,94,17,1,0,0,0,95,97,3,
		20,10,0,96,98,5,3,0,0,97,96,1,0,0,0,97,98,1,0,0,0,98,19,1,0,0,0,99,101,
		5,2,0,0,100,99,1,0,0,0,100,101,1,0,0,0,101,21,1,0,0,0,102,103,1,0,0,0,
		103,23,1,0,0,0,104,106,5,1,0,0,105,107,5,2,0,0,106,105,1,0,0,0,106,107,
		1,0,0,0,107,108,1,0,0,0,108,110,3,26,13,0,109,111,5,5,0,0,110,109,1,0,
		0,0,111,112,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,114,1,0,0,0,114,
		115,5,6,0,0,115,25,1,0,0,0,116,118,7,0,0,0,117,116,1,0,0,0,118,121,1,0,
		0,0,119,117,1,0,0,0,119,120,1,0,0,0,120,27,1,0,0,0,121,119,1,0,0,0,122,
		125,5,1,0,0,123,126,3,30,15,0,124,126,3,32,16,0,125,123,1,0,0,0,125,124,
		1,0,0,0,126,29,1,0,0,0,127,128,5,2,0,0,128,129,5,3,0,0,129,130,5,4,0,0,
		130,31,1,0,0,0,131,132,5,2,0,0,132,133,5,3,0,0,133,134,5,5,0,0,134,33,
		1,0,0,0,135,138,5,1,0,0,136,139,3,30,15,0,137,139,3,32,16,0,138,136,1,
		0,0,0,138,137,1,0,0,0,139,35,1,0,0,0,140,141,5,2,0,0,141,142,5,3,0,0,142,
		143,7,1,0,0,143,37,1,0,0,0,144,145,5,2,0,0,145,146,5,3,0,0,146,147,5,5,
		0,0,147,39,1,0,0,0,148,151,5,1,0,0,149,152,3,30,15,0,150,152,3,32,16,0,
		151,149,1,0,0,0,151,150,1,0,0,0,152,41,1,0,0,0,153,154,5,2,0,0,154,155,
		5,3,0,0,155,156,5,4,0,0,156,43,1,0,0,0,157,158,5,2,0,0,158,159,5,3,0,0,
		159,160,7,2,0,0,160,45,1,0,0,0,161,168,5,1,0,0,162,163,5,2,0,0,163,164,
		5,3,0,0,164,169,5,4,0,0,165,166,5,2,0,0,166,167,5,3,0,0,167,169,5,5,0,
		0,168,162,1,0,0,0,168,165,1,0,0,0,169,47,1,0,0,0,170,179,5,1,0,0,171,172,
		5,2,0,0,172,173,5,3,0,0,173,174,5,4,0,0,174,180,5,5,0,0,175,176,5,2,0,
		0,176,177,5,3,0,0,177,178,5,4,0,0,178,180,5,6,0,0,179,171,1,0,0,0,179,
		175,1,0,0,0,180,49,1,0,0,0,16,62,66,70,73,89,93,97,100,106,112,119,125,
		138,151,168,179
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
